&google_protobuf.SourceCodeInfo_Location{Path:[]int32{4, 0}, Span:[]int32{45, 0, 47, 1}, LeadingComments:func(v string) *string { return &v } ( " The protocol compiler can output a FileDescriptorSet containing the .proto\n files it parses.\n" ), TrailingComments:nil, XXX_unrecognized:[]byte{}}
&google_protobuf.SourceCodeInfo_Location{Path:[]int32{4, 1}, Span:[]int32{50, 0, 78, 1}, LeadingComments:func(v string) *string { return &v } ( " Describes a complete .proto file.\n" ), TrailingComments:nil, XXX_unrecognized:[]byte{}}
&google_protobuf.SourceCodeInfo_Location{Path:[]int32{4, 1, 2, 1}, Span:[]int32{53, 2, 30}, LeadingComments:func(v string) *string { return &v } ( " file name, relative to root of source tree\n" ), TrailingComments:func(v string) *string { return &v } ( " e.g. \"foo\", \"foo.bar\", etc.\n" ), XXX_unrecognized:[]byte{}}
&google_protobuf.SourceCodeInfo_Location{Path:[]int32{4, 1, 2, 2}, Span:[]int32{57, 2, 33}, LeadingComments:func(v string) *string { return &v } ( " Names of files imported by this file.\n" ), TrailingComments:nil, XXX_unrecognized:[]byte{}}
&google_protobuf.SourceCodeInfo_Location{Path:[]int32{4, 1, 2, 3}, Span:[]int32{60, 2, 40}, LeadingComments:func(v string) *string { return &v } ( " Indexes of the public imported files in the dependency list above.\n" ), TrailingComments:nil, XXX_unrecognized:[]byte{}}
&google_protobuf.SourceCodeInfo_Location{Path:[]int32{4, 1, 2, 4}, Span:[]int32{64, 2, 38}, LeadingComments:func(v string) *string { return &v } ( " Indexes of the weak imported files in the dependency list.\n For Google-internal migration only. Do not use.\n" ), TrailingComments:nil, XXX_unrecognized:[]byte{}}
&google_protobuf.SourceCodeInfo_Location{Path:[]int32{4, 1, 2, 5}, Span:[]int32{67, 2, 44}, LeadingComments:func(v string) *string { return &v } ( " All top-level definitions in this file.\n" ), TrailingComments:nil, XXX_unrecognized:[]byte{}}
&google_protobuf.SourceCodeInfo_Location{Path:[]int32{4, 1, 2, 10}, Span:[]int32{77, 2, 47}, LeadingComments:func(v string) *string { return &v } ( " This field contains optional information about the original source code.\n You may safely remove this entire field whithout harming runtime\n functionality of the descriptors -- the information is needed only by\n development tools.\n" ), TrailingComments:nil, XXX_unrecognized:[]byte{}}
&google_protobuf.SourceCodeInfo_Location{Path:[]int32{4, 2}, Span:[]int32{81, 0, 94, 1}, LeadingComments:func(v string) *string { return &v } ( " Describes a message type.\n" ), TrailingComments:nil, XXX_unrecognized:[]byte{}}
&google_protobuf.SourceCodeInfo_Location{Path:[]int32{4, 3}, Span:[]int32{97, 0, 168, 1}, LeadingComments:func(v string) *string { return &v } ( " Describes a field within a message.\n" ), TrailingComments:nil, XXX_unrecognized:[]byte{}}
&google_protobuf.SourceCodeInfo_Location{Path:[]int32{4, 3, 2, 3}, Span:[]int32{104, 2, 62}, LeadingComments:func(v string) *string { return &v } ( " If type_name is set, this need not be set.  If both this and type_name\n are set, this must be either TYPE_ENUM or TYPE_MESSAGE.\n" ), TrailingComments:nil, XXX_unrecognized:[]byte{}}
&google_protobuf.SourceCodeInfo_Location{Path:[]int32{4, 3, 2, 4}, Span:[]int32{111, 2, 32}, LeadingComments:func(v string) *string { return &v } ( " For message and enum types, this is the name of the type.  If the name\n starts with a '.', it is fully-qualified.  Otherwise, C++-like scoping\n rules are used to find the type (i.e. first the nested types within this\n message are searched, then within the parent, on up to the root\n namespace).\n" ), TrailingComments:nil, XXX_unrecognized:[]byte{}}
&google_protobuf.SourceCodeInfo_Location{Path:[]int32{4, 3, 2, 5}, Span:[]int32{115, 2, 31}, LeadingComments:func(v string) *string { return &v } ( " For extensions, this is the name of the type being extended.  It is\n resolved in the same manner as type_name.\n" ), TrailingComments:nil, XXX_unrecognized:[]byte{}}
&google_protobuf.SourceCodeInfo_Location{Path:[]int32{4, 3, 2, 6}, Span:[]int32{122, 2, 36}, LeadingComments:func(v string) *string { return &v } ( " For numeric types, contains the original text representation of the value.\n For booleans, \"true\" or \"false\".\n For strings, contains the default text contents (not escaped in any way).\n For bytes, contains the C escaped value.  All bytes >= 128 are escaped.\n TODO(kenton):  Base-64 encode?\n" ), TrailingComments:nil, XXX_unrecognized:[]byte{}}
&google_protobuf.SourceCodeInfo_Location{Path:[]int32{4, 3, 4, 0, 2, 0}, Span:[]int32{129, 4, 20}, LeadingComments:func(v string) *string { return &v } ( " 0 is reserved for errors.\n Order is weird for historical reasons.\n" ), TrailingComments:nil, XXX_unrecognized:[]byte{}}
&google_protobuf.SourceCodeInfo_Location{Path:[]int32{4, 3, 4, 0, 2, 2}, Span:[]int32{134, 4, 19}, LeadingComments:func(v string) *string { return &v } ( " Not ZigZag encoded.  Negative numbers take 10 bytes.  Use TYPE_SINT64 if\n negative values are likely.\n" ), TrailingComments:nil, XXX_unrecognized:[]byte{}}
&google_protobuf.SourceCodeInfo_Location{Path:[]int32{4, 3, 4, 0, 2, 4}, Span:[]int32{139, 4, 19}, LeadingComments:func(v string) *string { return &v } ( " Not ZigZag encoded.  Negative numbers take 10 bytes.  Use TYPE_SINT32 if\n negative values are likely.\n" ), TrailingComments:nil, XXX_unrecognized:[]byte{}}
&google_protobuf.SourceCodeInfo_Location{Path:[]int32{4, 3, 4, 0, 2, 10}, Span:[]int32{146, 4, 22}, LeadingComments:func(v string) *string { return &v } ( " Tag-delimited aggregate.\n" ), TrailingComments:func(v string) *string { return &v } ( " Length-delimited aggregate.\n" ), XXX_unrecognized:[]byte{}}
&google_protobuf.SourceCodeInfo_Location{Path:[]int32{4, 3, 4, 0, 2, 11}, Span:[]int32{150, 4, 20}, LeadingComments:func(v string) *string { return &v } ( " New in version 2.\n" ), TrailingComments:nil, XXX_unrecognized:[]byte{}}
&google_protobuf.SourceCodeInfo_Location{Path:[]int32{4, 3, 4, 0, 2, 17}, Span:[]int32{157, 4, 21}, LeadingComments:func(v string) *string { return &v } ( " Uses ZigZag encoding.\n" ), TrailingComments:func(v string) *string { return &v } ( " Uses ZigZag encoding.\n" ), XXX_unrecognized:[]byte{}}
&google_protobuf.SourceCodeInfo_Location{Path:[]int32{4, 3, 4, 1, 2, 0}, Span:[]int32{163, 4, 23}, LeadingComments:func(v string) *string { return &v } ( " 0 is reserved for errors\n" ), TrailingComments:nil, XXX_unrecognized:[]byte{}}
&google_protobuf.SourceCodeInfo_Location{Path:[]int32{4, 3, 4, 1, 2, 2}, Span:[]int32{165, 4, 23}, LeadingComments:nil, TrailingComments:func(v string) *string { return &v } ( " TODO(sanjay): Should we add LABEL_MAP?\n" ), XXX_unrecognized:[]byte{}}
&google_protobuf.SourceCodeInfo_Location{Path:[]int32{4, 4}, Span:[]int32{171, 0, 175, 1}, LeadingComments:func(v string) *string { return &v } ( " Describes an enum type.\n" ), TrailingComments:nil, XXX_unrecognized:[]byte{}}
&google_protobuf.SourceCodeInfo_Location{Path:[]int32{4, 5}, Span:[]int32{178, 0, 182, 1}, LeadingComments:func(v string) *string { return &v } ( " Describes a value within an enum.\n" ), TrailingComments:nil, XXX_unrecognized:[]byte{}}
&google_protobuf.SourceCodeInfo_Location{Path:[]int32{4, 6}, Span:[]int32{185, 0, 189, 1}, LeadingComments:func(v string) *string { return &v } ( " Describes a service.\n" ), TrailingComments:nil, XXX_unrecognized:[]byte{}}
&google_protobuf.SourceCodeInfo_Location{Path:[]int32{4, 7}, Span:[]int32{192, 0, 200, 1}, LeadingComments:func(v string) *string { return &v } ( " Describes a method of a service.\n" ), TrailingComments:nil, XXX_unrecognized:[]byte{}}
&google_protobuf.SourceCodeInfo_Location{Path:[]int32{4, 7, 2, 1}, Span:[]int32{197, 2, 33}, LeadingComments:func(v string) *string { return &v } ( " Input and output type names.  These are resolved in the same way as\n FieldDescriptorProto.type_name, but must refer to a message type.\n" ), TrailingComments:nil, XXX_unrecognized:[]byte{}}
&google_protobuf.SourceCodeInfo_Location{Path:[]int32{4, 8, 5}, Span:[]int32{205, 2, 25}, LeadingComments:func(v string) *string { return &v } ( " Clients can define custom options in extensions of this message. See above.\n" ), TrailingComments:nil, XXX_unrecognized:[]byte{}}
&google_protobuf.SourceCodeInfo_Location{Path:[]int32{4, 8, 2, 0}, Span:[]int32{211, 2, 35}, LeadingComments:func(v string) *string { return &v } ( " Sets the Java package where classes generated from this .proto will be\n placed.  By default, the proto package is used, but this is often\n inappropriate because proto packages do not normally start with backwards\n domain names.\n" ), TrailingComments:nil, XXX_unrecognized:[]byte{}}
&google_protobuf.SourceCodeInfo_Location{Path:[]int32{4, 8, 2, 1}, Span:[]int32{218, 2, 43}, LeadingComments:func(v string) *string { return &v } ( " If set, all the classes from the .proto file are wrapped in a single\n outer class with the given name.  This applies to both Proto1\n (equivalent to the old \"--one_java_file\" option) and Proto2 (where\n a .proto always translates to a single class, but you may want to\n explicitly choose the class name).\n" ), TrailingComments:nil, XXX_unrecognized:[]byte{}}
&google_protobuf.SourceCodeInfo_Location{Path:[]int32{4, 8, 2, 2}, Span:[]int32{226, 2, 41}, LeadingComments:func(v string) *string { return &v } ( " If set true, then the Java code generator will generate a separate .java\n file for each top-level message, enum, and service defined in the .proto\n file.  Thus, these types will *not* be nested inside the outer class\n named by java_outer_classname.  However, the outer class will still be\n generated to contain the file's getDescriptor() method as well as any\n top-level extensions defined in the file.\n" ), TrailingComments:nil, XXX_unrecognized:[]byte{}}
&google_protobuf.SourceCodeInfo_Location{Path:[]int32{4, 8, 2, 3}, Span:[]int32{232, 2, 51}, LeadingComments:func(v string) *string { return &v } ( " If set true, then the Java code generator will generate equals() and\n hashCode() methods for all messages defined in the .proto file. This is\n purely a speed optimization, as the AbstractMessage base class includes\n reflection-based implementations of these methods.\n" ), TrailingComments:nil, XXX_unrecognized:[]byte{}}
&google_protobuf.SourceCodeInfo_Location{Path:[]int32{4, 8, 2, 5}, Span:[]int32{237, 2, 34}, LeadingComments:func(v string) *string { return &v } ( " Sets the Go package where structs generated from this .proto will be\n placed.  There is no default.\n" ), TrailingComments:nil, XXX_unrecognized:[]byte{}}
&google_protobuf.SourceCodeInfo_Location{Path:[]int32{4, 8, 2, 6}, Span:[]int32{249, 2, 41}, LeadingComments:func(v string) *string { return &v } ( " Should generic services be generated in each language?  \"Generic\" services\n are not specific to any particular RPC system.  They are generated by the\n main code generators in each language (without additional plugins).\n Generic services were the only kind of service generation supported by\n early versions of proto2.\n\n Generic services are now considered deprecated in favor of using plugins\n that generate code specific to your particular RPC system.  Therefore,\n these default to false.  Old code which depends on generic services should\n explicitly set them to true.\n" ), TrailingComments:nil, XXX_unrecognized:[]byte{}}
&google_protobuf.SourceCodeInfo_Location{Path:[]int32{4, 8, 2, 9}, Span:[]int32{254, 2, 58}, LeadingComments:func(v string) *string { return &v } ( " The parser stores options it doesn't recognize here. See above.\n" ), TrailingComments:nil, XXX_unrecognized:[]byte{}}
&google_protobuf.SourceCodeInfo_Location{Path:[]int32{4, 8, 4, 0}, Span:[]int32{257, 2, 266, 3}, LeadingComments:func(v string) *string { return &v } ( " Generated classes can be optimized for speed or code size.\n" ), TrailingComments:nil, XXX_unrecognized:[]byte{}}
&google_protobuf.SourceCodeInfo_Location{Path:[]int32{4, 8, 4, 0, 2, 0}, Span:[]int32{258, 4, 14}, LeadingComments:nil, TrailingComments:func(v string) *string { return &v } ( " Generate complete code for parsing, serialization,\n" ), XXX_unrecognized:[]byte{}}
&google_protobuf.SourceCodeInfo_Location{Path:[]int32{4, 8, 4, 0, 2, 1}, Span:[]int32{262, 4, 18}, LeadingComments:func(v string) *string { return &v } ( " etc.\n" ), TrailingComments:nil, XXX_unrecognized:[]byte{}}
&google_protobuf.SourceCodeInfo_Location{Path:[]int32{4, 8, 4, 0, 2, 2}, Span:[]int32{264, 4, 21}, LeadingComments:func(v string) *string { return &v } ( " Use ReflectionOps to implement these methods.\n" ), TrailingComments:func(v string) *string { return &v } ( " Generate code using MessageLite and the lite runtime.\n" ), XXX_unrecognized:[]byte{}}
&google_protobuf.SourceCodeInfo_Location{Path:[]int32{4, 9, 5}, Span:[]int32{272, 2, 25}, LeadingComments:func(v string) *string { return &v } ( " Clients can define custom options in extensions of this message. See above.\n" ), TrailingComments:nil, XXX_unrecognized:[]byte{}}
&google_protobuf.SourceCodeInfo_Location{Path:[]int32{4, 9, 2, 0}, Span:[]int32{292, 2, 44}, LeadingComments:func(v string) *string { return &v } ( " Set true to use the old proto1 MessageSet wire format for extensions.\n This is provided for backwards-compatibility with the MessageSet wire\n format.  You should not use this for any other reason:  It's less\n efficient, has fewer features, and is more complicated.\n\n The message must be defined exactly as follows:\n   message Foo {\n     option message_set_wire_format = true;\n     extensions 4 to max;\n   }\n Note that the message cannot have any defined fields; MessageSets only\n have extensions.\n\n All extensions of your type must be singular messages; e.g. they cannot\n be int32s, enums, or repeated messages.\n\n Because this is an option, the above two restrictions are not enforced by\n the protocol compiler.\n" ), TrailingComments:nil, XXX_unrecognized:[]byte{}}
&google_protobuf.SourceCodeInfo_Location{Path:[]int32{4, 9, 2, 1}, Span:[]int32{297, 2, 52}, LeadingComments:func(v string) *string { return &v } ( " Disables the generation of the standard \"descriptor()\" accessor, which can\n conflict with a field of the same name.  This is meant to make migration\n from proto1 easier; new code should avoid fields named \"descriptor\".\n" ), TrailingComments:nil, XXX_unrecognized:[]byte{}}
&google_protobuf.SourceCodeInfo_Location{Path:[]int32{4, 9, 2, 2}, Span:[]int32{300, 2, 58}, LeadingComments:func(v string) *string { return &v } ( " The parser stores options it doesn't recognize here. See above.\n" ), TrailingComments:nil, XXX_unrecognized:[]byte{}}
&google_protobuf.SourceCodeInfo_Location{Path:[]int32{4, 10, 5}, Span:[]int32{306, 2, 25}, LeadingComments:func(v string) *string { return &v } ( " Clients can define custom options in extensions of this message. See above.\n" ), TrailingComments:nil, XXX_unrecognized:[]byte{}}
&google_protobuf.SourceCodeInfo_Location{Path:[]int32{4, 10, 2, 0}, Span:[]int32{312, 2, 56}, LeadingComments:func(v string) *string { return &v } ( " The ctype option instructs the C++ code generator to use a different\n representation of the field than it normally would.  See the specific\n options below.  This option is not yet implemented in the open source\n release -- sorry, we'll try to include it in a future version!\n" ), TrailingComments:nil, XXX_unrecognized:[]byte{}}
&google_protobuf.SourceCodeInfo_Location{Path:[]int32{4, 10, 2, 1}, Span:[]int32{318, 2, 27}, LeadingComments:func(v string) *string { return &v } ( " The packed option can be enabled for repeated primitive fields to enable\n a more efficient representation on the wire. Rather than repeatedly\n writing the tag and type for each element, the entire array is encoded as\n a single length-delimited blob.\n" ), TrailingComments:nil, XXX_unrecognized:[]byte{}}
&google_protobuf.SourceCodeInfo_Location{Path:[]int32{4, 10, 2, 2}, Span:[]int32{348, 2, 25}, LeadingComments:func(v string) *string { return &v } ( " Should this field be parsed lazily?  Lazy applies only to message-type\n fields.  It means that when the outer message is initially parsed, the\n inner message's contents will not be parsed but instead stored in encoded\n form.  The inner message will actually be parsed when it is first accessed.\n\n This is only a hint.  Implementations are free to choose whether to use\n eager or lazy parsing regardless of the value of this option.  However,\n setting this option true suggests that the protocol author believes that\n using lazy parsing on this field is worth the additional bookkeeping\n overhead typically needed to implement it.\n\n This option does not affect the public interface of any generated code;\n all method signatures remain the same.  Furthermore, thread-safety of the\n interface is not affected by this option; const methods remain safe to\n call from multiple threads concurrently, while non-const methods continue\n to require exclusive access.\n\n\n Note that implementations may choose not to check required fields within\n a lazy sub-message.  That is, calling IsInitialized() on the outher message\n may return true even if the inner message has missing required fields.\n This is necessary because otherwise the inner message would have to be\n parsed in order to perform the check, defeating the purpose of lazy\n parsing.  An implementation which chooses not to check required fields\n must be consistent about it.  That is, for any particular sub-message, the\n implementation must either *always* check its required fields, or *never*\n check its required fields, regardless of whether or not the message has\n been parsed.\n" ), TrailingComments:nil, XXX_unrecognized:[]byte{}}
&google_protobuf.SourceCodeInfo_Location{Path:[]int32{4, 10, 2, 3}, Span:[]int32{354, 2, 31}, LeadingComments:func(v string) *string { return &v } ( " Is this field deprecated?\n Depending on the target platform, this can emit Deprecated annotations\n for accessors, or it will be completely ignored; in the very least, this\n is a formalization for deprecating fields.\n" ), TrailingComments:nil, XXX_unrecognized:[]byte{}}
&google_protobuf.SourceCodeInfo_Location{Path:[]int32{4, 10, 2, 4}, Span:[]int32{368, 2, 43}, LeadingComments:func(v string) *string { return &v } ( " EXPERIMENTAL.  DO NOT USE.\n For \"map\" fields, the name of the field in the enclosed type that\n is the key for this map.  For example, suppose we have:\n   message Item {\n     required string name = 1;\n     required string value = 2;\n   }\n   message Config {\n     repeated Item items = 1 [experimental_map_key=\"name\"];\n   }\n In this situation, the map key for Item will be set to \"name\".\n TODO: Fully-implement this, then remove the \"experimental_\" prefix.\n" ), TrailingComments:nil, XXX_unrecognized:[]byte{}}
&google_protobuf.SourceCodeInfo_Location{Path:[]int32{4, 10, 2, 5}, Span:[]int32{371, 2, 26}, LeadingComments:func(v string) *string { return &v } ( " For Google-internal migration only. Do not use.\n" ), TrailingComments:nil, XXX_unrecognized:[]byte{}}
&google_protobuf.SourceCodeInfo_Location{Path:[]int32{4, 10, 2, 6}, Span:[]int32{374, 2, 58}, LeadingComments:func(v string) *string { return &v } ( " The parser stores options it doesn't recognize here. See above.\n" ), TrailingComments:nil, XXX_unrecognized:[]byte{}}
&google_protobuf.SourceCodeInfo_Location{Path:[]int32{4, 10, 4, 0, 2, 0}, Span:[]int32{379, 4, 15}, LeadingComments:func(v string) *string { return &v } ( " Default mode.\n" ), TrailingComments:nil, XXX_unrecognized:[]byte{}}
&google_protobuf.SourceCodeInfo_Location{Path:[]int32{4, 11, 5}, Span:[]int32{388, 2, 25}, LeadingComments:func(v string) *string { return &v } ( " Clients can define custom options in extensions of this message. See above.\n" ), TrailingComments:nil, XXX_unrecognized:[]byte{}}
&google_protobuf.SourceCodeInfo_Location{Path:[]int32{4, 11, 2, 0}, Span:[]int32{392, 2, 32}, LeadingComments:func(v string) *string { return &v } ( " Set this option to false to disallow mapping different tag names to a same\n value.\n" ), TrailingComments:nil, XXX_unrecognized:[]byte{}}
&google_protobuf.SourceCodeInfo_Location{Path:[]int32{4, 11, 2, 1}, Span:[]int32{395, 2, 58}, LeadingComments:func(v string) *string { return &v } ( " The parser stores options it doesn't recognize here. See above.\n" ), TrailingComments:nil, XXX_unrecognized:[]byte{}}
&google_protobuf.SourceCodeInfo_Location{Path:[]int32{4, 12, 5}, Span:[]int32{401, 2, 25}, LeadingComments:func(v string) *string { return &v } ( " Clients can define custom options in extensions of this message. See above.\n" ), TrailingComments:nil, XXX_unrecognized:[]byte{}}
&google_protobuf.SourceCodeInfo_Location{Path:[]int32{4, 12, 2, 0}, Span:[]int32{404, 2, 58}, LeadingComments:func(v string) *string { return &v } ( " The parser stores options it doesn't recognize here. See above.\n" ), TrailingComments:nil, XXX_unrecognized:[]byte{}}
&google_protobuf.SourceCodeInfo_Location{Path:[]int32{4, 13, 5}, Span:[]int32{410, 2, 25}, LeadingComments:func(v string) *string { return &v } ( " Clients can define custom options in extensions of this message. See above.\n" ), TrailingComments:nil, XXX_unrecognized:[]byte{}}
&google_protobuf.SourceCodeInfo_Location{Path:[]int32{4, 13, 2, 0}, Span:[]int32{413, 2, 58}, LeadingComments:func(v string) *string { return &v } ( " The parser stores options it doesn't recognize here. See above.\n" ), TrailingComments:nil, XXX_unrecognized:[]byte{}}
&google_protobuf.SourceCodeInfo_Location{Path:[]int32{4, 14, 5}, Span:[]int32{419, 2, 25}, LeadingComments:func(v string) *string { return &v } ( " Clients can define custom options in extensions of this message. See above.\n" ), TrailingComments:nil, XXX_unrecognized:[]byte{}}
&google_protobuf.SourceCodeInfo_Location{Path:[]int32{4, 14, 2, 0}, Span:[]int32{422, 2, 58}, LeadingComments:func(v string) *string { return &v } ( " The parser stores options it doesn't recognize here. See above.\n" ), TrailingComments:nil, XXX_unrecognized:[]byte{}}
&google_protobuf.SourceCodeInfo_Location{Path:[]int32{4, 15}, Span:[]int32{431, 0, 452, 1}, LeadingComments:func(v string) *string { return &v } ( " A message representing a option the parser does not recognize. This only\n appears in options protos created by the compiler::Parser class.\n DescriptorPool resolves these when building Descriptor objects. Therefore,\n options protos in descriptor objects (e.g. returned by Descriptor::options(),\n or produced by Descriptor::CopyTo()) will never have UninterpretedOptions\n in them.\n" ), TrailingComments:nil, XXX_unrecognized:[]byte{}}
&google_protobuf.SourceCodeInfo_Location{Path:[]int32{4, 15, 2, 1}, Span:[]int32{436, 2, 39}, LeadingComments:func(v string) *string { return &v } ( " The value of the uninterpreted option, in whatever type the tokenizer\n identified it as during parsing. Exactly one of these should be set.\n" ), TrailingComments:nil, XXX_unrecognized:[]byte{}}
&google_protobuf.SourceCodeInfo_Location{Path:[]int32{4, 15, 3, 0}, Span:[]int32{448, 2, 451, 3}, LeadingComments:func(v string) *string { return &v } ( " The name of the uninterpreted option.  Each string represents a segment in\n a dot-separated name.  is_extension is true iff a segment represents an\n extension (denoted with parentheses in options specs in .proto files).\n E.g.,{ [\"foo\", false], [\"bar.baz\", true], [\"qux\", false] } represents\n \"foo.(bar.baz).qux\".\n" ), TrailingComments:nil, XXX_unrecognized:[]byte{}}
&google_protobuf.SourceCodeInfo_Location{Path:[]int32{4, 16}, Span:[]int32{456, 0, 574, 1}, LeadingComments:func(v string) *string { return &v } ( " Encapsulates information about the original source file from which a\n FileDescriptorProto was generated.\n" ), TrailingComments:nil, XXX_unrecognized:[]byte{}}
&google_protobuf.SourceCodeInfo_Location{Path:[]int32{4, 16, 2, 0}, Span:[]int32{501, 2, 64}, LeadingComments:func(v string) *string { return &v } ( " A Location identifies a piece of source code in a .proto file which\n corresponds to a particular definition.  This information is intended\n to be useful to IDEs, code indexers, documentation generators, and similar\n tools.\n\n For example, say we have a file like:\n   message Foo {\n     optional string foo = 1;\n   }\n Let's look at just the field definition:\n   optional string foo = 1;\n   ^       ^^     ^^  ^  ^^^\n   a       bc     de  f  ghi\n We have the following locations:\n   span   path               represents\n   [a,i)  [ 4, 0, 2, 0 ]     The whole field definition.\n   [a,b)  [ 4, 0, 2, 0, 4 ]  The label (optional).\n   [c,d)  [ 4, 0, 2, 0, 5 ]  The type (string).\n   [e,f)  [ 4, 0, 2, 0, 1 ]  The name (foo).\n   [g,h)  [ 4, 0, 2, 0, 3 ]  The number (1).\n\n Notes:\n - A location may refer to a repeated field itself (i.e. not to any\n   particular index within it).  This is used whenever a set of elements are\n   logically enclosed in a single code segment.  For example, an entire\n   extend block (possibly containing multiple extension definitions) will\n   have an outer location whose path refers to the \"extensions\" repeated\n   field without an index.\n - Multiple locations may have the same path.  This happens when a single\n   logical declaration is spread out across multiple places.  The most\n   obvious example is the \"extend\" block again -- there may be multiple\n   extend blocks in the same scope, each of which will have the same path.\n - A location's span is not always a subset of its parent's span.  For\n   example, the \"extendee\" of an extension declaration appears at the\n   beginning of the \"extend\" block and is shared by all extensions within\n   the block.\n - Just because a location's span is a subset of some other location's span\n   does not mean that it is a descendent.  For example, a \"group\" defines\n   both a type and a field in a single declaration.  Thus, the locations\n   corresponding to the type and field and their components will overlap.\n - Code which tries to interpret locations should probably be designed to\n   ignore those that it doesn't understand, as more types of locations could\n   be recorded in the future.\n" ), TrailingComments:nil, XXX_unrecognized:[]byte{}}
&google_protobuf.SourceCodeInfo_Location{Path:[]int32{4, 16, 3, 0, 2, 0}, Span:[]int32{528, 4, 44}, LeadingComments:func(v string) *string { return &v } ( " Identifies which part of the FileDescriptorProto was defined at this\n location.\n\n Each element is a field number or an index.  They form a path from\n the root FileDescriptorProto to the place where the definition.  For\n example, this path:\n   [ 4, 3, 2, 7, 1 ]\n refers to:\n   file.message_type(3)  // 4, 3\n       .field(7)         // 2, 7\n       .name()           // 1\n This is because FileDescriptorProto.message_type has field number 4:\n   repeated DescriptorProto message_type = 4;\n and DescriptorProto.field has field number 2:\n   repeated FieldDescriptorProto field = 2;\n and FieldDescriptorProto.name has field number 1:\n   optional string name = 1;\n\n Thus, the above path gives the location of a field name.  If we removed\n the last element:\n   [ 4, 3, 2, 7 ]\n this path refers to the whole field declaration (from the beginning\n of the label to the terminating semicolon).\n" ), TrailingComments:nil, XXX_unrecognized:[]byte{}}
&google_protobuf.SourceCodeInfo_Location{Path:[]int32{4, 16, 3, 0, 2, 1}, Span:[]int32{535, 4, 44}, LeadingComments:func(v string) *string { return &v } ( " Always has exactly three or four elements: start line, start column,\n end line (optional, otherwise assumed same as start line), end column.\n These are packed into a single field for efficiency.  Note that line\n and column numbers are zero-based -- typically you will want to add\n 1 to each before displaying to a user.\n" ), TrailingComments:nil, XXX_unrecognized:[]byte{}}
&google_protobuf.SourceCodeInfo_Location{Path:[]int32{4, 16, 3, 0, 2, 2}, Span:[]int32{571, 4, 41}, LeadingComments:func(v string) *string { return &v } ( " If this SourceCodeInfo represents a complete declaration, these are any\n comments appearing before and after the declaration which appear to be\n attached to the declaration.\n \n A series of line comments appearing on consecutive lines, with no other\n tokens appearing on those lines, will be treated as a single comment.\n \n Only the comment content is provided; comment markers (e.g. //) are\n stripped out.  For block comments, leading whitespace and an asterisk\n will be stripped from the beginning of each line other than the first.\n Newlines are included in the output.\n \n Examples:\n \n optional int32 foo = 1;  // Comment attached to foo.\n // Comment attached to bar.\n optional int32 bar = 2;\n \n optional string baz = 3;\n // Comment attached to baz.\n // Another line attached to baz.\n \n // Comment attached to qux.\n //\n // Another line attached to qux.\n optional double qux = 4;\n \n optional string corge = 5;\n /* Block comment attached\n * to corge.  Leading asterisks\n * will be removed. */\n /* Block comment attached to\n * grault. */\n optional int32 grault = 6;\n" ), TrailingComments:nil, XXX_unrecognized:[]byte{}}
allOptionsTest.proto <TEST PASSED>
&google_protobuf.SourceCodeInfo_Location{Path:[]int32{4, 0}, Span:[]int32{45, 0, 47, 1}, LeadingComments:func(v string) *string { return &v } ( " The protocol compiler can output a FileDescriptorSet containing the .proto\n files it parses.\n" ), TrailingComments:nil, XXX_unrecognized:[]byte{}}
&google_protobuf.SourceCodeInfo_Location{Path:[]int32{4, 1}, Span:[]int32{50, 0, 78, 1}, LeadingComments:func(v string) *string { return &v } ( " Describes a complete .proto file.\n" ), TrailingComments:nil, XXX_unrecognized:[]byte{}}
&google_protobuf.SourceCodeInfo_Location{Path:[]int32{4, 1, 2, 1}, Span:[]int32{53, 2, 30}, LeadingComments:func(v string) *string { return &v } ( " file name, relative to root of source tree\n" ), TrailingComments:func(v string) *string { return &v } ( " e.g. \"foo\", \"foo.bar\", etc.\n" ), XXX_unrecognized:[]byte{}}
&google_protobuf.SourceCodeInfo_Location{Path:[]int32{4, 1, 2, 2}, Span:[]int32{57, 2, 33}, LeadingComments:func(v string) *string { return &v } ( " Names of files imported by this file.\n" ), TrailingComments:nil, XXX_unrecognized:[]byte{}}
&google_protobuf.SourceCodeInfo_Location{Path:[]int32{4, 1, 2, 3}, Span:[]int32{60, 2, 40}, LeadingComments:func(v string) *string { return &v } ( " Indexes of the public imported files in the dependency list above.\n" ), TrailingComments:nil, XXX_unrecognized:[]byte{}}
&google_protobuf.SourceCodeInfo_Location{Path:[]int32{4, 1, 2, 4}, Span:[]int32{64, 2, 38}, LeadingComments:func(v string) *string { return &v } ( " Indexes of the weak imported files in the dependency list.\n For Google-internal migration only. Do not use.\n" ), TrailingComments:nil, XXX_unrecognized:[]byte{}}
&google_protobuf.SourceCodeInfo_Location{Path:[]int32{4, 1, 2, 5}, Span:[]int32{67, 2, 44}, LeadingComments:func(v string) *string { return &v } ( " All top-level definitions in this file.\n" ), TrailingComments:nil, XXX_unrecognized:[]byte{}}
&google_protobuf.SourceCodeInfo_Location{Path:[]int32{4, 1, 2, 10}, Span:[]int32{77, 2, 47}, LeadingComments:func(v string) *string { return &v } ( " This field contains optional information about the original source code.\n You may safely remove this entire field whithout harming runtime\n functionality of the descriptors -- the information is needed only by\n development tools.\n" ), TrailingComments:nil, XXX_unrecognized:[]byte{}}
&google_protobuf.SourceCodeInfo_Location{Path:[]int32{4, 2}, Span:[]int32{81, 0, 94, 1}, LeadingComments:func(v string) *string { return &v } ( " Describes a message type.\n" ), TrailingComments:nil, XXX_unrecognized:[]byte{}}
&google_protobuf.SourceCodeInfo_Location{Path:[]int32{4, 3}, Span:[]int32{97, 0, 168, 1}, LeadingComments:func(v string) *string { return &v } ( " Describes a field within a message.\n" ), TrailingComments:nil, XXX_unrecognized:[]byte{}}
&google_protobuf.SourceCodeInfo_Location{Path:[]int32{4, 3, 2, 3}, Span:[]int32{104, 2, 62}, LeadingComments:func(v string) *string { return &v } ( " If type_name is set, this need not be set.  If both this and type_name\n are set, this must be either TYPE_ENUM or TYPE_MESSAGE.\n" ), TrailingComments:nil, XXX_unrecognized:[]byte{}}
&google_protobuf.SourceCodeInfo_Location{Path:[]int32{4, 3, 2, 4}, Span:[]int32{111, 2, 32}, LeadingComments:func(v string) *string { return &v } ( " For message and enum types, this is the name of the type.  If the name\n starts with a '.', it is fully-qualified.  Otherwise, C++-like scoping\n rules are used to find the type (i.e. first the nested types within this\n message are searched, then within the parent, on up to the root\n namespace).\n" ), TrailingComments:nil, XXX_unrecognized:[]byte{}}
&google_protobuf.SourceCodeInfo_Location{Path:[]int32{4, 3, 2, 5}, Span:[]int32{115, 2, 31}, LeadingComments:func(v string) *string { return &v } ( " For extensions, this is the name of the type being extended.  It is\n resolved in the same manner as type_name.\n" ), TrailingComments:nil, XXX_unrecognized:[]byte{}}
&google_protobuf.SourceCodeInfo_Location{Path:[]int32{4, 3, 2, 6}, Span:[]int32{122, 2, 36}, LeadingComments:func(v string) *string { return &v } ( " For numeric types, contains the original text representation of the value.\n For booleans, \"true\" or \"false\".\n For strings, contains the default text contents (not escaped in any way).\n For bytes, contains the C escaped value.  All bytes >= 128 are escaped.\n TODO(kenton):  Base-64 encode?\n" ), TrailingComments:nil, XXX_unrecognized:[]byte{}}
&google_protobuf.SourceCodeInfo_Location{Path:[]int32{4, 3, 4, 0, 2, 0}, Span:[]int32{129, 4, 20}, LeadingComments:func(v string) *string { return &v } ( " 0 is reserved for errors.\n Order is weird for historical reasons.\n" ), TrailingComments:nil, XXX_unrecognized:[]byte{}}
&google_protobuf.SourceCodeInfo_Location{Path:[]int32{4, 3, 4, 0, 2, 2}, Span:[]int32{134, 4, 19}, LeadingComments:func(v string) *string { return &v } ( " Not ZigZag encoded.  Negative numbers take 10 bytes.  Use TYPE_SINT64 if\n negative values are likely.\n" ), TrailingComments:nil, XXX_unrecognized:[]byte{}}
&google_protobuf.SourceCodeInfo_Location{Path:[]int32{4, 3, 4, 0, 2, 4}, Span:[]int32{139, 4, 19}, LeadingComments:func(v string) *string { return &v } ( " Not ZigZag encoded.  Negative numbers take 10 bytes.  Use TYPE_SINT32 if\n negative values are likely.\n" ), TrailingComments:nil, XXX_unrecognized:[]byte{}}
&google_protobuf.SourceCodeInfo_Location{Path:[]int32{4, 3, 4, 0, 2, 10}, Span:[]int32{146, 4, 22}, LeadingComments:func(v string) *string { return &v } ( " Tag-delimited aggregate.\n" ), TrailingComments:func(v string) *string { return &v } ( " Length-delimited aggregate.\n" ), XXX_unrecognized:[]byte{}}
&google_protobuf.SourceCodeInfo_Location{Path:[]int32{4, 3, 4, 0, 2, 11}, Span:[]int32{150, 4, 20}, LeadingComments:func(v string) *string { return &v } ( " New in version 2.\n" ), TrailingComments:nil, XXX_unrecognized:[]byte{}}
&google_protobuf.SourceCodeInfo_Location{Path:[]int32{4, 3, 4, 0, 2, 17}, Span:[]int32{157, 4, 21}, LeadingComments:func(v string) *string { return &v } ( " Uses ZigZag encoding.\n" ), TrailingComments:func(v string) *string { return &v } ( " Uses ZigZag encoding.\n" ), XXX_unrecognized:[]byte{}}
&google_protobuf.SourceCodeInfo_Location{Path:[]int32{4, 3, 4, 1, 2, 0}, Span:[]int32{163, 4, 23}, LeadingComments:func(v string) *string { return &v } ( " 0 is reserved for errors\n" ), TrailingComments:nil, XXX_unrecognized:[]byte{}}
&google_protobuf.SourceCodeInfo_Location{Path:[]int32{4, 3, 4, 1, 2, 2}, Span:[]int32{165, 4, 23}, LeadingComments:nil, TrailingComments:func(v string) *string { return &v } ( " TODO(sanjay): Should we add LABEL_MAP?\n" ), XXX_unrecognized:[]byte{}}
&google_protobuf.SourceCodeInfo_Location{Path:[]int32{4, 4}, Span:[]int32{171, 0, 175, 1}, LeadingComments:func(v string) *string { return &v } ( " Describes an enum type.\n" ), TrailingComments:nil, XXX_unrecognized:[]byte{}}
&google_protobuf.SourceCodeInfo_Location{Path:[]int32{4, 5}, Span:[]int32{178, 0, 182, 1}, LeadingComments:func(v string) *string { return &v } ( " Describes a value within an enum.\n" ), TrailingComments:nil, XXX_unrecognized:[]byte{}}
&google_protobuf.SourceCodeInfo_Location{Path:[]int32{4, 6}, Span:[]int32{185, 0, 189, 1}, LeadingComments:func(v string) *string { return &v } ( " Describes a service.\n" ), TrailingComments:nil, XXX_unrecognized:[]byte{}}
&google_protobuf.SourceCodeInfo_Location{Path:[]int32{4, 7}, Span:[]int32{192, 0, 200, 1}, LeadingComments:func(v string) *string { return &v } ( " Describes a method of a service.\n" ), TrailingComments:nil, XXX_unrecognized:[]byte{}}
&google_protobuf.SourceCodeInfo_Location{Path:[]int32{4, 7, 2, 1}, Span:[]int32{197, 2, 33}, LeadingComments:func(v string) *string { return &v } ( " Input and output type names.  These are resolved in the same way as\n FieldDescriptorProto.type_name, but must refer to a message type.\n" ), TrailingComments:nil, XXX_unrecognized:[]byte{}}
&google_protobuf.SourceCodeInfo_Location{Path:[]int32{4, 8, 5}, Span:[]int32{205, 2, 25}, LeadingComments:func(v string) *string { return &v } ( " Clients can define custom options in extensions of this message. See above.\n" ), TrailingComments:nil, XXX_unrecognized:[]byte{}}
&google_protobuf.SourceCodeInfo_Location{Path:[]int32{4, 8, 2, 0}, Span:[]int32{211, 2, 35}, LeadingComments:func(v string) *string { return &v } ( " Sets the Java package where classes generated from this .proto will be\n placed.  By default, the proto package is used, but this is often\n inappropriate because proto packages do not normally start with backwards\n domain names.\n" ), TrailingComments:nil, XXX_unrecognized:[]byte{}}
&google_protobuf.SourceCodeInfo_Location{Path:[]int32{4, 8, 2, 1}, Span:[]int32{218, 2, 43}, LeadingComments:func(v string) *string { return &v } ( " If set, all the classes from the .proto file are wrapped in a single\n outer class with the given name.  This applies to both Proto1\n (equivalent to the old \"--one_java_file\" option) and Proto2 (where\n a .proto always translates to a single class, but you may want to\n explicitly choose the class name).\n" ), TrailingComments:nil, XXX_unrecognized:[]byte{}}
&google_protobuf.SourceCodeInfo_Location{Path:[]int32{4, 8, 2, 2}, Span:[]int32{226, 2, 41}, LeadingComments:func(v string) *string { return &v } ( " If set true, then the Java code generator will generate a separate .java\n file for each top-level message, enum, and service defined in the .proto\n file.  Thus, these types will *not* be nested inside the outer class\n named by java_outer_classname.  However, the outer class will still be\n generated to contain the file's getDescriptor() method as well as any\n top-level extensions defined in the file.\n" ), TrailingComments:nil, XXX_unrecognized:[]byte{}}
&google_protobuf.SourceCodeInfo_Location{Path:[]int32{4, 8, 2, 3}, Span:[]int32{232, 2, 51}, LeadingComments:func(v string) *string { return &v } ( " If set true, then the Java code generator will generate equals() and\n hashCode() methods for all messages defined in the .proto file. This is\n purely a speed optimization, as the AbstractMessage base class includes\n reflection-based implementations of these methods.\n" ), TrailingComments:nil, XXX_unrecognized:[]byte{}}
&google_protobuf.SourceCodeInfo_Location{Path:[]int32{4, 8, 2, 5}, Span:[]int32{237, 2, 34}, LeadingComments:func(v string) *string { return &v } ( " Sets the Go package where structs generated from this .proto will be\n placed.  There is no default.\n" ), TrailingComments:nil, XXX_unrecognized:[]byte{}}
&google_protobuf.SourceCodeInfo_Location{Path:[]int32{4, 8, 2, 6}, Span:[]int32{249, 2, 41}, LeadingComments:func(v string) *string { return &v } ( " Should generic services be generated in each language?  \"Generic\" services\n are not specific to any particular RPC system.  They are generated by the\n main code generators in each language (without additional plugins).\n Generic services were the only kind of service generation supported by\n early versions of proto2.\n\n Generic services are now considered deprecated in favor of using plugins\n that generate code specific to your particular RPC system.  Therefore,\n these default to false.  Old code which depends on generic services should\n explicitly set them to true.\n" ), TrailingComments:nil, XXX_unrecognized:[]byte{}}
&google_protobuf.SourceCodeInfo_Location{Path:[]int32{4, 8, 2, 9}, Span:[]int32{254, 2, 58}, LeadingComments:func(v string) *string { return &v } ( " The parser stores options it doesn't recognize here. See above.\n" ), TrailingComments:nil, XXX_unrecognized:[]byte{}}
&google_protobuf.SourceCodeInfo_Location{Path:[]int32{4, 8, 4, 0}, Span:[]int32{257, 2, 266, 3}, LeadingComments:func(v string) *string { return &v } ( " Generated classes can be optimized for speed or code size.\n" ), TrailingComments:nil, XXX_unrecognized:[]byte{}}
&google_protobuf.SourceCodeInfo_Location{Path:[]int32{4, 8, 4, 0, 2, 0}, Span:[]int32{258, 4, 14}, LeadingComments:nil, TrailingComments:func(v string) *string { return &v } ( " Generate complete code for parsing, serialization,\n" ), XXX_unrecognized:[]byte{}}
&google_protobuf.SourceCodeInfo_Location{Path:[]int32{4, 8, 4, 0, 2, 1}, Span:[]int32{262, 4, 18}, LeadingComments:func(v string) *string { return &v } ( " etc.\n" ), TrailingComments:nil, XXX_unrecognized:[]byte{}}
&google_protobuf.SourceCodeInfo_Location{Path:[]int32{4, 8, 4, 0, 2, 2}, Span:[]int32{264, 4, 21}, LeadingComments:func(v string) *string { return &v } ( " Use ReflectionOps to implement these methods.\n" ), TrailingComments:func(v string) *string { return &v } ( " Generate code using MessageLite and the lite runtime.\n" ), XXX_unrecognized:[]byte{}}
&google_protobuf.SourceCodeInfo_Location{Path:[]int32{4, 9, 5}, Span:[]int32{272, 2, 25}, LeadingComments:func(v string) *string { return &v } ( " Clients can define custom options in extensions of this message. See above.\n" ), TrailingComments:nil, XXX_unrecognized:[]byte{}}
&google_protobuf.SourceCodeInfo_Location{Path:[]int32{4, 9, 2, 0}, Span:[]int32{292, 2, 44}, LeadingComments:func(v string) *string { return &v } ( " Set true to use the old proto1 MessageSet wire format for extensions.\n This is provided for backwards-compatibility with the MessageSet wire\n format.  You should not use this for any other reason:  It's less\n efficient, has fewer features, and is more complicated.\n\n The message must be defined exactly as follows:\n   message Foo {\n     option message_set_wire_format = true;\n     extensions 4 to max;\n   }\n Note that the message cannot have any defined fields; MessageSets only\n have extensions.\n\n All extensions of your type must be singular messages; e.g. they cannot\n be int32s, enums, or repeated messages.\n\n Because this is an option, the above two restrictions are not enforced by\n the protocol compiler.\n" ), TrailingComments:nil, XXX_unrecognized:[]byte{}}
&google_protobuf.SourceCodeInfo_Location{Path:[]int32{4, 9, 2, 1}, Span:[]int32{297, 2, 52}, LeadingComments:func(v string) *string { return &v } ( " Disables the generation of the standard \"descriptor()\" accessor, which can\n conflict with a field of the same name.  This is meant to make migration\n from proto1 easier; new code should avoid fields named \"descriptor\".\n" ), TrailingComments:nil, XXX_unrecognized:[]byte{}}
&google_protobuf.SourceCodeInfo_Location{Path:[]int32{4, 9, 2, 2}, Span:[]int32{300, 2, 58}, LeadingComments:func(v string) *string { return &v } ( " The parser stores options it doesn't recognize here. See above.\n" ), TrailingComments:nil, XXX_unrecognized:[]byte{}}
&google_protobuf.SourceCodeInfo_Location{Path:[]int32{4, 10, 5}, Span:[]int32{306, 2, 25}, LeadingComments:func(v string) *string { return &v } ( " Clients can define custom options in extensions of this message. See above.\n" ), TrailingComments:nil, XXX_unrecognized:[]byte{}}
&google_protobuf.SourceCodeInfo_Location{Path:[]int32{4, 10, 2, 0}, Span:[]int32{312, 2, 56}, LeadingComments:func(v string) *string { return &v } ( " The ctype option instructs the C++ code generator to use a different\n representation of the field than it normally would.  See the specific\n options below.  This option is not yet implemented in the open source\n release -- sorry, we'll try to include it in a future version!\n" ), TrailingComments:nil, XXX_unrecognized:[]byte{}}
&google_protobuf.SourceCodeInfo_Location{Path:[]int32{4, 10, 2, 1}, Span:[]int32{318, 2, 27}, LeadingComments:func(v string) *string { return &v } ( " The packed option can be enabled for repeated primitive fields to enable\n a more efficient representation on the wire. Rather than repeatedly\n writing the tag and type for each element, the entire array is encoded as\n a single length-delimited blob.\n" ), TrailingComments:nil, XXX_unrecognized:[]byte{}}
&google_protobuf.SourceCodeInfo_Location{Path:[]int32{4, 10, 2, 2}, Span:[]int32{348, 2, 25}, LeadingComments:func(v string) *string { return &v } ( " Should this field be parsed lazily?  Lazy applies only to message-type\n fields.  It means that when the outer message is initially parsed, the\n inner message's contents will not be parsed but instead stored in encoded\n form.  The inner message will actually be parsed when it is first accessed.\n\n This is only a hint.  Implementations are free to choose whether to use\n eager or lazy parsing regardless of the value of this option.  However,\n setting this option true suggests that the protocol author believes that\n using lazy parsing on this field is worth the additional bookkeeping\n overhead typically needed to implement it.\n\n This option does not affect the public interface of any generated code;\n all method signatures remain the same.  Furthermore, thread-safety of the\n interface is not affected by this option; const methods remain safe to\n call from multiple threads concurrently, while non-const methods continue\n to require exclusive access.\n\n\n Note that implementations may choose not to check required fields within\n a lazy sub-message.  That is, calling IsInitialized() on the outher message\n may return true even if the inner message has missing required fields.\n This is necessary because otherwise the inner message would have to be\n parsed in order to perform the check, defeating the purpose of lazy\n parsing.  An implementation which chooses not to check required fields\n must be consistent about it.  That is, for any particular sub-message, the\n implementation must either *always* check its required fields, or *never*\n check its required fields, regardless of whether or not the message has\n been parsed.\n" ), TrailingComments:nil, XXX_unrecognized:[]byte{}}
&google_protobuf.SourceCodeInfo_Location{Path:[]int32{4, 10, 2, 3}, Span:[]int32{354, 2, 31}, LeadingComments:func(v string) *string { return &v } ( " Is this field deprecated?\n Depending on the target platform, this can emit Deprecated annotations\n for accessors, or it will be completely ignored; in the very least, this\n is a formalization for deprecating fields.\n" ), TrailingComments:nil, XXX_unrecognized:[]byte{}}
&google_protobuf.SourceCodeInfo_Location{Path:[]int32{4, 10, 2, 4}, Span:[]int32{368, 2, 43}, LeadingComments:func(v string) *string { return &v } ( " EXPERIMENTAL.  DO NOT USE.\n For \"map\" fields, the name of the field in the enclosed type that\n is the key for this map.  For example, suppose we have:\n   message Item {\n     required string name = 1;\n     required string value = 2;\n   }\n   message Config {\n     repeated Item items = 1 [experimental_map_key=\"name\"];\n   }\n In this situation, the map key for Item will be set to \"name\".\n TODO: Fully-implement this, then remove the \"experimental_\" prefix.\n" ), TrailingComments:nil, XXX_unrecognized:[]byte{}}
&google_protobuf.SourceCodeInfo_Location{Path:[]int32{4, 10, 2, 5}, Span:[]int32{371, 2, 26}, LeadingComments:func(v string) *string { return &v } ( " For Google-internal migration only. Do not use.\n" ), TrailingComments:nil, XXX_unrecognized:[]byte{}}
&google_protobuf.SourceCodeInfo_Location{Path:[]int32{4, 10, 2, 6}, Span:[]int32{374, 2, 58}, LeadingComments:func(v string) *string { return &v } ( " The parser stores options it doesn't recognize here. See above.\n" ), TrailingComments:nil, XXX_unrecognized:[]byte{}}
&google_protobuf.SourceCodeInfo_Location{Path:[]int32{4, 10, 4, 0, 2, 0}, Span:[]int32{379, 4, 15}, LeadingComments:func(v string) *string { return &v } ( " Default mode.\n" ), TrailingComments:nil, XXX_unrecognized:[]byte{}}
&google_protobuf.SourceCodeInfo_Location{Path:[]int32{4, 11, 5}, Span:[]int32{388, 2, 25}, LeadingComments:func(v string) *string { return &v } ( " Clients can define custom options in extensions of this message. See above.\n" ), TrailingComments:nil, XXX_unrecognized:[]byte{}}
&google_protobuf.SourceCodeInfo_Location{Path:[]int32{4, 11, 2, 0}, Span:[]int32{392, 2, 32}, LeadingComments:func(v string) *string { return &v } ( " Set this option to false to disallow mapping different tag names to a same\n value.\n" ), TrailingComments:nil, XXX_unrecognized:[]byte{}}
&google_protobuf.SourceCodeInfo_Location{Path:[]int32{4, 11, 2, 1}, Span:[]int32{395, 2, 58}, LeadingComments:func(v string) *string { return &v } ( " The parser stores options it doesn't recognize here. See above.\n" ), TrailingComments:nil, XXX_unrecognized:[]byte{}}
&google_protobuf.SourceCodeInfo_Location{Path:[]int32{4, 12, 5}, Span:[]int32{401, 2, 25}, LeadingComments:func(v string) *string { return &v } ( " Clients can define custom options in extensions of this message. See above.\n" ), TrailingComments:nil, XXX_unrecognized:[]byte{}}
&google_protobuf.SourceCodeInfo_Location{Path:[]int32{4, 12, 2, 0}, Span:[]int32{404, 2, 58}, LeadingComments:func(v string) *string { return &v } ( " The parser stores options it doesn't recognize here. See above.\n" ), TrailingComments:nil, XXX_unrecognized:[]byte{}}
&google_protobuf.SourceCodeInfo_Location{Path:[]int32{4, 13, 5}, Span:[]int32{410, 2, 25}, LeadingComments:func(v string) *string { return &v } ( " Clients can define custom options in extensions of this message. See above.\n" ), TrailingComments:nil, XXX_unrecognized:[]byte{}}
&google_protobuf.SourceCodeInfo_Location{Path:[]int32{4, 13, 2, 0}, Span:[]int32{413, 2, 58}, LeadingComments:func(v string) *string { return &v } ( " The parser stores options it doesn't recognize here. See above.\n" ), TrailingComments:nil, XXX_unrecognized:[]byte{}}
&google_protobuf.SourceCodeInfo_Location{Path:[]int32{4, 14, 5}, Span:[]int32{419, 2, 25}, LeadingComments:func(v string) *string { return &v } ( " Clients can define custom options in extensions of this message. See above.\n" ), TrailingComments:nil, XXX_unrecognized:[]byte{}}
&google_protobuf.SourceCodeInfo_Location{Path:[]int32{4, 14, 2, 0}, Span:[]int32{422, 2, 58}, LeadingComments:func(v string) *string { return &v } ( " The parser stores options it doesn't recognize here. See above.\n" ), TrailingComments:nil, XXX_unrecognized:[]byte{}}
&google_protobuf.SourceCodeInfo_Location{Path:[]int32{4, 15}, Span:[]int32{431, 0, 452, 1}, LeadingComments:func(v string) *string { return &v } ( " A message representing a option the parser does not recognize. This only\n appears in options protos created by the compiler::Parser class.\n DescriptorPool resolves these when building Descriptor objects. Therefore,\n options protos in descriptor objects (e.g. returned by Descriptor::options(),\n or produced by Descriptor::CopyTo()) will never have UninterpretedOptions\n in them.\n" ), TrailingComments:nil, XXX_unrecognized:[]byte{}}
&google_protobuf.SourceCodeInfo_Location{Path:[]int32{4, 15, 2, 1}, Span:[]int32{436, 2, 39}, LeadingComments:func(v string) *string { return &v } ( " The value of the uninterpreted option, in whatever type the tokenizer\n identified it as during parsing. Exactly one of these should be set.\n" ), TrailingComments:nil, XXX_unrecognized:[]byte{}}
&google_protobuf.SourceCodeInfo_Location{Path:[]int32{4, 15, 3, 0}, Span:[]int32{448, 2, 451, 3}, LeadingComments:func(v string) *string { return &v } ( " The name of the uninterpreted option.  Each string represents a segment in\n a dot-separated name.  is_extension is true iff a segment represents an\n extension (denoted with parentheses in options specs in .proto files).\n E.g.,{ [\"foo\", false], [\"bar.baz\", true], [\"qux\", false] } represents\n \"foo.(bar.baz).qux\".\n" ), TrailingComments:nil, XXX_unrecognized:[]byte{}}
&google_protobuf.SourceCodeInfo_Location{Path:[]int32{4, 16}, Span:[]int32{456, 0, 574, 1}, LeadingComments:func(v string) *string { return &v } ( " Encapsulates information about the original source file from which a\n FileDescriptorProto was generated.\n" ), TrailingComments:nil, XXX_unrecognized:[]byte{}}
&google_protobuf.SourceCodeInfo_Location{Path:[]int32{4, 16, 2, 0}, Span:[]int32{501, 2, 64}, LeadingComments:func(v string) *string { return &v } ( " A Location identifies a piece of source code in a .proto file which\n corresponds to a particular definition.  This information is intended\n to be useful to IDEs, code indexers, documentation generators, and similar\n tools.\n\n For example, say we have a file like:\n   message Foo {\n     optional string foo = 1;\n   }\n Let's look at just the field definition:\n   optional string foo = 1;\n   ^       ^^     ^^  ^  ^^^\n   a       bc     de  f  ghi\n We have the following locations:\n   span   path               represents\n   [a,i)  [ 4, 0, 2, 0 ]     The whole field definition.\n   [a,b)  [ 4, 0, 2, 0, 4 ]  The label (optional).\n   [c,d)  [ 4, 0, 2, 0, 5 ]  The type (string).\n   [e,f)  [ 4, 0, 2, 0, 1 ]  The name (foo).\n   [g,h)  [ 4, 0, 2, 0, 3 ]  The number (1).\n\n Notes:\n - A location may refer to a repeated field itself (i.e. not to any\n   particular index within it).  This is used whenever a set of elements are\n   logically enclosed in a single code segment.  For example, an entire\n   extend block (possibly containing multiple extension definitions) will\n   have an outer location whose path refers to the \"extensions\" repeated\n   field without an index.\n - Multiple locations may have the same path.  This happens when a single\n   logical declaration is spread out across multiple places.  The most\n   obvious example is the \"extend\" block again -- there may be multiple\n   extend blocks in the same scope, each of which will have the same path.\n - A location's span is not always a subset of its parent's span.  For\n   example, the \"extendee\" of an extension declaration appears at the\n   beginning of the \"extend\" block and is shared by all extensions within\n   the block.\n - Just because a location's span is a subset of some other location's span\n   does not mean that it is a descendent.  For example, a \"group\" defines\n   both a type and a field in a single declaration.  Thus, the locations\n   corresponding to the type and field and their components will overlap.\n - Code which tries to interpret locations should probably be designed to\n   ignore those that it doesn't understand, as more types of locations could\n   be recorded in the future.\n" ), TrailingComments:nil, XXX_unrecognized:[]byte{}}
&google_protobuf.SourceCodeInfo_Location{Path:[]int32{4, 16, 3, 0, 2, 0}, Span:[]int32{528, 4, 44}, LeadingComments:func(v string) *string { return &v } ( " Identifies which part of the FileDescriptorProto was defined at this\n location.\n\n Each element is a field number or an index.  They form a path from\n the root FileDescriptorProto to the place where the definition.  For\n example, this path:\n   [ 4, 3, 2, 7, 1 ]\n refers to:\n   file.message_type(3)  // 4, 3\n       .field(7)         // 2, 7\n       .name()           // 1\n This is because FileDescriptorProto.message_type has field number 4:\n   repeated DescriptorProto message_type = 4;\n and DescriptorProto.field has field number 2:\n   repeated FieldDescriptorProto field = 2;\n and FieldDescriptorProto.name has field number 1:\n   optional string name = 1;\n\n Thus, the above path gives the location of a field name.  If we removed\n the last element:\n   [ 4, 3, 2, 7 ]\n this path refers to the whole field declaration (from the beginning\n of the label to the terminating semicolon).\n" ), TrailingComments:nil, XXX_unrecognized:[]byte{}}
&google_protobuf.SourceCodeInfo_Location{Path:[]int32{4, 16, 3, 0, 2, 1}, Span:[]int32{535, 4, 44}, LeadingComments:func(v string) *string { return &v } ( " Always has exactly three or four elements: start line, start column,\n end line (optional, otherwise assumed same as start line), end column.\n These are packed into a single field for efficiency.  Note that line\n and column numbers are zero-based -- typically you will want to add\n 1 to each before displaying to a user.\n" ), TrailingComments:nil, XXX_unrecognized:[]byte{}}
&google_protobuf.SourceCodeInfo_Location{Path:[]int32{4, 16, 3, 0, 2, 2}, Span:[]int32{571, 4, 41}, LeadingComments:func(v string) *string { return &v } ( " If this SourceCodeInfo represents a complete declaration, these are any\n comments appearing before and after the declaration which appear to be\n attached to the declaration.\n \n A series of line comments appearing on consecutive lines, with no other\n tokens appearing on those lines, will be treated as a single comment.\n \n Only the comment content is provided; comment markers (e.g. //) are\n stripped out.  For block comments, leading whitespace and an asterisk\n will be stripped from the beginning of each line other than the first.\n Newlines are included in the output.\n \n Examples:\n \n optional int32 foo = 1;  // Comment attached to foo.\n // Comment attached to bar.\n optional int32 bar = 2;\n \n optional string baz = 3;\n // Comment attached to baz.\n // Another line attached to baz.\n \n // Comment attached to qux.\n //\n // Another line attached to qux.\n optional double qux = 4;\n \n optional string corge = 5;\n /* Block comment attached\n * to corge.  Leading asterisks\n * will be removed. */\n /* Block comment attached to\n * grault. */\n optional int32 grault = 6;\n" ), TrailingComments:nil, XXX_unrecognized:[]byte{}}
&google_protobuf.SourceCodeInfo_Location{Path:[]int32{7}, Span:[]int32{3, 0, 6, 1}, LeadingComments:func(v string) *string { return &v } ( " Comment before extension\n" ), TrailingComments:nil, XXX_unrecognized:[]byte{}}
&google_protobuf.SourceCodeInfo_Location{Path:[]int32{4, 0}, Span:[]int32{14, 0, 33, 1}, LeadingComments:func(v string) *string { return &v } ( " Comment before message\n" ), TrailingComments:nil, XXX_unrecognized:[]byte{}}
&google_protobuf.SourceCodeInfo_Location{Path:[]int32{4, 0, 6}, Span:[]int32{18, 2, 24, 3}, LeadingComments:func(v string) *string { return &v } ( " Comment before intra message extend\n" ), TrailingComments:nil, XXX_unrecognized:[]byte{}}
&google_protobuf.SourceCodeInfo_Location{Path:[]int32{4, 0, 6, 0}, Span:[]int32{21, 4, 31}, LeadingComments:func(v string) *string { return &v } ( " Extend inside comment\n" ), TrailingComments:func(v string) *string { return &v } ( " Extend trailing comment\n" ), XXX_unrecognized:[]byte{}}
&google_protobuf.SourceCodeInfo_Location{Path:[]int32{4, 0, 6}, Span:[]int32{27, 2, 29, 3}, LeadingComments:func(v string) *string { return &v } ( " Intra second comment\n" ), TrailingComments:nil, XXX_unrecognized:[]byte{}}
&google_protobuf.SourceCodeInfo_Location{Path:[]int32{4, 0, 2, 0}, Span:[]int32{32, 2, 27}, LeadingComments:func(v string) *string { return &v } ( " field comment\n" ), TrailingComments:nil, XXX_unrecognized:[]byte{}}
&google_protobuf.SourceCodeInfo_Location{Path:[]int32{4, 2, 5}, Span:[]int32{42, 2, 24}, LeadingComments:func(v string) *string { return &v } ( " comment before extension range\n" ), TrailingComments:func(v string) *string { return &v } ( " extension trailing comment\n" ), XXX_unrecognized:[]byte{}}
&google_protobuf.SourceCodeInfo_Location{Path:[]int32{4, 2, 5}, Span:[]int32{47, 2, 24}, LeadingComments:func(v string) *string { return &v } ( " comment before second extension range\n" ), TrailingComments:nil, XXX_unrecognized:[]byte{}}
extendWithCommentsTest.proto <TEST PASSED>
&google_protobuf.SourceCodeInfo_Location{Path:[]int32{4, 0}, Span:[]int32{45, 0, 47, 1}, LeadingComments:func(v string) *string { return &v } ( " The protocol compiler can output a FileDescriptorSet containing the .proto\n files it parses.\n" ), TrailingComments:nil, XXX_unrecognized:[]byte{}}
&google_protobuf.SourceCodeInfo_Location{Path:[]int32{4, 1}, Span:[]int32{50, 0, 78, 1}, LeadingComments:func(v string) *string { return &v } ( " Describes a complete .proto file.\n" ), TrailingComments:nil, XXX_unrecognized:[]byte{}}
&google_protobuf.SourceCodeInfo_Location{Path:[]int32{4, 1, 2, 1}, Span:[]int32{53, 2, 30}, LeadingComments:func(v string) *string { return &v } ( " file name, relative to root of source tree\n" ), TrailingComments:func(v string) *string { return &v } ( " e.g. \"foo\", \"foo.bar\", etc.\n" ), XXX_unrecognized:[]byte{}}
&google_protobuf.SourceCodeInfo_Location{Path:[]int32{4, 1, 2, 2}, Span:[]int32{57, 2, 33}, LeadingComments:func(v string) *string { return &v } ( " Names of files imported by this file.\n" ), TrailingComments:nil, XXX_unrecognized:[]byte{}}
&google_protobuf.SourceCodeInfo_Location{Path:[]int32{4, 1, 2, 3}, Span:[]int32{60, 2, 40}, LeadingComments:func(v string) *string { return &v } ( " Indexes of the public imported files in the dependency list above.\n" ), TrailingComments:nil, XXX_unrecognized:[]byte{}}
&google_protobuf.SourceCodeInfo_Location{Path:[]int32{4, 1, 2, 4}, Span:[]int32{64, 2, 38}, LeadingComments:func(v string) *string { return &v } ( " Indexes of the weak imported files in the dependency list.\n For Google-internal migration only. Do not use.\n" ), TrailingComments:nil, XXX_unrecognized:[]byte{}}
&google_protobuf.SourceCodeInfo_Location{Path:[]int32{4, 1, 2, 5}, Span:[]int32{67, 2, 44}, LeadingComments:func(v string) *string { return &v } ( " All top-level definitions in this file.\n" ), TrailingComments:nil, XXX_unrecognized:[]byte{}}
&google_protobuf.SourceCodeInfo_Location{Path:[]int32{4, 1, 2, 10}, Span:[]int32{77, 2, 47}, LeadingComments:func(v string) *string { return &v } ( " This field contains optional information about the original source code.\n You may safely remove this entire field whithout harming runtime\n functionality of the descriptors -- the information is needed only by\n development tools.\n" ), TrailingComments:nil, XXX_unrecognized:[]byte{}}
&google_protobuf.SourceCodeInfo_Location{Path:[]int32{4, 2}, Span:[]int32{81, 0, 94, 1}, LeadingComments:func(v string) *string { return &v } ( " Describes a message type.\n" ), TrailingComments:nil, XXX_unrecognized:[]byte{}}
&google_protobuf.SourceCodeInfo_Location{Path:[]int32{4, 3}, Span:[]int32{97, 0, 168, 1}, LeadingComments:func(v string) *string { return &v } ( " Describes a field within a message.\n" ), TrailingComments:nil, XXX_unrecognized:[]byte{}}
&google_protobuf.SourceCodeInfo_Location{Path:[]int32{4, 3, 2, 3}, Span:[]int32{104, 2, 62}, LeadingComments:func(v string) *string { return &v } ( " If type_name is set, this need not be set.  If both this and type_name\n are set, this must be either TYPE_ENUM or TYPE_MESSAGE.\n" ), TrailingComments:nil, XXX_unrecognized:[]byte{}}
&google_protobuf.SourceCodeInfo_Location{Path:[]int32{4, 3, 2, 4}, Span:[]int32{111, 2, 32}, LeadingComments:func(v string) *string { return &v } ( " For message and enum types, this is the name of the type.  If the name\n starts with a '.', it is fully-qualified.  Otherwise, C++-like scoping\n rules are used to find the type (i.e. first the nested types within this\n message are searched, then within the parent, on up to the root\n namespace).\n" ), TrailingComments:nil, XXX_unrecognized:[]byte{}}
&google_protobuf.SourceCodeInfo_Location{Path:[]int32{4, 3, 2, 5}, Span:[]int32{115, 2, 31}, LeadingComments:func(v string) *string { return &v } ( " For extensions, this is the name of the type being extended.  It is\n resolved in the same manner as type_name.\n" ), TrailingComments:nil, XXX_unrecognized:[]byte{}}
&google_protobuf.SourceCodeInfo_Location{Path:[]int32{4, 3, 2, 6}, Span:[]int32{122, 2, 36}, LeadingComments:func(v string) *string { return &v } ( " For numeric types, contains the original text representation of the value.\n For booleans, \"true\" or \"false\".\n For strings, contains the default text contents (not escaped in any way).\n For bytes, contains the C escaped value.  All bytes >= 128 are escaped.\n TODO(kenton):  Base-64 encode?\n" ), TrailingComments:nil, XXX_unrecognized:[]byte{}}
&google_protobuf.SourceCodeInfo_Location{Path:[]int32{4, 3, 4, 0, 2, 0}, Span:[]int32{129, 4, 20}, LeadingComments:func(v string) *string { return &v } ( " 0 is reserved for errors.\n Order is weird for historical reasons.\n" ), TrailingComments:nil, XXX_unrecognized:[]byte{}}
&google_protobuf.SourceCodeInfo_Location{Path:[]int32{4, 3, 4, 0, 2, 2}, Span:[]int32{134, 4, 19}, LeadingComments:func(v string) *string { return &v } ( " Not ZigZag encoded.  Negative numbers take 10 bytes.  Use TYPE_SINT64 if\n negative values are likely.\n" ), TrailingComments:nil, XXX_unrecognized:[]byte{}}
&google_protobuf.SourceCodeInfo_Location{Path:[]int32{4, 3, 4, 0, 2, 4}, Span:[]int32{139, 4, 19}, LeadingComments:func(v string) *string { return &v } ( " Not ZigZag encoded.  Negative numbers take 10 bytes.  Use TYPE_SINT32 if\n negative values are likely.\n" ), TrailingComments:nil, XXX_unrecognized:[]byte{}}
&google_protobuf.SourceCodeInfo_Location{Path:[]int32{4, 3, 4, 0, 2, 10}, Span:[]int32{146, 4, 22}, LeadingComments:func(v string) *string { return &v } ( " Tag-delimited aggregate.\n" ), TrailingComments:func(v string) *string { return &v } ( " Length-delimited aggregate.\n" ), XXX_unrecognized:[]byte{}}
&google_protobuf.SourceCodeInfo_Location{Path:[]int32{4, 3, 4, 0, 2, 11}, Span:[]int32{150, 4, 20}, LeadingComments:func(v string) *string { return &v } ( " New in version 2.\n" ), TrailingComments:nil, XXX_unrecognized:[]byte{}}
&google_protobuf.SourceCodeInfo_Location{Path:[]int32{4, 3, 4, 0, 2, 17}, Span:[]int32{157, 4, 21}, LeadingComments:func(v string) *string { return &v } ( " Uses ZigZag encoding.\n" ), TrailingComments:func(v string) *string { return &v } ( " Uses ZigZag encoding.\n" ), XXX_unrecognized:[]byte{}}
&google_protobuf.SourceCodeInfo_Location{Path:[]int32{4, 3, 4, 1, 2, 0}, Span:[]int32{163, 4, 23}, LeadingComments:func(v string) *string { return &v } ( " 0 is reserved for errors\n" ), TrailingComments:nil, XXX_unrecognized:[]byte{}}
&google_protobuf.SourceCodeInfo_Location{Path:[]int32{4, 3, 4, 1, 2, 2}, Span:[]int32{165, 4, 23}, LeadingComments:nil, TrailingComments:func(v string) *string { return &v } ( " TODO(sanjay): Should we add LABEL_MAP?\n" ), XXX_unrecognized:[]byte{}}
&google_protobuf.SourceCodeInfo_Location{Path:[]int32{4, 4}, Span:[]int32{171, 0, 175, 1}, LeadingComments:func(v string) *string { return &v } ( " Describes an enum type.\n" ), TrailingComments:nil, XXX_unrecognized:[]byte{}}
&google_protobuf.SourceCodeInfo_Location{Path:[]int32{4, 5}, Span:[]int32{178, 0, 182, 1}, LeadingComments:func(v string) *string { return &v } ( " Describes a value within an enum.\n" ), TrailingComments:nil, XXX_unrecognized:[]byte{}}
&google_protobuf.SourceCodeInfo_Location{Path:[]int32{4, 6}, Span:[]int32{185, 0, 189, 1}, LeadingComments:func(v string) *string { return &v } ( " Describes a service.\n" ), TrailingComments:nil, XXX_unrecognized:[]byte{}}
&google_protobuf.SourceCodeInfo_Location{Path:[]int32{4, 7}, Span:[]int32{192, 0, 200, 1}, LeadingComments:func(v string) *string { return &v } ( " Describes a method of a service.\n" ), TrailingComments:nil, XXX_unrecognized:[]byte{}}
&google_protobuf.SourceCodeInfo_Location{Path:[]int32{4, 7, 2, 1}, Span:[]int32{197, 2, 33}, LeadingComments:func(v string) *string { return &v } ( " Input and output type names.  These are resolved in the same way as\n FieldDescriptorProto.type_name, but must refer to a message type.\n" ), TrailingComments:nil, XXX_unrecognized:[]byte{}}
&google_protobuf.SourceCodeInfo_Location{Path:[]int32{4, 8, 5}, Span:[]int32{205, 2, 25}, LeadingComments:func(v string) *string { return &v } ( " Clients can define custom options in extensions of this message. See above.\n" ), TrailingComments:nil, XXX_unrecognized:[]byte{}}
&google_protobuf.SourceCodeInfo_Location{Path:[]int32{4, 8, 2, 0}, Span:[]int32{211, 2, 35}, LeadingComments:func(v string) *string { return &v } ( " Sets the Java package where classes generated from this .proto will be\n placed.  By default, the proto package is used, but this is often\n inappropriate because proto packages do not normally start with backwards\n domain names.\n" ), TrailingComments:nil, XXX_unrecognized:[]byte{}}
&google_protobuf.SourceCodeInfo_Location{Path:[]int32{4, 8, 2, 1}, Span:[]int32{218, 2, 43}, LeadingComments:func(v string) *string { return &v } ( " If set, all the classes from the .proto file are wrapped in a single\n outer class with the given name.  This applies to both Proto1\n (equivalent to the old \"--one_java_file\" option) and Proto2 (where\n a .proto always translates to a single class, but you may want to\n explicitly choose the class name).\n" ), TrailingComments:nil, XXX_unrecognized:[]byte{}}
&google_protobuf.SourceCodeInfo_Location{Path:[]int32{4, 8, 2, 2}, Span:[]int32{226, 2, 41}, LeadingComments:func(v string) *string { return &v } ( " If set true, then the Java code generator will generate a separate .java\n file for each top-level message, enum, and service defined in the .proto\n file.  Thus, these types will *not* be nested inside the outer class\n named by java_outer_classname.  However, the outer class will still be\n generated to contain the file's getDescriptor() method as well as any\n top-level extensions defined in the file.\n" ), TrailingComments:nil, XXX_unrecognized:[]byte{}}
&google_protobuf.SourceCodeInfo_Location{Path:[]int32{4, 8, 2, 3}, Span:[]int32{232, 2, 51}, LeadingComments:func(v string) *string { return &v } ( " If set true, then the Java code generator will generate equals() and\n hashCode() methods for all messages defined in the .proto file. This is\n purely a speed optimization, as the AbstractMessage base class includes\n reflection-based implementations of these methods.\n" ), TrailingComments:nil, XXX_unrecognized:[]byte{}}
&google_protobuf.SourceCodeInfo_Location{Path:[]int32{4, 8, 2, 5}, Span:[]int32{237, 2, 34}, LeadingComments:func(v string) *string { return &v } ( " Sets the Go package where structs generated from this .proto will be\n placed.  There is no default.\n" ), TrailingComments:nil, XXX_unrecognized:[]byte{}}
&google_protobuf.SourceCodeInfo_Location{Path:[]int32{4, 8, 2, 6}, Span:[]int32{249, 2, 41}, LeadingComments:func(v string) *string { return &v } ( " Should generic services be generated in each language?  \"Generic\" services\n are not specific to any particular RPC system.  They are generated by the\n main code generators in each language (without additional plugins).\n Generic services were the only kind of service generation supported by\n early versions of proto2.\n\n Generic services are now considered deprecated in favor of using plugins\n that generate code specific to your particular RPC system.  Therefore,\n these default to false.  Old code which depends on generic services should\n explicitly set them to true.\n" ), TrailingComments:nil, XXX_unrecognized:[]byte{}}
&google_protobuf.SourceCodeInfo_Location{Path:[]int32{4, 8, 2, 9}, Span:[]int32{254, 2, 58}, LeadingComments:func(v string) *string { return &v } ( " The parser stores options it doesn't recognize here. See above.\n" ), TrailingComments:nil, XXX_unrecognized:[]byte{}}
&google_protobuf.SourceCodeInfo_Location{Path:[]int32{4, 8, 4, 0}, Span:[]int32{257, 2, 266, 3}, LeadingComments:func(v string) *string { return &v } ( " Generated classes can be optimized for speed or code size.\n" ), TrailingComments:nil, XXX_unrecognized:[]byte{}}
&google_protobuf.SourceCodeInfo_Location{Path:[]int32{4, 8, 4, 0, 2, 0}, Span:[]int32{258, 4, 14}, LeadingComments:nil, TrailingComments:func(v string) *string { return &v } ( " Generate complete code for parsing, serialization,\n" ), XXX_unrecognized:[]byte{}}
&google_protobuf.SourceCodeInfo_Location{Path:[]int32{4, 8, 4, 0, 2, 1}, Span:[]int32{262, 4, 18}, LeadingComments:func(v string) *string { return &v } ( " etc.\n" ), TrailingComments:nil, XXX_unrecognized:[]byte{}}
&google_protobuf.SourceCodeInfo_Location{Path:[]int32{4, 8, 4, 0, 2, 2}, Span:[]int32{264, 4, 21}, LeadingComments:func(v string) *string { return &v } ( " Use ReflectionOps to implement these methods.\n" ), TrailingComments:func(v string) *string { return &v } ( " Generate code using MessageLite and the lite runtime.\n" ), XXX_unrecognized:[]byte{}}
&google_protobuf.SourceCodeInfo_Location{Path:[]int32{4, 9, 5}, Span:[]int32{272, 2, 25}, LeadingComments:func(v string) *string { return &v } ( " Clients can define custom options in extensions of this message. See above.\n" ), TrailingComments:nil, XXX_unrecognized:[]byte{}}
&google_protobuf.SourceCodeInfo_Location{Path:[]int32{4, 9, 2, 0}, Span:[]int32{292, 2, 44}, LeadingComments:func(v string) *string { return &v } ( " Set true to use the old proto1 MessageSet wire format for extensions.\n This is provided for backwards-compatibility with the MessageSet wire\n format.  You should not use this for any other reason:  It's less\n efficient, has fewer features, and is more complicated.\n\n The message must be defined exactly as follows:\n   message Foo {\n     option message_set_wire_format = true;\n     extensions 4 to max;\n   }\n Note that the message cannot have any defined fields; MessageSets only\n have extensions.\n\n All extensions of your type must be singular messages; e.g. they cannot\n be int32s, enums, or repeated messages.\n\n Because this is an option, the above two restrictions are not enforced by\n the protocol compiler.\n" ), TrailingComments:nil, XXX_unrecognized:[]byte{}}
&google_protobuf.SourceCodeInfo_Location{Path:[]int32{4, 9, 2, 1}, Span:[]int32{297, 2, 52}, LeadingComments:func(v string) *string { return &v } ( " Disables the generation of the standard \"descriptor()\" accessor, which can\n conflict with a field of the same name.  This is meant to make migration\n from proto1 easier; new code should avoid fields named \"descriptor\".\n" ), TrailingComments:nil, XXX_unrecognized:[]byte{}}
&google_protobuf.SourceCodeInfo_Location{Path:[]int32{4, 9, 2, 2}, Span:[]int32{300, 2, 58}, LeadingComments:func(v string) *string { return &v } ( " The parser stores options it doesn't recognize here. See above.\n" ), TrailingComments:nil, XXX_unrecognized:[]byte{}}
&google_protobuf.SourceCodeInfo_Location{Path:[]int32{4, 10, 5}, Span:[]int32{306, 2, 25}, LeadingComments:func(v string) *string { return &v } ( " Clients can define custom options in extensions of this message. See above.\n" ), TrailingComments:nil, XXX_unrecognized:[]byte{}}
&google_protobuf.SourceCodeInfo_Location{Path:[]int32{4, 10, 2, 0}, Span:[]int32{312, 2, 56}, LeadingComments:func(v string) *string { return &v } ( " The ctype option instructs the C++ code generator to use a different\n representation of the field than it normally would.  See the specific\n options below.  This option is not yet implemented in the open source\n release -- sorry, we'll try to include it in a future version!\n" ), TrailingComments:nil, XXX_unrecognized:[]byte{}}
&google_protobuf.SourceCodeInfo_Location{Path:[]int32{4, 10, 2, 1}, Span:[]int32{318, 2, 27}, LeadingComments:func(v string) *string { return &v } ( " The packed option can be enabled for repeated primitive fields to enable\n a more efficient representation on the wire. Rather than repeatedly\n writing the tag and type for each element, the entire array is encoded as\n a single length-delimited blob.\n" ), TrailingComments:nil, XXX_unrecognized:[]byte{}}
&google_protobuf.SourceCodeInfo_Location{Path:[]int32{4, 10, 2, 2}, Span:[]int32{348, 2, 25}, LeadingComments:func(v string) *string { return &v } ( " Should this field be parsed lazily?  Lazy applies only to message-type\n fields.  It means that when the outer message is initially parsed, the\n inner message's contents will not be parsed but instead stored in encoded\n form.  The inner message will actually be parsed when it is first accessed.\n\n This is only a hint.  Implementations are free to choose whether to use\n eager or lazy parsing regardless of the value of this option.  However,\n setting this option true suggests that the protocol author believes that\n using lazy parsing on this field is worth the additional bookkeeping\n overhead typically needed to implement it.\n\n This option does not affect the public interface of any generated code;\n all method signatures remain the same.  Furthermore, thread-safety of the\n interface is not affected by this option; const methods remain safe to\n call from multiple threads concurrently, while non-const methods continue\n to require exclusive access.\n\n\n Note that implementations may choose not to check required fields within\n a lazy sub-message.  That is, calling IsInitialized() on the outher message\n may return true even if the inner message has missing required fields.\n This is necessary because otherwise the inner message would have to be\n parsed in order to perform the check, defeating the purpose of lazy\n parsing.  An implementation which chooses not to check required fields\n must be consistent about it.  That is, for any particular sub-message, the\n implementation must either *always* check its required fields, or *never*\n check its required fields, regardless of whether or not the message has\n been parsed.\n" ), TrailingComments:nil, XXX_unrecognized:[]byte{}}
&google_protobuf.SourceCodeInfo_Location{Path:[]int32{4, 10, 2, 3}, Span:[]int32{354, 2, 31}, LeadingComments:func(v string) *string { return &v } ( " Is this field deprecated?\n Depending on the target platform, this can emit Deprecated annotations\n for accessors, or it will be completely ignored; in the very least, this\n is a formalization for deprecating fields.\n" ), TrailingComments:nil, XXX_unrecognized:[]byte{}}
&google_protobuf.SourceCodeInfo_Location{Path:[]int32{4, 10, 2, 4}, Span:[]int32{368, 2, 43}, LeadingComments:func(v string) *string { return &v } ( " EXPERIMENTAL.  DO NOT USE.\n For \"map\" fields, the name of the field in the enclosed type that\n is the key for this map.  For example, suppose we have:\n   message Item {\n     required string name = 1;\n     required string value = 2;\n   }\n   message Config {\n     repeated Item items = 1 [experimental_map_key=\"name\"];\n   }\n In this situation, the map key for Item will be set to \"name\".\n TODO: Fully-implement this, then remove the \"experimental_\" prefix.\n" ), TrailingComments:nil, XXX_unrecognized:[]byte{}}
&google_protobuf.SourceCodeInfo_Location{Path:[]int32{4, 10, 2, 5}, Span:[]int32{371, 2, 26}, LeadingComments:func(v string) *string { return &v } ( " For Google-internal migration only. Do not use.\n" ), TrailingComments:nil, XXX_unrecognized:[]byte{}}
&google_protobuf.SourceCodeInfo_Location{Path:[]int32{4, 10, 2, 6}, Span:[]int32{374, 2, 58}, LeadingComments:func(v string) *string { return &v } ( " The parser stores options it doesn't recognize here. See above.\n" ), TrailingComments:nil, XXX_unrecognized:[]byte{}}
&google_protobuf.SourceCodeInfo_Location{Path:[]int32{4, 10, 4, 0, 2, 0}, Span:[]int32{379, 4, 15}, LeadingComments:func(v string) *string { return &v } ( " Default mode.\n" ), TrailingComments:nil, XXX_unrecognized:[]byte{}}
&google_protobuf.SourceCodeInfo_Location{Path:[]int32{4, 11, 5}, Span:[]int32{388, 2, 25}, LeadingComments:func(v string) *string { return &v } ( " Clients can define custom options in extensions of this message. See above.\n" ), TrailingComments:nil, XXX_unrecognized:[]byte{}}
&google_protobuf.SourceCodeInfo_Location{Path:[]int32{4, 11, 2, 0}, Span:[]int32{392, 2, 32}, LeadingComments:func(v string) *string { return &v } ( " Set this option to false to disallow mapping different tag names to a same\n value.\n" ), TrailingComments:nil, XXX_unrecognized:[]byte{}}
&google_protobuf.SourceCodeInfo_Location{Path:[]int32{4, 11, 2, 1}, Span:[]int32{395, 2, 58}, LeadingComments:func(v string) *string { return &v } ( " The parser stores options it doesn't recognize here. See above.\n" ), TrailingComments:nil, XXX_unrecognized:[]byte{}}
&google_protobuf.SourceCodeInfo_Location{Path:[]int32{4, 12, 5}, Span:[]int32{401, 2, 25}, LeadingComments:func(v string) *string { return &v } ( " Clients can define custom options in extensions of this message. See above.\n" ), TrailingComments:nil, XXX_unrecognized:[]byte{}}
&google_protobuf.SourceCodeInfo_Location{Path:[]int32{4, 12, 2, 0}, Span:[]int32{404, 2, 58}, LeadingComments:func(v string) *string { return &v } ( " The parser stores options it doesn't recognize here. See above.\n" ), TrailingComments:nil, XXX_unrecognized:[]byte{}}
&google_protobuf.SourceCodeInfo_Location{Path:[]int32{4, 13, 5}, Span:[]int32{410, 2, 25}, LeadingComments:func(v string) *string { return &v } ( " Clients can define custom options in extensions of this message. See above.\n" ), TrailingComments:nil, XXX_unrecognized:[]byte{}}
&google_protobuf.SourceCodeInfo_Location{Path:[]int32{4, 13, 2, 0}, Span:[]int32{413, 2, 58}, LeadingComments:func(v string) *string { return &v } ( " The parser stores options it doesn't recognize here. See above.\n" ), TrailingComments:nil, XXX_unrecognized:[]byte{}}
&google_protobuf.SourceCodeInfo_Location{Path:[]int32{4, 14, 5}, Span:[]int32{419, 2, 25}, LeadingComments:func(v string) *string { return &v } ( " Clients can define custom options in extensions of this message. See above.\n" ), TrailingComments:nil, XXX_unrecognized:[]byte{}}
&google_protobuf.SourceCodeInfo_Location{Path:[]int32{4, 14, 2, 0}, Span:[]int32{422, 2, 58}, LeadingComments:func(v string) *string { return &v } ( " The parser stores options it doesn't recognize here. See above.\n" ), TrailingComments:nil, XXX_unrecognized:[]byte{}}
&google_protobuf.SourceCodeInfo_Location{Path:[]int32{4, 15}, Span:[]int32{431, 0, 452, 1}, LeadingComments:func(v string) *string { return &v } ( " A message representing a option the parser does not recognize. This only\n appears in options protos created by the compiler::Parser class.\n DescriptorPool resolves these when building Descriptor objects. Therefore,\n options protos in descriptor objects (e.g. returned by Descriptor::options(),\n or produced by Descriptor::CopyTo()) will never have UninterpretedOptions\n in them.\n" ), TrailingComments:nil, XXX_unrecognized:[]byte{}}
&google_protobuf.SourceCodeInfo_Location{Path:[]int32{4, 15, 2, 1}, Span:[]int32{436, 2, 39}, LeadingComments:func(v string) *string { return &v } ( " The value of the uninterpreted option, in whatever type the tokenizer\n identified it as during parsing. Exactly one of these should be set.\n" ), TrailingComments:nil, XXX_unrecognized:[]byte{}}
&google_protobuf.SourceCodeInfo_Location{Path:[]int32{4, 15, 3, 0}, Span:[]int32{448, 2, 451, 3}, LeadingComments:func(v string) *string { return &v } ( " The name of the uninterpreted option.  Each string represents a segment in\n a dot-separated name.  is_extension is true iff a segment represents an\n extension (denoted with parentheses in options specs in .proto files).\n E.g.,{ [\"foo\", false], [\"bar.baz\", true], [\"qux\", false] } represents\n \"foo.(bar.baz).qux\".\n" ), TrailingComments:nil, XXX_unrecognized:[]byte{}}
&google_protobuf.SourceCodeInfo_Location{Path:[]int32{4, 16}, Span:[]int32{456, 0, 574, 1}, LeadingComments:func(v string) *string { return &v } ( " Encapsulates information about the original source file from which a\n FileDescriptorProto was generated.\n" ), TrailingComments:nil, XXX_unrecognized:[]byte{}}
&google_protobuf.SourceCodeInfo_Location{Path:[]int32{4, 16, 2, 0}, Span:[]int32{501, 2, 64}, LeadingComments:func(v string) *string { return &v } ( " A Location identifies a piece of source code in a .proto file which\n corresponds to a particular definition.  This information is intended\n to be useful to IDEs, code indexers, documentation generators, and similar\n tools.\n\n For example, say we have a file like:\n   message Foo {\n     optional string foo = 1;\n   }\n Let's look at just the field definition:\n   optional string foo = 1;\n   ^       ^^     ^^  ^  ^^^\n   a       bc     de  f  ghi\n We have the following locations:\n   span   path               represents\n   [a,i)  [ 4, 0, 2, 0 ]     The whole field definition.\n   [a,b)  [ 4, 0, 2, 0, 4 ]  The label (optional).\n   [c,d)  [ 4, 0, 2, 0, 5 ]  The type (string).\n   [e,f)  [ 4, 0, 2, 0, 1 ]  The name (foo).\n   [g,h)  [ 4, 0, 2, 0, 3 ]  The number (1).\n\n Notes:\n - A location may refer to a repeated field itself (i.e. not to any\n   particular index within it).  This is used whenever a set of elements are\n   logically enclosed in a single code segment.  For example, an entire\n   extend block (possibly containing multiple extension definitions) will\n   have an outer location whose path refers to the \"extensions\" repeated\n   field without an index.\n - Multiple locations may have the same path.  This happens when a single\n   logical declaration is spread out across multiple places.  The most\n   obvious example is the \"extend\" block again -- there may be multiple\n   extend blocks in the same scope, each of which will have the same path.\n - A location's span is not always a subset of its parent's span.  For\n   example, the \"extendee\" of an extension declaration appears at the\n   beginning of the \"extend\" block and is shared by all extensions within\n   the block.\n - Just because a location's span is a subset of some other location's span\n   does not mean that it is a descendent.  For example, a \"group\" defines\n   both a type and a field in a single declaration.  Thus, the locations\n   corresponding to the type and field and their components will overlap.\n - Code which tries to interpret locations should probably be designed to\n   ignore those that it doesn't understand, as more types of locations could\n   be recorded in the future.\n" ), TrailingComments:nil, XXX_unrecognized:[]byte{}}
&google_protobuf.SourceCodeInfo_Location{Path:[]int32{4, 16, 3, 0, 2, 0}, Span:[]int32{528, 4, 44}, LeadingComments:func(v string) *string { return &v } ( " Identifies which part of the FileDescriptorProto was defined at this\n location.\n\n Each element is a field number or an index.  They form a path from\n the root FileDescriptorProto to the place where the definition.  For\n example, this path:\n   [ 4, 3, 2, 7, 1 ]\n refers to:\n   file.message_type(3)  // 4, 3\n       .field(7)         // 2, 7\n       .name()           // 1\n This is because FileDescriptorProto.message_type has field number 4:\n   repeated DescriptorProto message_type = 4;\n and DescriptorProto.field has field number 2:\n   repeated FieldDescriptorProto field = 2;\n and FieldDescriptorProto.name has field number 1:\n   optional string name = 1;\n\n Thus, the above path gives the location of a field name.  If we removed\n the last element:\n   [ 4, 3, 2, 7 ]\n this path refers to the whole field declaration (from the beginning\n of the label to the terminating semicolon).\n" ), TrailingComments:nil, XXX_unrecognized:[]byte{}}
&google_protobuf.SourceCodeInfo_Location{Path:[]int32{4, 16, 3, 0, 2, 1}, Span:[]int32{535, 4, 44}, LeadingComments:func(v string) *string { return &v } ( " Always has exactly three or four elements: start line, start column,\n end line (optional, otherwise assumed same as start line), end column.\n These are packed into a single field for efficiency.  Note that line\n and column numbers are zero-based -- typically you will want to add\n 1 to each before displaying to a user.\n" ), TrailingComments:nil, XXX_unrecognized:[]byte{}}
&google_protobuf.SourceCodeInfo_Location{Path:[]int32{4, 16, 3, 0, 2, 2}, Span:[]int32{571, 4, 41}, LeadingComments:func(v string) *string { return &v } ( " If this SourceCodeInfo represents a complete declaration, these are any\n comments appearing before and after the declaration which appear to be\n attached to the declaration.\n \n A series of line comments appearing on consecutive lines, with no other\n tokens appearing on those lines, will be treated as a single comment.\n \n Only the comment content is provided; comment markers (e.g. //) are\n stripped out.  For block comments, leading whitespace and an asterisk\n will be stripped from the beginning of each line other than the first.\n Newlines are included in the output.\n \n Examples:\n \n optional int32 foo = 1;  // Comment attached to foo.\n // Comment attached to bar.\n optional int32 bar = 2;\n \n optional string baz = 3;\n // Comment attached to baz.\n // Another line attached to baz.\n \n // Comment attached to qux.\n //\n // Another line attached to qux.\n optional double qux = 4;\n \n optional string corge = 5;\n /* Block comment attached\n * to corge.  Leading asterisks\n * will be removed. */\n /* Block comment attached to\n * grault. */\n optional int32 grault = 6;\n" ), TrailingComments:nil, XXX_unrecognized:[]byte{}}
extendTest.proto <TEST PASSED>
&google_protobuf.SourceCodeInfo_Location{Path:[]int32{4, 0}, Span:[]int32{45, 0, 47, 1}, LeadingComments:func(v string) *string { return &v } ( " The protocol compiler can output a FileDescriptorSet containing the .proto\n files it parses.\n" ), TrailingComments:nil, XXX_unrecognized:[]byte{}}
&google_protobuf.SourceCodeInfo_Location{Path:[]int32{4, 1}, Span:[]int32{50, 0, 78, 1}, LeadingComments:func(v string) *string { return &v } ( " Describes a complete .proto file.\n" ), TrailingComments:nil, XXX_unrecognized:[]byte{}}
&google_protobuf.SourceCodeInfo_Location{Path:[]int32{4, 1, 2, 1}, Span:[]int32{53, 2, 30}, LeadingComments:func(v string) *string { return &v } ( " file name, relative to root of source tree\n" ), TrailingComments:func(v string) *string { return &v } ( " e.g. \"foo\", \"foo.bar\", etc.\n" ), XXX_unrecognized:[]byte{}}
&google_protobuf.SourceCodeInfo_Location{Path:[]int32{4, 1, 2, 2}, Span:[]int32{57, 2, 33}, LeadingComments:func(v string) *string { return &v } ( " Names of files imported by this file.\n" ), TrailingComments:nil, XXX_unrecognized:[]byte{}}
&google_protobuf.SourceCodeInfo_Location{Path:[]int32{4, 1, 2, 3}, Span:[]int32{60, 2, 40}, LeadingComments:func(v string) *string { return &v } ( " Indexes of the public imported files in the dependency list above.\n" ), TrailingComments:nil, XXX_unrecognized:[]byte{}}
&google_protobuf.SourceCodeInfo_Location{Path:[]int32{4, 1, 2, 4}, Span:[]int32{64, 2, 38}, LeadingComments:func(v string) *string { return &v } ( " Indexes of the weak imported files in the dependency list.\n For Google-internal migration only. Do not use.\n" ), TrailingComments:nil, XXX_unrecognized:[]byte{}}
&google_protobuf.SourceCodeInfo_Location{Path:[]int32{4, 1, 2, 5}, Span:[]int32{67, 2, 44}, LeadingComments:func(v string) *string { return &v } ( " All top-level definitions in this file.\n" ), TrailingComments:nil, XXX_unrecognized:[]byte{}}
&google_protobuf.SourceCodeInfo_Location{Path:[]int32{4, 1, 2, 10}, Span:[]int32{77, 2, 47}, LeadingComments:func(v string) *string { return &v } ( " This field contains optional information about the original source code.\n You may safely remove this entire field whithout harming runtime\n functionality of the descriptors -- the information is needed only by\n development tools.\n" ), TrailingComments:nil, XXX_unrecognized:[]byte{}}
&google_protobuf.SourceCodeInfo_Location{Path:[]int32{4, 2}, Span:[]int32{81, 0, 94, 1}, LeadingComments:func(v string) *string { return &v } ( " Describes a message type.\n" ), TrailingComments:nil, XXX_unrecognized:[]byte{}}
&google_protobuf.SourceCodeInfo_Location{Path:[]int32{4, 3}, Span:[]int32{97, 0, 168, 1}, LeadingComments:func(v string) *string { return &v } ( " Describes a field within a message.\n" ), TrailingComments:nil, XXX_unrecognized:[]byte{}}
&google_protobuf.SourceCodeInfo_Location{Path:[]int32{4, 3, 2, 3}, Span:[]int32{104, 2, 62}, LeadingComments:func(v string) *string { return &v } ( " If type_name is set, this need not be set.  If both this and type_name\n are set, this must be either TYPE_ENUM or TYPE_MESSAGE.\n" ), TrailingComments:nil, XXX_unrecognized:[]byte{}}
&google_protobuf.SourceCodeInfo_Location{Path:[]int32{4, 3, 2, 4}, Span:[]int32{111, 2, 32}, LeadingComments:func(v string) *string { return &v } ( " For message and enum types, this is the name of the type.  If the name\n starts with a '.', it is fully-qualified.  Otherwise, C++-like scoping\n rules are used to find the type (i.e. first the nested types within this\n message are searched, then within the parent, on up to the root\n namespace).\n" ), TrailingComments:nil, XXX_unrecognized:[]byte{}}
&google_protobuf.SourceCodeInfo_Location{Path:[]int32{4, 3, 2, 5}, Span:[]int32{115, 2, 31}, LeadingComments:func(v string) *string { return &v } ( " For extensions, this is the name of the type being extended.  It is\n resolved in the same manner as type_name.\n" ), TrailingComments:nil, XXX_unrecognized:[]byte{}}
&google_protobuf.SourceCodeInfo_Location{Path:[]int32{4, 3, 2, 6}, Span:[]int32{122, 2, 36}, LeadingComments:func(v string) *string { return &v } ( " For numeric types, contains the original text representation of the value.\n For booleans, \"true\" or \"false\".\n For strings, contains the default text contents (not escaped in any way).\n For bytes, contains the C escaped value.  All bytes >= 128 are escaped.\n TODO(kenton):  Base-64 encode?\n" ), TrailingComments:nil, XXX_unrecognized:[]byte{}}
&google_protobuf.SourceCodeInfo_Location{Path:[]int32{4, 3, 4, 0, 2, 0}, Span:[]int32{129, 4, 20}, LeadingComments:func(v string) *string { return &v } ( " 0 is reserved for errors.\n Order is weird for historical reasons.\n" ), TrailingComments:nil, XXX_unrecognized:[]byte{}}
&google_protobuf.SourceCodeInfo_Location{Path:[]int32{4, 3, 4, 0, 2, 2}, Span:[]int32{134, 4, 19}, LeadingComments:func(v string) *string { return &v } ( " Not ZigZag encoded.  Negative numbers take 10 bytes.  Use TYPE_SINT64 if\n negative values are likely.\n" ), TrailingComments:nil, XXX_unrecognized:[]byte{}}
&google_protobuf.SourceCodeInfo_Location{Path:[]int32{4, 3, 4, 0, 2, 4}, Span:[]int32{139, 4, 19}, LeadingComments:func(v string) *string { return &v } ( " Not ZigZag encoded.  Negative numbers take 10 bytes.  Use TYPE_SINT32 if\n negative values are likely.\n" ), TrailingComments:nil, XXX_unrecognized:[]byte{}}
&google_protobuf.SourceCodeInfo_Location{Path:[]int32{4, 3, 4, 0, 2, 10}, Span:[]int32{146, 4, 22}, LeadingComments:func(v string) *string { return &v } ( " Tag-delimited aggregate.\n" ), TrailingComments:func(v string) *string { return &v } ( " Length-delimited aggregate.\n" ), XXX_unrecognized:[]byte{}}
&google_protobuf.SourceCodeInfo_Location{Path:[]int32{4, 3, 4, 0, 2, 11}, Span:[]int32{150, 4, 20}, LeadingComments:func(v string) *string { return &v } ( " New in version 2.\n" ), TrailingComments:nil, XXX_unrecognized:[]byte{}}
&google_protobuf.SourceCodeInfo_Location{Path:[]int32{4, 3, 4, 0, 2, 17}, Span:[]int32{157, 4, 21}, LeadingComments:func(v string) *string { return &v } ( " Uses ZigZag encoding.\n" ), TrailingComments:func(v string) *string { return &v } ( " Uses ZigZag encoding.\n" ), XXX_unrecognized:[]byte{}}
&google_protobuf.SourceCodeInfo_Location{Path:[]int32{4, 3, 4, 1, 2, 0}, Span:[]int32{163, 4, 23}, LeadingComments:func(v string) *string { return &v } ( " 0 is reserved for errors\n" ), TrailingComments:nil, XXX_unrecognized:[]byte{}}
&google_protobuf.SourceCodeInfo_Location{Path:[]int32{4, 3, 4, 1, 2, 2}, Span:[]int32{165, 4, 23}, LeadingComments:nil, TrailingComments:func(v string) *string { return &v } ( " TODO(sanjay): Should we add LABEL_MAP?\n" ), XXX_unrecognized:[]byte{}}
&google_protobuf.SourceCodeInfo_Location{Path:[]int32{4, 4}, Span:[]int32{171, 0, 175, 1}, LeadingComments:func(v string) *string { return &v } ( " Describes an enum type.\n" ), TrailingComments:nil, XXX_unrecognized:[]byte{}}
&google_protobuf.SourceCodeInfo_Location{Path:[]int32{4, 5}, Span:[]int32{178, 0, 182, 1}, LeadingComments:func(v string) *string { return &v } ( " Describes a value within an enum.\n" ), TrailingComments:nil, XXX_unrecognized:[]byte{}}
&google_protobuf.SourceCodeInfo_Location{Path:[]int32{4, 6}, Span:[]int32{185, 0, 189, 1}, LeadingComments:func(v string) *string { return &v } ( " Describes a service.\n" ), TrailingComments:nil, XXX_unrecognized:[]byte{}}
&google_protobuf.SourceCodeInfo_Location{Path:[]int32{4, 7}, Span:[]int32{192, 0, 200, 1}, LeadingComments:func(v string) *string { return &v } ( " Describes a method of a service.\n" ), TrailingComments:nil, XXX_unrecognized:[]byte{}}
&google_protobuf.SourceCodeInfo_Location{Path:[]int32{4, 7, 2, 1}, Span:[]int32{197, 2, 33}, LeadingComments:func(v string) *string { return &v } ( " Input and output type names.  These are resolved in the same way as\n FieldDescriptorProto.type_name, but must refer to a message type.\n" ), TrailingComments:nil, XXX_unrecognized:[]byte{}}
&google_protobuf.SourceCodeInfo_Location{Path:[]int32{4, 8, 5}, Span:[]int32{205, 2, 25}, LeadingComments:func(v string) *string { return &v } ( " Clients can define custom options in extensions of this message. See above.\n" ), TrailingComments:nil, XXX_unrecognized:[]byte{}}
&google_protobuf.SourceCodeInfo_Location{Path:[]int32{4, 8, 2, 0}, Span:[]int32{211, 2, 35}, LeadingComments:func(v string) *string { return &v } ( " Sets the Java package where classes generated from this .proto will be\n placed.  By default, the proto package is used, but this is often\n inappropriate because proto packages do not normally start with backwards\n domain names.\n" ), TrailingComments:nil, XXX_unrecognized:[]byte{}}
&google_protobuf.SourceCodeInfo_Location{Path:[]int32{4, 8, 2, 1}, Span:[]int32{218, 2, 43}, LeadingComments:func(v string) *string { return &v } ( " If set, all the classes from the .proto file are wrapped in a single\n outer class with the given name.  This applies to both Proto1\n (equivalent to the old \"--one_java_file\" option) and Proto2 (where\n a .proto always translates to a single class, but you may want to\n explicitly choose the class name).\n" ), TrailingComments:nil, XXX_unrecognized:[]byte{}}
&google_protobuf.SourceCodeInfo_Location{Path:[]int32{4, 8, 2, 2}, Span:[]int32{226, 2, 41}, LeadingComments:func(v string) *string { return &v } ( " If set true, then the Java code generator will generate a separate .java\n file for each top-level message, enum, and service defined in the .proto\n file.  Thus, these types will *not* be nested inside the outer class\n named by java_outer_classname.  However, the outer class will still be\n generated to contain the file's getDescriptor() method as well as any\n top-level extensions defined in the file.\n" ), TrailingComments:nil, XXX_unrecognized:[]byte{}}
&google_protobuf.SourceCodeInfo_Location{Path:[]int32{4, 8, 2, 3}, Span:[]int32{232, 2, 51}, LeadingComments:func(v string) *string { return &v } ( " If set true, then the Java code generator will generate equals() and\n hashCode() methods for all messages defined in the .proto file. This is\n purely a speed optimization, as the AbstractMessage base class includes\n reflection-based implementations of these methods.\n" ), TrailingComments:nil, XXX_unrecognized:[]byte{}}
&google_protobuf.SourceCodeInfo_Location{Path:[]int32{4, 8, 2, 5}, Span:[]int32{237, 2, 34}, LeadingComments:func(v string) *string { return &v } ( " Sets the Go package where structs generated from this .proto will be\n placed.  There is no default.\n" ), TrailingComments:nil, XXX_unrecognized:[]byte{}}
&google_protobuf.SourceCodeInfo_Location{Path:[]int32{4, 8, 2, 6}, Span:[]int32{249, 2, 41}, LeadingComments:func(v string) *string { return &v } ( " Should generic services be generated in each language?  \"Generic\" services\n are not specific to any particular RPC system.  They are generated by the\n main code generators in each language (without additional plugins).\n Generic services were the only kind of service generation supported by\n early versions of proto2.\n\n Generic services are now considered deprecated in favor of using plugins\n that generate code specific to your particular RPC system.  Therefore,\n these default to false.  Old code which depends on generic services should\n explicitly set them to true.\n" ), TrailingComments:nil, XXX_unrecognized:[]byte{}}
&google_protobuf.SourceCodeInfo_Location{Path:[]int32{4, 8, 2, 9}, Span:[]int32{254, 2, 58}, LeadingComments:func(v string) *string { return &v } ( " The parser stores options it doesn't recognize here. See above.\n" ), TrailingComments:nil, XXX_unrecognized:[]byte{}}
&google_protobuf.SourceCodeInfo_Location{Path:[]int32{4, 8, 4, 0}, Span:[]int32{257, 2, 266, 3}, LeadingComments:func(v string) *string { return &v } ( " Generated classes can be optimized for speed or code size.\n" ), TrailingComments:nil, XXX_unrecognized:[]byte{}}
&google_protobuf.SourceCodeInfo_Location{Path:[]int32{4, 8, 4, 0, 2, 0}, Span:[]int32{258, 4, 14}, LeadingComments:nil, TrailingComments:func(v string) *string { return &v } ( " Generate complete code for parsing, serialization,\n" ), XXX_unrecognized:[]byte{}}
&google_protobuf.SourceCodeInfo_Location{Path:[]int32{4, 8, 4, 0, 2, 1}, Span:[]int32{262, 4, 18}, LeadingComments:func(v string) *string { return &v } ( " etc.\n" ), TrailingComments:nil, XXX_unrecognized:[]byte{}}
&google_protobuf.SourceCodeInfo_Location{Path:[]int32{4, 8, 4, 0, 2, 2}, Span:[]int32{264, 4, 21}, LeadingComments:func(v string) *string { return &v } ( " Use ReflectionOps to implement these methods.\n" ), TrailingComments:func(v string) *string { return &v } ( " Generate code using MessageLite and the lite runtime.\n" ), XXX_unrecognized:[]byte{}}
&google_protobuf.SourceCodeInfo_Location{Path:[]int32{4, 9, 5}, Span:[]int32{272, 2, 25}, LeadingComments:func(v string) *string { return &v } ( " Clients can define custom options in extensions of this message. See above.\n" ), TrailingComments:nil, XXX_unrecognized:[]byte{}}
&google_protobuf.SourceCodeInfo_Location{Path:[]int32{4, 9, 2, 0}, Span:[]int32{292, 2, 44}, LeadingComments:func(v string) *string { return &v } ( " Set true to use the old proto1 MessageSet wire format for extensions.\n This is provided for backwards-compatibility with the MessageSet wire\n format.  You should not use this for any other reason:  It's less\n efficient, has fewer features, and is more complicated.\n\n The message must be defined exactly as follows:\n   message Foo {\n     option message_set_wire_format = true;\n     extensions 4 to max;\n   }\n Note that the message cannot have any defined fields; MessageSets only\n have extensions.\n\n All extensions of your type must be singular messages; e.g. they cannot\n be int32s, enums, or repeated messages.\n\n Because this is an option, the above two restrictions are not enforced by\n the protocol compiler.\n" ), TrailingComments:nil, XXX_unrecognized:[]byte{}}
&google_protobuf.SourceCodeInfo_Location{Path:[]int32{4, 9, 2, 1}, Span:[]int32{297, 2, 52}, LeadingComments:func(v string) *string { return &v } ( " Disables the generation of the standard \"descriptor()\" accessor, which can\n conflict with a field of the same name.  This is meant to make migration\n from proto1 easier; new code should avoid fields named \"descriptor\".\n" ), TrailingComments:nil, XXX_unrecognized:[]byte{}}
&google_protobuf.SourceCodeInfo_Location{Path:[]int32{4, 9, 2, 2}, Span:[]int32{300, 2, 58}, LeadingComments:func(v string) *string { return &v } ( " The parser stores options it doesn't recognize here. See above.\n" ), TrailingComments:nil, XXX_unrecognized:[]byte{}}
&google_protobuf.SourceCodeInfo_Location{Path:[]int32{4, 10, 5}, Span:[]int32{306, 2, 25}, LeadingComments:func(v string) *string { return &v } ( " Clients can define custom options in extensions of this message. See above.\n" ), TrailingComments:nil, XXX_unrecognized:[]byte{}}
&google_protobuf.SourceCodeInfo_Location{Path:[]int32{4, 10, 2, 0}, Span:[]int32{312, 2, 56}, LeadingComments:func(v string) *string { return &v } ( " The ctype option instructs the C++ code generator to use a different\n representation of the field than it normally would.  See the specific\n options below.  This option is not yet implemented in the open source\n release -- sorry, we'll try to include it in a future version!\n" ), TrailingComments:nil, XXX_unrecognized:[]byte{}}
&google_protobuf.SourceCodeInfo_Location{Path:[]int32{4, 10, 2, 1}, Span:[]int32{318, 2, 27}, LeadingComments:func(v string) *string { return &v } ( " The packed option can be enabled for repeated primitive fields to enable\n a more efficient representation on the wire. Rather than repeatedly\n writing the tag and type for each element, the entire array is encoded as\n a single length-delimited blob.\n" ), TrailingComments:nil, XXX_unrecognized:[]byte{}}
&google_protobuf.SourceCodeInfo_Location{Path:[]int32{4, 10, 2, 2}, Span:[]int32{348, 2, 25}, LeadingComments:func(v string) *string { return &v } ( " Should this field be parsed lazily?  Lazy applies only to message-type\n fields.  It means that when the outer message is initially parsed, the\n inner message's contents will not be parsed but instead stored in encoded\n form.  The inner message will actually be parsed when it is first accessed.\n\n This is only a hint.  Implementations are free to choose whether to use\n eager or lazy parsing regardless of the value of this option.  However,\n setting this option true suggests that the protocol author believes that\n using lazy parsing on this field is worth the additional bookkeeping\n overhead typically needed to implement it.\n\n This option does not affect the public interface of any generated code;\n all method signatures remain the same.  Furthermore, thread-safety of the\n interface is not affected by this option; const methods remain safe to\n call from multiple threads concurrently, while non-const methods continue\n to require exclusive access.\n\n\n Note that implementations may choose not to check required fields within\n a lazy sub-message.  That is, calling IsInitialized() on the outher message\n may return true even if the inner message has missing required fields.\n This is necessary because otherwise the inner message would have to be\n parsed in order to perform the check, defeating the purpose of lazy\n parsing.  An implementation which chooses not to check required fields\n must be consistent about it.  That is, for any particular sub-message, the\n implementation must either *always* check its required fields, or *never*\n check its required fields, regardless of whether or not the message has\n been parsed.\n" ), TrailingComments:nil, XXX_unrecognized:[]byte{}}
&google_protobuf.SourceCodeInfo_Location{Path:[]int32{4, 10, 2, 3}, Span:[]int32{354, 2, 31}, LeadingComments:func(v string) *string { return &v } ( " Is this field deprecated?\n Depending on the target platform, this can emit Deprecated annotations\n for accessors, or it will be completely ignored; in the very least, this\n is a formalization for deprecating fields.\n" ), TrailingComments:nil, XXX_unrecognized:[]byte{}}
&google_protobuf.SourceCodeInfo_Location{Path:[]int32{4, 10, 2, 4}, Span:[]int32{368, 2, 43}, LeadingComments:func(v string) *string { return &v } ( " EXPERIMENTAL.  DO NOT USE.\n For \"map\" fields, the name of the field in the enclosed type that\n is the key for this map.  For example, suppose we have:\n   message Item {\n     required string name = 1;\n     required string value = 2;\n   }\n   message Config {\n     repeated Item items = 1 [experimental_map_key=\"name\"];\n   }\n In this situation, the map key for Item will be set to \"name\".\n TODO: Fully-implement this, then remove the \"experimental_\" prefix.\n" ), TrailingComments:nil, XXX_unrecognized:[]byte{}}
&google_protobuf.SourceCodeInfo_Location{Path:[]int32{4, 10, 2, 5}, Span:[]int32{371, 2, 26}, LeadingComments:func(v string) *string { return &v } ( " For Google-internal migration only. Do not use.\n" ), TrailingComments:nil, XXX_unrecognized:[]byte{}}
&google_protobuf.SourceCodeInfo_Location{Path:[]int32{4, 10, 2, 6}, Span:[]int32{374, 2, 58}, LeadingComments:func(v string) *string { return &v } ( " The parser stores options it doesn't recognize here. See above.\n" ), TrailingComments:nil, XXX_unrecognized:[]byte{}}
&google_protobuf.SourceCodeInfo_Location{Path:[]int32{4, 10, 4, 0, 2, 0}, Span:[]int32{379, 4, 15}, LeadingComments:func(v string) *string { return &v } ( " Default mode.\n" ), TrailingComments:nil, XXX_unrecognized:[]byte{}}
&google_protobuf.SourceCodeInfo_Location{Path:[]int32{4, 11, 5}, Span:[]int32{388, 2, 25}, LeadingComments:func(v string) *string { return &v } ( " Clients can define custom options in extensions of this message. See above.\n" ), TrailingComments:nil, XXX_unrecognized:[]byte{}}
&google_protobuf.SourceCodeInfo_Location{Path:[]int32{4, 11, 2, 0}, Span:[]int32{392, 2, 32}, LeadingComments:func(v string) *string { return &v } ( " Set this option to false to disallow mapping different tag names to a same\n value.\n" ), TrailingComments:nil, XXX_unrecognized:[]byte{}}
&google_protobuf.SourceCodeInfo_Location{Path:[]int32{4, 11, 2, 1}, Span:[]int32{395, 2, 58}, LeadingComments:func(v string) *string { return &v } ( " The parser stores options it doesn't recognize here. See above.\n" ), TrailingComments:nil, XXX_unrecognized:[]byte{}}
&google_protobuf.SourceCodeInfo_Location{Path:[]int32{4, 12, 5}, Span:[]int32{401, 2, 25}, LeadingComments:func(v string) *string { return &v } ( " Clients can define custom options in extensions of this message. See above.\n" ), TrailingComments:nil, XXX_unrecognized:[]byte{}}
&google_protobuf.SourceCodeInfo_Location{Path:[]int32{4, 12, 2, 0}, Span:[]int32{404, 2, 58}, LeadingComments:func(v string) *string { return &v } ( " The parser stores options it doesn't recognize here. See above.\n" ), TrailingComments:nil, XXX_unrecognized:[]byte{}}
&google_protobuf.SourceCodeInfo_Location{Path:[]int32{4, 13, 5}, Span:[]int32{410, 2, 25}, LeadingComments:func(v string) *string { return &v } ( " Clients can define custom options in extensions of this message. See above.\n" ), TrailingComments:nil, XXX_unrecognized:[]byte{}}
&google_protobuf.SourceCodeInfo_Location{Path:[]int32{4, 13, 2, 0}, Span:[]int32{413, 2, 58}, LeadingComments:func(v string) *string { return &v } ( " The parser stores options it doesn't recognize here. See above.\n" ), TrailingComments:nil, XXX_unrecognized:[]byte{}}
&google_protobuf.SourceCodeInfo_Location{Path:[]int32{4, 14, 5}, Span:[]int32{419, 2, 25}, LeadingComments:func(v string) *string { return &v } ( " Clients can define custom options in extensions of this message. See above.\n" ), TrailingComments:nil, XXX_unrecognized:[]byte{}}
&google_protobuf.SourceCodeInfo_Location{Path:[]int32{4, 14, 2, 0}, Span:[]int32{422, 2, 58}, LeadingComments:func(v string) *string { return &v } ( " The parser stores options it doesn't recognize here. See above.\n" ), TrailingComments:nil, XXX_unrecognized:[]byte{}}
&google_protobuf.SourceCodeInfo_Location{Path:[]int32{4, 15}, Span:[]int32{431, 0, 452, 1}, LeadingComments:func(v string) *string { return &v } ( " A message representing a option the parser does not recognize. This only\n appears in options protos created by the compiler::Parser class.\n DescriptorPool resolves these when building Descriptor objects. Therefore,\n options protos in descriptor objects (e.g. returned by Descriptor::options(),\n or produced by Descriptor::CopyTo()) will never have UninterpretedOptions\n in them.\n" ), TrailingComments:nil, XXX_unrecognized:[]byte{}}
&google_protobuf.SourceCodeInfo_Location{Path:[]int32{4, 15, 2, 1}, Span:[]int32{436, 2, 39}, LeadingComments:func(v string) *string { return &v } ( " The value of the uninterpreted option, in whatever type the tokenizer\n identified it as during parsing. Exactly one of these should be set.\n" ), TrailingComments:nil, XXX_unrecognized:[]byte{}}
&google_protobuf.SourceCodeInfo_Location{Path:[]int32{4, 15, 3, 0}, Span:[]int32{448, 2, 451, 3}, LeadingComments:func(v string) *string { return &v } ( " The name of the uninterpreted option.  Each string represents a segment in\n a dot-separated name.  is_extension is true iff a segment represents an\n extension (denoted with parentheses in options specs in .proto files).\n E.g.,{ [\"foo\", false], [\"bar.baz\", true], [\"qux\", false] } represents\n \"foo.(bar.baz).qux\".\n" ), TrailingComments:nil, XXX_unrecognized:[]byte{}}
&google_protobuf.SourceCodeInfo_Location{Path:[]int32{4, 16}, Span:[]int32{456, 0, 574, 1}, LeadingComments:func(v string) *string { return &v } ( " Encapsulates information about the original source file from which a\n FileDescriptorProto was generated.\n" ), TrailingComments:nil, XXX_unrecognized:[]byte{}}
&google_protobuf.SourceCodeInfo_Location{Path:[]int32{4, 16, 2, 0}, Span:[]int32{501, 2, 64}, LeadingComments:func(v string) *string { return &v } ( " A Location identifies a piece of source code in a .proto file which\n corresponds to a particular definition.  This information is intended\n to be useful to IDEs, code indexers, documentation generators, and similar\n tools.\n\n For example, say we have a file like:\n   message Foo {\n     optional string foo = 1;\n   }\n Let's look at just the field definition:\n   optional string foo = 1;\n   ^       ^^     ^^  ^  ^^^\n   a       bc     de  f  ghi\n We have the following locations:\n   span   path               represents\n   [a,i)  [ 4, 0, 2, 0 ]     The whole field definition.\n   [a,b)  [ 4, 0, 2, 0, 4 ]  The label (optional).\n   [c,d)  [ 4, 0, 2, 0, 5 ]  The type (string).\n   [e,f)  [ 4, 0, 2, 0, 1 ]  The name (foo).\n   [g,h)  [ 4, 0, 2, 0, 3 ]  The number (1).\n\n Notes:\n - A location may refer to a repeated field itself (i.e. not to any\n   particular index within it).  This is used whenever a set of elements are\n   logically enclosed in a single code segment.  For example, an entire\n   extend block (possibly containing multiple extension definitions) will\n   have an outer location whose path refers to the \"extensions\" repeated\n   field without an index.\n - Multiple locations may have the same path.  This happens when a single\n   logical declaration is spread out across multiple places.  The most\n   obvious example is the \"extend\" block again -- there may be multiple\n   extend blocks in the same scope, each of which will have the same path.\n - A location's span is not always a subset of its parent's span.  For\n   example, the \"extendee\" of an extension declaration appears at the\n   beginning of the \"extend\" block and is shared by all extensions within\n   the block.\n - Just because a location's span is a subset of some other location's span\n   does not mean that it is a descendent.  For example, a \"group\" defines\n   both a type and a field in a single declaration.  Thus, the locations\n   corresponding to the type and field and their components will overlap.\n - Code which tries to interpret locations should probably be designed to\n   ignore those that it doesn't understand, as more types of locations could\n   be recorded in the future.\n" ), TrailingComments:nil, XXX_unrecognized:[]byte{}}
&google_protobuf.SourceCodeInfo_Location{Path:[]int32{4, 16, 3, 0, 2, 0}, Span:[]int32{528, 4, 44}, LeadingComments:func(v string) *string { return &v } ( " Identifies which part of the FileDescriptorProto was defined at this\n location.\n\n Each element is a field number or an index.  They form a path from\n the root FileDescriptorProto to the place where the definition.  For\n example, this path:\n   [ 4, 3, 2, 7, 1 ]\n refers to:\n   file.message_type(3)  // 4, 3\n       .field(7)         // 2, 7\n       .name()           // 1\n This is because FileDescriptorProto.message_type has field number 4:\n   repeated DescriptorProto message_type = 4;\n and DescriptorProto.field has field number 2:\n   repeated FieldDescriptorProto field = 2;\n and FieldDescriptorProto.name has field number 1:\n   optional string name = 1;\n\n Thus, the above path gives the location of a field name.  If we removed\n the last element:\n   [ 4, 3, 2, 7 ]\n this path refers to the whole field declaration (from the beginning\n of the label to the terminating semicolon).\n" ), TrailingComments:nil, XXX_unrecognized:[]byte{}}
&google_protobuf.SourceCodeInfo_Location{Path:[]int32{4, 16, 3, 0, 2, 1}, Span:[]int32{535, 4, 44}, LeadingComments:func(v string) *string { return &v } ( " Always has exactly three or four elements: start line, start column,\n end line (optional, otherwise assumed same as start line), end column.\n These are packed into a single field for efficiency.  Note that line\n and column numbers are zero-based -- typically you will want to add\n 1 to each before displaying to a user.\n" ), TrailingComments:nil, XXX_unrecognized:[]byte{}}
&google_protobuf.SourceCodeInfo_Location{Path:[]int32{4, 16, 3, 0, 2, 2}, Span:[]int32{571, 4, 41}, LeadingComments:func(v string) *string { return &v } ( " If this SourceCodeInfo represents a complete declaration, these are any\n comments appearing before and after the declaration which appear to be\n attached to the declaration.\n \n A series of line comments appearing on consecutive lines, with no other\n tokens appearing on those lines, will be treated as a single comment.\n \n Only the comment content is provided; comment markers (e.g. //) are\n stripped out.  For block comments, leading whitespace and an asterisk\n will be stripped from the beginning of each line other than the first.\n Newlines are included in the output.\n \n Examples:\n \n optional int32 foo = 1;  // Comment attached to foo.\n // Comment attached to bar.\n optional int32 bar = 2;\n \n optional string baz = 3;\n // Comment attached to baz.\n // Another line attached to baz.\n \n // Comment attached to qux.\n //\n // Another line attached to qux.\n optional double qux = 4;\n \n optional string corge = 5;\n /* Block comment attached\n * to corge.  Leading asterisks\n * will be removed. */\n /* Block comment attached to\n * grault. */\n optional int32 grault = 6;\n" ), TrailingComments:nil, XXX_unrecognized:[]byte{}}
fieldOptionsTest.proto <TEST PASSED>
&google_protobuf.SourceCodeInfo_Location{Path:[]int32{4, 0}, Span:[]int32{45, 0, 47, 1}, LeadingComments:func(v string) *string { return &v } ( " The protocol compiler can output a FileDescriptorSet containing the .proto\n files it parses.\n" ), TrailingComments:nil, XXX_unrecognized:[]byte{}}
&google_protobuf.SourceCodeInfo_Location{Path:[]int32{4, 1}, Span:[]int32{50, 0, 78, 1}, LeadingComments:func(v string) *string { return &v } ( " Describes a complete .proto file.\n" ), TrailingComments:nil, XXX_unrecognized:[]byte{}}
&google_protobuf.SourceCodeInfo_Location{Path:[]int32{4, 1, 2, 1}, Span:[]int32{53, 2, 30}, LeadingComments:func(v string) *string { return &v } ( " file name, relative to root of source tree\n" ), TrailingComments:func(v string) *string { return &v } ( " e.g. \"foo\", \"foo.bar\", etc.\n" ), XXX_unrecognized:[]byte{}}
&google_protobuf.SourceCodeInfo_Location{Path:[]int32{4, 1, 2, 2}, Span:[]int32{57, 2, 33}, LeadingComments:func(v string) *string { return &v } ( " Names of files imported by this file.\n" ), TrailingComments:nil, XXX_unrecognized:[]byte{}}
&google_protobuf.SourceCodeInfo_Location{Path:[]int32{4, 1, 2, 3}, Span:[]int32{60, 2, 40}, LeadingComments:func(v string) *string { return &v } ( " Indexes of the public imported files in the dependency list above.\n" ), TrailingComments:nil, XXX_unrecognized:[]byte{}}
&google_protobuf.SourceCodeInfo_Location{Path:[]int32{4, 1, 2, 4}, Span:[]int32{64, 2, 38}, LeadingComments:func(v string) *string { return &v } ( " Indexes of the weak imported files in the dependency list.\n For Google-internal migration only. Do not use.\n" ), TrailingComments:nil, XXX_unrecognized:[]byte{}}
&google_protobuf.SourceCodeInfo_Location{Path:[]int32{4, 1, 2, 5}, Span:[]int32{67, 2, 44}, LeadingComments:func(v string) *string { return &v } ( " All top-level definitions in this file.\n" ), TrailingComments:nil, XXX_unrecognized:[]byte{}}
&google_protobuf.SourceCodeInfo_Location{Path:[]int32{4, 1, 2, 10}, Span:[]int32{77, 2, 47}, LeadingComments:func(v string) *string { return &v } ( " This field contains optional information about the original source code.\n You may safely remove this entire field whithout harming runtime\n functionality of the descriptors -- the information is needed only by\n development tools.\n" ), TrailingComments:nil, XXX_unrecognized:[]byte{}}
&google_protobuf.SourceCodeInfo_Location{Path:[]int32{4, 2}, Span:[]int32{81, 0, 94, 1}, LeadingComments:func(v string) *string { return &v } ( " Describes a message type.\n" ), TrailingComments:nil, XXX_unrecognized:[]byte{}}
&google_protobuf.SourceCodeInfo_Location{Path:[]int32{4, 3}, Span:[]int32{97, 0, 168, 1}, LeadingComments:func(v string) *string { return &v } ( " Describes a field within a message.\n" ), TrailingComments:nil, XXX_unrecognized:[]byte{}}
&google_protobuf.SourceCodeInfo_Location{Path:[]int32{4, 3, 2, 3}, Span:[]int32{104, 2, 62}, LeadingComments:func(v string) *string { return &v } ( " If type_name is set, this need not be set.  If both this and type_name\n are set, this must be either TYPE_ENUM or TYPE_MESSAGE.\n" ), TrailingComments:nil, XXX_unrecognized:[]byte{}}
&google_protobuf.SourceCodeInfo_Location{Path:[]int32{4, 3, 2, 4}, Span:[]int32{111, 2, 32}, LeadingComments:func(v string) *string { return &v } ( " For message and enum types, this is the name of the type.  If the name\n starts with a '.', it is fully-qualified.  Otherwise, C++-like scoping\n rules are used to find the type (i.e. first the nested types within this\n message are searched, then within the parent, on up to the root\n namespace).\n" ), TrailingComments:nil, XXX_unrecognized:[]byte{}}
&google_protobuf.SourceCodeInfo_Location{Path:[]int32{4, 3, 2, 5}, Span:[]int32{115, 2, 31}, LeadingComments:func(v string) *string { return &v } ( " For extensions, this is the name of the type being extended.  It is\n resolved in the same manner as type_name.\n" ), TrailingComments:nil, XXX_unrecognized:[]byte{}}
&google_protobuf.SourceCodeInfo_Location{Path:[]int32{4, 3, 2, 6}, Span:[]int32{122, 2, 36}, LeadingComments:func(v string) *string { return &v } ( " For numeric types, contains the original text representation of the value.\n For booleans, \"true\" or \"false\".\n For strings, contains the default text contents (not escaped in any way).\n For bytes, contains the C escaped value.  All bytes >= 128 are escaped.\n TODO(kenton):  Base-64 encode?\n" ), TrailingComments:nil, XXX_unrecognized:[]byte{}}
&google_protobuf.SourceCodeInfo_Location{Path:[]int32{4, 3, 4, 0, 2, 0}, Span:[]int32{129, 4, 20}, LeadingComments:func(v string) *string { return &v } ( " 0 is reserved for errors.\n Order is weird for historical reasons.\n" ), TrailingComments:nil, XXX_unrecognized:[]byte{}}
&google_protobuf.SourceCodeInfo_Location{Path:[]int32{4, 3, 4, 0, 2, 2}, Span:[]int32{134, 4, 19}, LeadingComments:func(v string) *string { return &v } ( " Not ZigZag encoded.  Negative numbers take 10 bytes.  Use TYPE_SINT64 if\n negative values are likely.\n" ), TrailingComments:nil, XXX_unrecognized:[]byte{}}
&google_protobuf.SourceCodeInfo_Location{Path:[]int32{4, 3, 4, 0, 2, 4}, Span:[]int32{139, 4, 19}, LeadingComments:func(v string) *string { return &v } ( " Not ZigZag encoded.  Negative numbers take 10 bytes.  Use TYPE_SINT32 if\n negative values are likely.\n" ), TrailingComments:nil, XXX_unrecognized:[]byte{}}
&google_protobuf.SourceCodeInfo_Location{Path:[]int32{4, 3, 4, 0, 2, 10}, Span:[]int32{146, 4, 22}, LeadingComments:func(v string) *string { return &v } ( " Tag-delimited aggregate.\n" ), TrailingComments:func(v string) *string { return &v } ( " Length-delimited aggregate.\n" ), XXX_unrecognized:[]byte{}}
&google_protobuf.SourceCodeInfo_Location{Path:[]int32{4, 3, 4, 0, 2, 11}, Span:[]int32{150, 4, 20}, LeadingComments:func(v string) *string { return &v } ( " New in version 2.\n" ), TrailingComments:nil, XXX_unrecognized:[]byte{}}
&google_protobuf.SourceCodeInfo_Location{Path:[]int32{4, 3, 4, 0, 2, 17}, Span:[]int32{157, 4, 21}, LeadingComments:func(v string) *string { return &v } ( " Uses ZigZag encoding.\n" ), TrailingComments:func(v string) *string { return &v } ( " Uses ZigZag encoding.\n" ), XXX_unrecognized:[]byte{}}
&google_protobuf.SourceCodeInfo_Location{Path:[]int32{4, 3, 4, 1, 2, 0}, Span:[]int32{163, 4, 23}, LeadingComments:func(v string) *string { return &v } ( " 0 is reserved for errors\n" ), TrailingComments:nil, XXX_unrecognized:[]byte{}}
&google_protobuf.SourceCodeInfo_Location{Path:[]int32{4, 3, 4, 1, 2, 2}, Span:[]int32{165, 4, 23}, LeadingComments:nil, TrailingComments:func(v string) *string { return &v } ( " TODO(sanjay): Should we add LABEL_MAP?\n" ), XXX_unrecognized:[]byte{}}
&google_protobuf.SourceCodeInfo_Location{Path:[]int32{4, 4}, Span:[]int32{171, 0, 175, 1}, LeadingComments:func(v string) *string { return &v } ( " Describes an enum type.\n" ), TrailingComments:nil, XXX_unrecognized:[]byte{}}
&google_protobuf.SourceCodeInfo_Location{Path:[]int32{4, 5}, Span:[]int32{178, 0, 182, 1}, LeadingComments:func(v string) *string { return &v } ( " Describes a value within an enum.\n" ), TrailingComments:nil, XXX_unrecognized:[]byte{}}
&google_protobuf.SourceCodeInfo_Location{Path:[]int32{4, 6}, Span:[]int32{185, 0, 189, 1}, LeadingComments:func(v string) *string { return &v } ( " Describes a service.\n" ), TrailingComments:nil, XXX_unrecognized:[]byte{}}
&google_protobuf.SourceCodeInfo_Location{Path:[]int32{4, 7}, Span:[]int32{192, 0, 200, 1}, LeadingComments:func(v string) *string { return &v } ( " Describes a method of a service.\n" ), TrailingComments:nil, XXX_unrecognized:[]byte{}}
&google_protobuf.SourceCodeInfo_Location{Path:[]int32{4, 7, 2, 1}, Span:[]int32{197, 2, 33}, LeadingComments:func(v string) *string { return &v } ( " Input and output type names.  These are resolved in the same way as\n FieldDescriptorProto.type_name, but must refer to a message type.\n" ), TrailingComments:nil, XXX_unrecognized:[]byte{}}
&google_protobuf.SourceCodeInfo_Location{Path:[]int32{4, 8, 5}, Span:[]int32{205, 2, 25}, LeadingComments:func(v string) *string { return &v } ( " Clients can define custom options in extensions of this message. See above.\n" ), TrailingComments:nil, XXX_unrecognized:[]byte{}}
&google_protobuf.SourceCodeInfo_Location{Path:[]int32{4, 8, 2, 0}, Span:[]int32{211, 2, 35}, LeadingComments:func(v string) *string { return &v } ( " Sets the Java package where classes generated from this .proto will be\n placed.  By default, the proto package is used, but this is often\n inappropriate because proto packages do not normally start with backwards\n domain names.\n" ), TrailingComments:nil, XXX_unrecognized:[]byte{}}
&google_protobuf.SourceCodeInfo_Location{Path:[]int32{4, 8, 2, 1}, Span:[]int32{218, 2, 43}, LeadingComments:func(v string) *string { return &v } ( " If set, all the classes from the .proto file are wrapped in a single\n outer class with the given name.  This applies to both Proto1\n (equivalent to the old \"--one_java_file\" option) and Proto2 (where\n a .proto always translates to a single class, but you may want to\n explicitly choose the class name).\n" ), TrailingComments:nil, XXX_unrecognized:[]byte{}}
&google_protobuf.SourceCodeInfo_Location{Path:[]int32{4, 8, 2, 2}, Span:[]int32{226, 2, 41}, LeadingComments:func(v string) *string { return &v } ( " If set true, then the Java code generator will generate a separate .java\n file for each top-level message, enum, and service defined in the .proto\n file.  Thus, these types will *not* be nested inside the outer class\n named by java_outer_classname.  However, the outer class will still be\n generated to contain the file's getDescriptor() method as well as any\n top-level extensions defined in the file.\n" ), TrailingComments:nil, XXX_unrecognized:[]byte{}}
&google_protobuf.SourceCodeInfo_Location{Path:[]int32{4, 8, 2, 3}, Span:[]int32{232, 2, 51}, LeadingComments:func(v string) *string { return &v } ( " If set true, then the Java code generator will generate equals() and\n hashCode() methods for all messages defined in the .proto file. This is\n purely a speed optimization, as the AbstractMessage base class includes\n reflection-based implementations of these methods.\n" ), TrailingComments:nil, XXX_unrecognized:[]byte{}}
&google_protobuf.SourceCodeInfo_Location{Path:[]int32{4, 8, 2, 5}, Span:[]int32{237, 2, 34}, LeadingComments:func(v string) *string { return &v } ( " Sets the Go package where structs generated from this .proto will be\n placed.  There is no default.\n" ), TrailingComments:nil, XXX_unrecognized:[]byte{}}
&google_protobuf.SourceCodeInfo_Location{Path:[]int32{4, 8, 2, 6}, Span:[]int32{249, 2, 41}, LeadingComments:func(v string) *string { return &v } ( " Should generic services be generated in each language?  \"Generic\" services\n are not specific to any particular RPC system.  They are generated by the\n main code generators in each language (without additional plugins).\n Generic services were the only kind of service generation supported by\n early versions of proto2.\n\n Generic services are now considered deprecated in favor of using plugins\n that generate code specific to your particular RPC system.  Therefore,\n these default to false.  Old code which depends on generic services should\n explicitly set them to true.\n" ), TrailingComments:nil, XXX_unrecognized:[]byte{}}
&google_protobuf.SourceCodeInfo_Location{Path:[]int32{4, 8, 2, 9}, Span:[]int32{254, 2, 58}, LeadingComments:func(v string) *string { return &v } ( " The parser stores options it doesn't recognize here. See above.\n" ), TrailingComments:nil, XXX_unrecognized:[]byte{}}
&google_protobuf.SourceCodeInfo_Location{Path:[]int32{4, 8, 4, 0}, Span:[]int32{257, 2, 266, 3}, LeadingComments:func(v string) *string { return &v } ( " Generated classes can be optimized for speed or code size.\n" ), TrailingComments:nil, XXX_unrecognized:[]byte{}}
&google_protobuf.SourceCodeInfo_Location{Path:[]int32{4, 8, 4, 0, 2, 0}, Span:[]int32{258, 4, 14}, LeadingComments:nil, TrailingComments:func(v string) *string { return &v } ( " Generate complete code for parsing, serialization,\n" ), XXX_unrecognized:[]byte{}}
&google_protobuf.SourceCodeInfo_Location{Path:[]int32{4, 8, 4, 0, 2, 1}, Span:[]int32{262, 4, 18}, LeadingComments:func(v string) *string { return &v } ( " etc.\n" ), TrailingComments:nil, XXX_unrecognized:[]byte{}}
&google_protobuf.SourceCodeInfo_Location{Path:[]int32{4, 8, 4, 0, 2, 2}, Span:[]int32{264, 4, 21}, LeadingComments:func(v string) *string { return &v } ( " Use ReflectionOps to implement these methods.\n" ), TrailingComments:func(v string) *string { return &v } ( " Generate code using MessageLite and the lite runtime.\n" ), XXX_unrecognized:[]byte{}}
&google_protobuf.SourceCodeInfo_Location{Path:[]int32{4, 9, 5}, Span:[]int32{272, 2, 25}, LeadingComments:func(v string) *string { return &v } ( " Clients can define custom options in extensions of this message. See above.\n" ), TrailingComments:nil, XXX_unrecognized:[]byte{}}
&google_protobuf.SourceCodeInfo_Location{Path:[]int32{4, 9, 2, 0}, Span:[]int32{292, 2, 44}, LeadingComments:func(v string) *string { return &v } ( " Set true to use the old proto1 MessageSet wire format for extensions.\n This is provided for backwards-compatibility with the MessageSet wire\n format.  You should not use this for any other reason:  It's less\n efficient, has fewer features, and is more complicated.\n\n The message must be defined exactly as follows:\n   message Foo {\n     option message_set_wire_format = true;\n     extensions 4 to max;\n   }\n Note that the message cannot have any defined fields; MessageSets only\n have extensions.\n\n All extensions of your type must be singular messages; e.g. they cannot\n be int32s, enums, or repeated messages.\n\n Because this is an option, the above two restrictions are not enforced by\n the protocol compiler.\n" ), TrailingComments:nil, XXX_unrecognized:[]byte{}}
&google_protobuf.SourceCodeInfo_Location{Path:[]int32{4, 9, 2, 1}, Span:[]int32{297, 2, 52}, LeadingComments:func(v string) *string { return &v } ( " Disables the generation of the standard \"descriptor()\" accessor, which can\n conflict with a field of the same name.  This is meant to make migration\n from proto1 easier; new code should avoid fields named \"descriptor\".\n" ), TrailingComments:nil, XXX_unrecognized:[]byte{}}
&google_protobuf.SourceCodeInfo_Location{Path:[]int32{4, 9, 2, 2}, Span:[]int32{300, 2, 58}, LeadingComments:func(v string) *string { return &v } ( " The parser stores options it doesn't recognize here. See above.\n" ), TrailingComments:nil, XXX_unrecognized:[]byte{}}
&google_protobuf.SourceCodeInfo_Location{Path:[]int32{4, 10, 5}, Span:[]int32{306, 2, 25}, LeadingComments:func(v string) *string { return &v } ( " Clients can define custom options in extensions of this message. See above.\n" ), TrailingComments:nil, XXX_unrecognized:[]byte{}}
&google_protobuf.SourceCodeInfo_Location{Path:[]int32{4, 10, 2, 0}, Span:[]int32{312, 2, 56}, LeadingComments:func(v string) *string { return &v } ( " The ctype option instructs the C++ code generator to use a different\n representation of the field than it normally would.  See the specific\n options below.  This option is not yet implemented in the open source\n release -- sorry, we'll try to include it in a future version!\n" ), TrailingComments:nil, XXX_unrecognized:[]byte{}}
&google_protobuf.SourceCodeInfo_Location{Path:[]int32{4, 10, 2, 1}, Span:[]int32{318, 2, 27}, LeadingComments:func(v string) *string { return &v } ( " The packed option can be enabled for repeated primitive fields to enable\n a more efficient representation on the wire. Rather than repeatedly\n writing the tag and type for each element, the entire array is encoded as\n a single length-delimited blob.\n" ), TrailingComments:nil, XXX_unrecognized:[]byte{}}
&google_protobuf.SourceCodeInfo_Location{Path:[]int32{4, 10, 2, 2}, Span:[]int32{348, 2, 25}, LeadingComments:func(v string) *string { return &v } ( " Should this field be parsed lazily?  Lazy applies only to message-type\n fields.  It means that when the outer message is initially parsed, the\n inner message's contents will not be parsed but instead stored in encoded\n form.  The inner message will actually be parsed when it is first accessed.\n\n This is only a hint.  Implementations are free to choose whether to use\n eager or lazy parsing regardless of the value of this option.  However,\n setting this option true suggests that the protocol author believes that\n using lazy parsing on this field is worth the additional bookkeeping\n overhead typically needed to implement it.\n\n This option does not affect the public interface of any generated code;\n all method signatures remain the same.  Furthermore, thread-safety of the\n interface is not affected by this option; const methods remain safe to\n call from multiple threads concurrently, while non-const methods continue\n to require exclusive access.\n\n\n Note that implementations may choose not to check required fields within\n a lazy sub-message.  That is, calling IsInitialized() on the outher message\n may return true even if the inner message has missing required fields.\n This is necessary because otherwise the inner message would have to be\n parsed in order to perform the check, defeating the purpose of lazy\n parsing.  An implementation which chooses not to check required fields\n must be consistent about it.  That is, for any particular sub-message, the\n implementation must either *always* check its required fields, or *never*\n check its required fields, regardless of whether or not the message has\n been parsed.\n" ), TrailingComments:nil, XXX_unrecognized:[]byte{}}
&google_protobuf.SourceCodeInfo_Location{Path:[]int32{4, 10, 2, 3}, Span:[]int32{354, 2, 31}, LeadingComments:func(v string) *string { return &v } ( " Is this field deprecated?\n Depending on the target platform, this can emit Deprecated annotations\n for accessors, or it will be completely ignored; in the very least, this\n is a formalization for deprecating fields.\n" ), TrailingComments:nil, XXX_unrecognized:[]byte{}}
&google_protobuf.SourceCodeInfo_Location{Path:[]int32{4, 10, 2, 4}, Span:[]int32{368, 2, 43}, LeadingComments:func(v string) *string { return &v } ( " EXPERIMENTAL.  DO NOT USE.\n For \"map\" fields, the name of the field in the enclosed type that\n is the key for this map.  For example, suppose we have:\n   message Item {\n     required string name = 1;\n     required string value = 2;\n   }\n   message Config {\n     repeated Item items = 1 [experimental_map_key=\"name\"];\n   }\n In this situation, the map key for Item will be set to \"name\".\n TODO: Fully-implement this, then remove the \"experimental_\" prefix.\n" ), TrailingComments:nil, XXX_unrecognized:[]byte{}}
&google_protobuf.SourceCodeInfo_Location{Path:[]int32{4, 10, 2, 5}, Span:[]int32{371, 2, 26}, LeadingComments:func(v string) *string { return &v } ( " For Google-internal migration only. Do not use.\n" ), TrailingComments:nil, XXX_unrecognized:[]byte{}}
&google_protobuf.SourceCodeInfo_Location{Path:[]int32{4, 10, 2, 6}, Span:[]int32{374, 2, 58}, LeadingComments:func(v string) *string { return &v } ( " The parser stores options it doesn't recognize here. See above.\n" ), TrailingComments:nil, XXX_unrecognized:[]byte{}}
&google_protobuf.SourceCodeInfo_Location{Path:[]int32{4, 10, 4, 0, 2, 0}, Span:[]int32{379, 4, 15}, LeadingComments:func(v string) *string { return &v } ( " Default mode.\n" ), TrailingComments:nil, XXX_unrecognized:[]byte{}}
&google_protobuf.SourceCodeInfo_Location{Path:[]int32{4, 11, 5}, Span:[]int32{388, 2, 25}, LeadingComments:func(v string) *string { return &v } ( " Clients can define custom options in extensions of this message. See above.\n" ), TrailingComments:nil, XXX_unrecognized:[]byte{}}
&google_protobuf.SourceCodeInfo_Location{Path:[]int32{4, 11, 2, 0}, Span:[]int32{392, 2, 32}, LeadingComments:func(v string) *string { return &v } ( " Set this option to false to disallow mapping different tag names to a same\n value.\n" ), TrailingComments:nil, XXX_unrecognized:[]byte{}}
&google_protobuf.SourceCodeInfo_Location{Path:[]int32{4, 11, 2, 1}, Span:[]int32{395, 2, 58}, LeadingComments:func(v string) *string { return &v } ( " The parser stores options it doesn't recognize here. See above.\n" ), TrailingComments:nil, XXX_unrecognized:[]byte{}}
&google_protobuf.SourceCodeInfo_Location{Path:[]int32{4, 12, 5}, Span:[]int32{401, 2, 25}, LeadingComments:func(v string) *string { return &v } ( " Clients can define custom options in extensions of this message. See above.\n" ), TrailingComments:nil, XXX_unrecognized:[]byte{}}
&google_protobuf.SourceCodeInfo_Location{Path:[]int32{4, 12, 2, 0}, Span:[]int32{404, 2, 58}, LeadingComments:func(v string) *string { return &v } ( " The parser stores options it doesn't recognize here. See above.\n" ), TrailingComments:nil, XXX_unrecognized:[]byte{}}
&google_protobuf.SourceCodeInfo_Location{Path:[]int32{4, 13, 5}, Span:[]int32{410, 2, 25}, LeadingComments:func(v string) *string { return &v } ( " Clients can define custom options in extensions of this message. See above.\n" ), TrailingComments:nil, XXX_unrecognized:[]byte{}}
&google_protobuf.SourceCodeInfo_Location{Path:[]int32{4, 13, 2, 0}, Span:[]int32{413, 2, 58}, LeadingComments:func(v string) *string { return &v } ( " The parser stores options it doesn't recognize here. See above.\n" ), TrailingComments:nil, XXX_unrecognized:[]byte{}}
&google_protobuf.SourceCodeInfo_Location{Path:[]int32{4, 14, 5}, Span:[]int32{419, 2, 25}, LeadingComments:func(v string) *string { return &v } ( " Clients can define custom options in extensions of this message. See above.\n" ), TrailingComments:nil, XXX_unrecognized:[]byte{}}
&google_protobuf.SourceCodeInfo_Location{Path:[]int32{4, 14, 2, 0}, Span:[]int32{422, 2, 58}, LeadingComments:func(v string) *string { return &v } ( " The parser stores options it doesn't recognize here. See above.\n" ), TrailingComments:nil, XXX_unrecognized:[]byte{}}
&google_protobuf.SourceCodeInfo_Location{Path:[]int32{4, 15}, Span:[]int32{431, 0, 452, 1}, LeadingComments:func(v string) *string { return &v } ( " A message representing a option the parser does not recognize. This only\n appears in options protos created by the compiler::Parser class.\n DescriptorPool resolves these when building Descriptor objects. Therefore,\n options protos in descriptor objects (e.g. returned by Descriptor::options(),\n or produced by Descriptor::CopyTo()) will never have UninterpretedOptions\n in them.\n" ), TrailingComments:nil, XXX_unrecognized:[]byte{}}
&google_protobuf.SourceCodeInfo_Location{Path:[]int32{4, 15, 2, 1}, Span:[]int32{436, 2, 39}, LeadingComments:func(v string) *string { return &v } ( " The value of the uninterpreted option, in whatever type the tokenizer\n identified it as during parsing. Exactly one of these should be set.\n" ), TrailingComments:nil, XXX_unrecognized:[]byte{}}
&google_protobuf.SourceCodeInfo_Location{Path:[]int32{4, 15, 3, 0}, Span:[]int32{448, 2, 451, 3}, LeadingComments:func(v string) *string { return &v } ( " The name of the uninterpreted option.  Each string represents a segment in\n a dot-separated name.  is_extension is true iff a segment represents an\n extension (denoted with parentheses in options specs in .proto files).\n E.g.,{ [\"foo\", false], [\"bar.baz\", true], [\"qux\", false] } represents\n \"foo.(bar.baz).qux\".\n" ), TrailingComments:nil, XXX_unrecognized:[]byte{}}
&google_protobuf.SourceCodeInfo_Location{Path:[]int32{4, 16}, Span:[]int32{456, 0, 574, 1}, LeadingComments:func(v string) *string { return &v } ( " Encapsulates information about the original source file from which a\n FileDescriptorProto was generated.\n" ), TrailingComments:nil, XXX_unrecognized:[]byte{}}
&google_protobuf.SourceCodeInfo_Location{Path:[]int32{4, 16, 2, 0}, Span:[]int32{501, 2, 64}, LeadingComments:func(v string) *string { return &v } ( " A Location identifies a piece of source code in a .proto file which\n corresponds to a particular definition.  This information is intended\n to be useful to IDEs, code indexers, documentation generators, and similar\n tools.\n\n For example, say we have a file like:\n   message Foo {\n     optional string foo = 1;\n   }\n Let's look at just the field definition:\n   optional string foo = 1;\n   ^       ^^     ^^  ^  ^^^\n   a       bc     de  f  ghi\n We have the following locations:\n   span   path               represents\n   [a,i)  [ 4, 0, 2, 0 ]     The whole field definition.\n   [a,b)  [ 4, 0, 2, 0, 4 ]  The label (optional).\n   [c,d)  [ 4, 0, 2, 0, 5 ]  The type (string).\n   [e,f)  [ 4, 0, 2, 0, 1 ]  The name (foo).\n   [g,h)  [ 4, 0, 2, 0, 3 ]  The number (1).\n\n Notes:\n - A location may refer to a repeated field itself (i.e. not to any\n   particular index within it).  This is used whenever a set of elements are\n   logically enclosed in a single code segment.  For example, an entire\n   extend block (possibly containing multiple extension definitions) will\n   have an outer location whose path refers to the \"extensions\" repeated\n   field without an index.\n - Multiple locations may have the same path.  This happens when a single\n   logical declaration is spread out across multiple places.  The most\n   obvious example is the \"extend\" block again -- there may be multiple\n   extend blocks in the same scope, each of which will have the same path.\n - A location's span is not always a subset of its parent's span.  For\n   example, the \"extendee\" of an extension declaration appears at the\n   beginning of the \"extend\" block and is shared by all extensions within\n   the block.\n - Just because a location's span is a subset of some other location's span\n   does not mean that it is a descendent.  For example, a \"group\" defines\n   both a type and a field in a single declaration.  Thus, the locations\n   corresponding to the type and field and their components will overlap.\n - Code which tries to interpret locations should probably be designed to\n   ignore those that it doesn't understand, as more types of locations could\n   be recorded in the future.\n" ), TrailingComments:nil, XXX_unrecognized:[]byte{}}
&google_protobuf.SourceCodeInfo_Location{Path:[]int32{4, 16, 3, 0, 2, 0}, Span:[]int32{528, 4, 44}, LeadingComments:func(v string) *string { return &v } ( " Identifies which part of the FileDescriptorProto was defined at this\n location.\n\n Each element is a field number or an index.  They form a path from\n the root FileDescriptorProto to the place where the definition.  For\n example, this path:\n   [ 4, 3, 2, 7, 1 ]\n refers to:\n   file.message_type(3)  // 4, 3\n       .field(7)         // 2, 7\n       .name()           // 1\n This is because FileDescriptorProto.message_type has field number 4:\n   repeated DescriptorProto message_type = 4;\n and DescriptorProto.field has field number 2:\n   repeated FieldDescriptorProto field = 2;\n and FieldDescriptorProto.name has field number 1:\n   optional string name = 1;\n\n Thus, the above path gives the location of a field name.  If we removed\n the last element:\n   [ 4, 3, 2, 7 ]\n this path refers to the whole field declaration (from the beginning\n of the label to the terminating semicolon).\n" ), TrailingComments:nil, XXX_unrecognized:[]byte{}}
&google_protobuf.SourceCodeInfo_Location{Path:[]int32{4, 16, 3, 0, 2, 1}, Span:[]int32{535, 4, 44}, LeadingComments:func(v string) *string { return &v } ( " Always has exactly three or four elements: start line, start column,\n end line (optional, otherwise assumed same as start line), end column.\n These are packed into a single field for efficiency.  Note that line\n and column numbers are zero-based -- typically you will want to add\n 1 to each before displaying to a user.\n" ), TrailingComments:nil, XXX_unrecognized:[]byte{}}
&google_protobuf.SourceCodeInfo_Location{Path:[]int32{4, 16, 3, 0, 2, 2}, Span:[]int32{571, 4, 41}, LeadingComments:func(v string) *string { return &v } ( " If this SourceCodeInfo represents a complete declaration, these are any\n comments appearing before and after the declaration which appear to be\n attached to the declaration.\n \n A series of line comments appearing on consecutive lines, with no other\n tokens appearing on those lines, will be treated as a single comment.\n \n Only the comment content is provided; comment markers (e.g. //) are\n stripped out.  For block comments, leading whitespace and an asterisk\n will be stripped from the beginning of each line other than the first.\n Newlines are included in the output.\n \n Examples:\n \n optional int32 foo = 1;  // Comment attached to foo.\n // Comment attached to bar.\n optional int32 bar = 2;\n \n optional string baz = 3;\n // Comment attached to baz.\n // Another line attached to baz.\n \n // Comment attached to qux.\n //\n // Another line attached to qux.\n optional double qux = 4;\n \n optional string corge = 5;\n /* Block comment attached\n * to corge.  Leading asterisks\n * will be removed. */\n /* Block comment attached to\n * grault. */\n optional int32 grault = 6;\n" ), TrailingComments:nil, XXX_unrecognized:[]byte{}}
&google_protobuf.SourceCodeInfo_Location{Path:[]int32{4, 0}, Span:[]int32{5, 0, 53, 1}, LeadingComments:func(v string) *string { return &v } ( " Outer message comment\n" ), TrailingComments:func(v string) *string { return &v } ( " Outer message trailing\n" ), XXX_unrecognized:[]byte{}}
&google_protobuf.SourceCodeInfo_Location{Path:[]int32{4, 0, 3, 0}, Span:[]int32{11, 8, 18, 9}, LeadingComments:func(v string) *string { return &v } ( " Leading group comment\n" ), TrailingComments:func(v string) *string { return &v } ( " trailing group comment\n" ), XXX_unrecognized:[]byte{}}
&google_protobuf.SourceCodeInfo_Location{Path:[]int32{4, 0, 3, 0, 2, 0}, Span:[]int32{15, 12, 38}, LeadingComments:func(v string) *string { return &v } ( " Group field comment\n" ), TrailingComments:nil, XXX_unrecognized:[]byte{}}
&google_protobuf.SourceCodeInfo_Location{Path:[]int32{4, 0, 3, 1}, Span:[]int32{24, 8, 44, 9}, LeadingComments:func(v string) *string { return &v } ( " nested message comment\n" ), TrailingComments:func(v string) *string { return &v } ( " nested message trailing comment\n" ), XXX_unrecognized:[]byte{}}
&google_protobuf.SourceCodeInfo_Location{Path:[]int32{4, 0, 3, 1, 3, 0}, Span:[]int32{29, 16, 42, 17}, LeadingComments:func(v string) *string { return &v } ( " nested deeper message comment\n" ), TrailingComments:func(v string) *string { return &v } ( " nested deeper trailing\n" ), XXX_unrecognized:[]byte{}}
&google_protobuf.SourceCodeInfo_Location{Path:[]int32{4, 0, 3, 1, 3, 0, 3, 0}, Span:[]int32{33, 6, 38, 7}, LeadingComments:func(v string) *string { return &v } ( " nested deeperer message comment\n" ), TrailingComments:func(v string) *string { return &v } ( " nested deeperer trailing\n" ), XXX_unrecognized:[]byte{}}
&google_protobuf.SourceCodeInfo_Location{Path:[]int32{4, 0, 3, 1, 3, 0, 3, 0, 2, 0}, Span:[]int32{37, 8, 37}, LeadingComments:func(v string) *string { return &v } ( " nested nested field comment\n" ), TrailingComments:nil, XXX_unrecognized:[]byte{}}
&google_protobuf.SourceCodeInfo_Location{Path:[]int32{4, 0, 3, 1, 3, 0, 2, 0}, Span:[]int32{41, 24, 53}, LeadingComments:func(v string) *string { return &v } ( " nested nested field comment\n" ), TrailingComments:nil, XXX_unrecognized:[]byte{}}
&google_protobuf.SourceCodeInfo_Location{Path:[]int32{4, 0, 3, 2}, Span:[]int32{47, 8, 52, 9}, LeadingComments:func(v string) *string { return &v } ( " second group comment\n" ), TrailingComments:func(v string) *string { return &v } ( " second group trailing\n" ), XXX_unrecognized:[]byte{}}
nestedMessageCommentsTest.proto <TEST PASSED>
&google_protobuf.SourceCodeInfo_Location{Path:[]int32{4, 0}, Span:[]int32{45, 0, 47, 1}, LeadingComments:func(v string) *string { return &v } ( " The protocol compiler can output a FileDescriptorSet containing the .proto\n files it parses.\n" ), TrailingComments:nil, XXX_unrecognized:[]byte{}}
&google_protobuf.SourceCodeInfo_Location{Path:[]int32{4, 1}, Span:[]int32{50, 0, 78, 1}, LeadingComments:func(v string) *string { return &v } ( " Describes a complete .proto file.\n" ), TrailingComments:nil, XXX_unrecognized:[]byte{}}
&google_protobuf.SourceCodeInfo_Location{Path:[]int32{4, 1, 2, 1}, Span:[]int32{53, 2, 30}, LeadingComments:func(v string) *string { return &v } ( " file name, relative to root of source tree\n" ), TrailingComments:func(v string) *string { return &v } ( " e.g. \"foo\", \"foo.bar\", etc.\n" ), XXX_unrecognized:[]byte{}}
&google_protobuf.SourceCodeInfo_Location{Path:[]int32{4, 1, 2, 2}, Span:[]int32{57, 2, 33}, LeadingComments:func(v string) *string { return &v } ( " Names of files imported by this file.\n" ), TrailingComments:nil, XXX_unrecognized:[]byte{}}
&google_protobuf.SourceCodeInfo_Location{Path:[]int32{4, 1, 2, 3}, Span:[]int32{60, 2, 40}, LeadingComments:func(v string) *string { return &v } ( " Indexes of the public imported files in the dependency list above.\n" ), TrailingComments:nil, XXX_unrecognized:[]byte{}}
&google_protobuf.SourceCodeInfo_Location{Path:[]int32{4, 1, 2, 4}, Span:[]int32{64, 2, 38}, LeadingComments:func(v string) *string { return &v } ( " Indexes of the weak imported files in the dependency list.\n For Google-internal migration only. Do not use.\n" ), TrailingComments:nil, XXX_unrecognized:[]byte{}}
&google_protobuf.SourceCodeInfo_Location{Path:[]int32{4, 1, 2, 5}, Span:[]int32{67, 2, 44}, LeadingComments:func(v string) *string { return &v } ( " All top-level definitions in this file.\n" ), TrailingComments:nil, XXX_unrecognized:[]byte{}}
&google_protobuf.SourceCodeInfo_Location{Path:[]int32{4, 1, 2, 10}, Span:[]int32{77, 2, 47}, LeadingComments:func(v string) *string { return &v } ( " This field contains optional information about the original source code.\n You may safely remove this entire field whithout harming runtime\n functionality of the descriptors -- the information is needed only by\n development tools.\n" ), TrailingComments:nil, XXX_unrecognized:[]byte{}}
&google_protobuf.SourceCodeInfo_Location{Path:[]int32{4, 2}, Span:[]int32{81, 0, 94, 1}, LeadingComments:func(v string) *string { return &v } ( " Describes a message type.\n" ), TrailingComments:nil, XXX_unrecognized:[]byte{}}
&google_protobuf.SourceCodeInfo_Location{Path:[]int32{4, 3}, Span:[]int32{97, 0, 168, 1}, LeadingComments:func(v string) *string { return &v } ( " Describes a field within a message.\n" ), TrailingComments:nil, XXX_unrecognized:[]byte{}}
&google_protobuf.SourceCodeInfo_Location{Path:[]int32{4, 3, 2, 3}, Span:[]int32{104, 2, 62}, LeadingComments:func(v string) *string { return &v } ( " If type_name is set, this need not be set.  If both this and type_name\n are set, this must be either TYPE_ENUM or TYPE_MESSAGE.\n" ), TrailingComments:nil, XXX_unrecognized:[]byte{}}
&google_protobuf.SourceCodeInfo_Location{Path:[]int32{4, 3, 2, 4}, Span:[]int32{111, 2, 32}, LeadingComments:func(v string) *string { return &v } ( " For message and enum types, this is the name of the type.  If the name\n starts with a '.', it is fully-qualified.  Otherwise, C++-like scoping\n rules are used to find the type (i.e. first the nested types within this\n message are searched, then within the parent, on up to the root\n namespace).\n" ), TrailingComments:nil, XXX_unrecognized:[]byte{}}
&google_protobuf.SourceCodeInfo_Location{Path:[]int32{4, 3, 2, 5}, Span:[]int32{115, 2, 31}, LeadingComments:func(v string) *string { return &v } ( " For extensions, this is the name of the type being extended.  It is\n resolved in the same manner as type_name.\n" ), TrailingComments:nil, XXX_unrecognized:[]byte{}}
&google_protobuf.SourceCodeInfo_Location{Path:[]int32{4, 3, 2, 6}, Span:[]int32{122, 2, 36}, LeadingComments:func(v string) *string { return &v } ( " For numeric types, contains the original text representation of the value.\n For booleans, \"true\" or \"false\".\n For strings, contains the default text contents (not escaped in any way).\n For bytes, contains the C escaped value.  All bytes >= 128 are escaped.\n TODO(kenton):  Base-64 encode?\n" ), TrailingComments:nil, XXX_unrecognized:[]byte{}}
&google_protobuf.SourceCodeInfo_Location{Path:[]int32{4, 3, 4, 0, 2, 0}, Span:[]int32{129, 4, 20}, LeadingComments:func(v string) *string { return &v } ( " 0 is reserved for errors.\n Order is weird for historical reasons.\n" ), TrailingComments:nil, XXX_unrecognized:[]byte{}}
&google_protobuf.SourceCodeInfo_Location{Path:[]int32{4, 3, 4, 0, 2, 2}, Span:[]int32{134, 4, 19}, LeadingComments:func(v string) *string { return &v } ( " Not ZigZag encoded.  Negative numbers take 10 bytes.  Use TYPE_SINT64 if\n negative values are likely.\n" ), TrailingComments:nil, XXX_unrecognized:[]byte{}}
&google_protobuf.SourceCodeInfo_Location{Path:[]int32{4, 3, 4, 0, 2, 4}, Span:[]int32{139, 4, 19}, LeadingComments:func(v string) *string { return &v } ( " Not ZigZag encoded.  Negative numbers take 10 bytes.  Use TYPE_SINT32 if\n negative values are likely.\n" ), TrailingComments:nil, XXX_unrecognized:[]byte{}}
&google_protobuf.SourceCodeInfo_Location{Path:[]int32{4, 3, 4, 0, 2, 10}, Span:[]int32{146, 4, 22}, LeadingComments:func(v string) *string { return &v } ( " Tag-delimited aggregate.\n" ), TrailingComments:func(v string) *string { return &v } ( " Length-delimited aggregate.\n" ), XXX_unrecognized:[]byte{}}
&google_protobuf.SourceCodeInfo_Location{Path:[]int32{4, 3, 4, 0, 2, 11}, Span:[]int32{150, 4, 20}, LeadingComments:func(v string) *string { return &v } ( " New in version 2.\n" ), TrailingComments:nil, XXX_unrecognized:[]byte{}}
&google_protobuf.SourceCodeInfo_Location{Path:[]int32{4, 3, 4, 0, 2, 17}, Span:[]int32{157, 4, 21}, LeadingComments:func(v string) *string { return &v } ( " Uses ZigZag encoding.\n" ), TrailingComments:func(v string) *string { return &v } ( " Uses ZigZag encoding.\n" ), XXX_unrecognized:[]byte{}}
&google_protobuf.SourceCodeInfo_Location{Path:[]int32{4, 3, 4, 1, 2, 0}, Span:[]int32{163, 4, 23}, LeadingComments:func(v string) *string { return &v } ( " 0 is reserved for errors\n" ), TrailingComments:nil, XXX_unrecognized:[]byte{}}
&google_protobuf.SourceCodeInfo_Location{Path:[]int32{4, 3, 4, 1, 2, 2}, Span:[]int32{165, 4, 23}, LeadingComments:nil, TrailingComments:func(v string) *string { return &v } ( " TODO(sanjay): Should we add LABEL_MAP?\n" ), XXX_unrecognized:[]byte{}}
&google_protobuf.SourceCodeInfo_Location{Path:[]int32{4, 4}, Span:[]int32{171, 0, 175, 1}, LeadingComments:func(v string) *string { return &v } ( " Describes an enum type.\n" ), TrailingComments:nil, XXX_unrecognized:[]byte{}}
&google_protobuf.SourceCodeInfo_Location{Path:[]int32{4, 5}, Span:[]int32{178, 0, 182, 1}, LeadingComments:func(v string) *string { return &v } ( " Describes a value within an enum.\n" ), TrailingComments:nil, XXX_unrecognized:[]byte{}}
&google_protobuf.SourceCodeInfo_Location{Path:[]int32{4, 6}, Span:[]int32{185, 0, 189, 1}, LeadingComments:func(v string) *string { return &v } ( " Describes a service.\n" ), TrailingComments:nil, XXX_unrecognized:[]byte{}}
&google_protobuf.SourceCodeInfo_Location{Path:[]int32{4, 7}, Span:[]int32{192, 0, 200, 1}, LeadingComments:func(v string) *string { return &v } ( " Describes a method of a service.\n" ), TrailingComments:nil, XXX_unrecognized:[]byte{}}
&google_protobuf.SourceCodeInfo_Location{Path:[]int32{4, 7, 2, 1}, Span:[]int32{197, 2, 33}, LeadingComments:func(v string) *string { return &v } ( " Input and output type names.  These are resolved in the same way as\n FieldDescriptorProto.type_name, but must refer to a message type.\n" ), TrailingComments:nil, XXX_unrecognized:[]byte{}}
&google_protobuf.SourceCodeInfo_Location{Path:[]int32{4, 8, 5}, Span:[]int32{205, 2, 25}, LeadingComments:func(v string) *string { return &v } ( " Clients can define custom options in extensions of this message. See above.\n" ), TrailingComments:nil, XXX_unrecognized:[]byte{}}
&google_protobuf.SourceCodeInfo_Location{Path:[]int32{4, 8, 2, 0}, Span:[]int32{211, 2, 35}, LeadingComments:func(v string) *string { return &v } ( " Sets the Java package where classes generated from this .proto will be\n placed.  By default, the proto package is used, but this is often\n inappropriate because proto packages do not normally start with backwards\n domain names.\n" ), TrailingComments:nil, XXX_unrecognized:[]byte{}}
&google_protobuf.SourceCodeInfo_Location{Path:[]int32{4, 8, 2, 1}, Span:[]int32{218, 2, 43}, LeadingComments:func(v string) *string { return &v } ( " If set, all the classes from the .proto file are wrapped in a single\n outer class with the given name.  This applies to both Proto1\n (equivalent to the old \"--one_java_file\" option) and Proto2 (where\n a .proto always translates to a single class, but you may want to\n explicitly choose the class name).\n" ), TrailingComments:nil, XXX_unrecognized:[]byte{}}
&google_protobuf.SourceCodeInfo_Location{Path:[]int32{4, 8, 2, 2}, Span:[]int32{226, 2, 41}, LeadingComments:func(v string) *string { return &v } ( " If set true, then the Java code generator will generate a separate .java\n file for each top-level message, enum, and service defined in the .proto\n file.  Thus, these types will *not* be nested inside the outer class\n named by java_outer_classname.  However, the outer class will still be\n generated to contain the file's getDescriptor() method as well as any\n top-level extensions defined in the file.\n" ), TrailingComments:nil, XXX_unrecognized:[]byte{}}
&google_protobuf.SourceCodeInfo_Location{Path:[]int32{4, 8, 2, 3}, Span:[]int32{232, 2, 51}, LeadingComments:func(v string) *string { return &v } ( " If set true, then the Java code generator will generate equals() and\n hashCode() methods for all messages defined in the .proto file. This is\n purely a speed optimization, as the AbstractMessage base class includes\n reflection-based implementations of these methods.\n" ), TrailingComments:nil, XXX_unrecognized:[]byte{}}
&google_protobuf.SourceCodeInfo_Location{Path:[]int32{4, 8, 2, 5}, Span:[]int32{237, 2, 34}, LeadingComments:func(v string) *string { return &v } ( " Sets the Go package where structs generated from this .proto will be\n placed.  There is no default.\n" ), TrailingComments:nil, XXX_unrecognized:[]byte{}}
&google_protobuf.SourceCodeInfo_Location{Path:[]int32{4, 8, 2, 6}, Span:[]int32{249, 2, 41}, LeadingComments:func(v string) *string { return &v } ( " Should generic services be generated in each language?  \"Generic\" services\n are not specific to any particular RPC system.  They are generated by the\n main code generators in each language (without additional plugins).\n Generic services were the only kind of service generation supported by\n early versions of proto2.\n\n Generic services are now considered deprecated in favor of using plugins\n that generate code specific to your particular RPC system.  Therefore,\n these default to false.  Old code which depends on generic services should\n explicitly set them to true.\n" ), TrailingComments:nil, XXX_unrecognized:[]byte{}}
&google_protobuf.SourceCodeInfo_Location{Path:[]int32{4, 8, 2, 9}, Span:[]int32{254, 2, 58}, LeadingComments:func(v string) *string { return &v } ( " The parser stores options it doesn't recognize here. See above.\n" ), TrailingComments:nil, XXX_unrecognized:[]byte{}}
&google_protobuf.SourceCodeInfo_Location{Path:[]int32{4, 8, 4, 0}, Span:[]int32{257, 2, 266, 3}, LeadingComments:func(v string) *string { return &v } ( " Generated classes can be optimized for speed or code size.\n" ), TrailingComments:nil, XXX_unrecognized:[]byte{}}
&google_protobuf.SourceCodeInfo_Location{Path:[]int32{4, 8, 4, 0, 2, 0}, Span:[]int32{258, 4, 14}, LeadingComments:nil, TrailingComments:func(v string) *string { return &v } ( " Generate complete code for parsing, serialization,\n" ), XXX_unrecognized:[]byte{}}
&google_protobuf.SourceCodeInfo_Location{Path:[]int32{4, 8, 4, 0, 2, 1}, Span:[]int32{262, 4, 18}, LeadingComments:func(v string) *string { return &v } ( " etc.\n" ), TrailingComments:nil, XXX_unrecognized:[]byte{}}
&google_protobuf.SourceCodeInfo_Location{Path:[]int32{4, 8, 4, 0, 2, 2}, Span:[]int32{264, 4, 21}, LeadingComments:func(v string) *string { return &v } ( " Use ReflectionOps to implement these methods.\n" ), TrailingComments:func(v string) *string { return &v } ( " Generate code using MessageLite and the lite runtime.\n" ), XXX_unrecognized:[]byte{}}
&google_protobuf.SourceCodeInfo_Location{Path:[]int32{4, 9, 5}, Span:[]int32{272, 2, 25}, LeadingComments:func(v string) *string { return &v } ( " Clients can define custom options in extensions of this message. See above.\n" ), TrailingComments:nil, XXX_unrecognized:[]byte{}}
&google_protobuf.SourceCodeInfo_Location{Path:[]int32{4, 9, 2, 0}, Span:[]int32{292, 2, 44}, LeadingComments:func(v string) *string { return &v } ( " Set true to use the old proto1 MessageSet wire format for extensions.\n This is provided for backwards-compatibility with the MessageSet wire\n format.  You should not use this for any other reason:  It's less\n efficient, has fewer features, and is more complicated.\n\n The message must be defined exactly as follows:\n   message Foo {\n     option message_set_wire_format = true;\n     extensions 4 to max;\n   }\n Note that the message cannot have any defined fields; MessageSets only\n have extensions.\n\n All extensions of your type must be singular messages; e.g. they cannot\n be int32s, enums, or repeated messages.\n\n Because this is an option, the above two restrictions are not enforced by\n the protocol compiler.\n" ), TrailingComments:nil, XXX_unrecognized:[]byte{}}
&google_protobuf.SourceCodeInfo_Location{Path:[]int32{4, 9, 2, 1}, Span:[]int32{297, 2, 52}, LeadingComments:func(v string) *string { return &v } ( " Disables the generation of the standard \"descriptor()\" accessor, which can\n conflict with a field of the same name.  This is meant to make migration\n from proto1 easier; new code should avoid fields named \"descriptor\".\n" ), TrailingComments:nil, XXX_unrecognized:[]byte{}}
&google_protobuf.SourceCodeInfo_Location{Path:[]int32{4, 9, 2, 2}, Span:[]int32{300, 2, 58}, LeadingComments:func(v string) *string { return &v } ( " The parser stores options it doesn't recognize here. See above.\n" ), TrailingComments:nil, XXX_unrecognized:[]byte{}}
&google_protobuf.SourceCodeInfo_Location{Path:[]int32{4, 10, 5}, Span:[]int32{306, 2, 25}, LeadingComments:func(v string) *string { return &v } ( " Clients can define custom options in extensions of this message. See above.\n" ), TrailingComments:nil, XXX_unrecognized:[]byte{}}
&google_protobuf.SourceCodeInfo_Location{Path:[]int32{4, 10, 2, 0}, Span:[]int32{312, 2, 56}, LeadingComments:func(v string) *string { return &v } ( " The ctype option instructs the C++ code generator to use a different\n representation of the field than it normally would.  See the specific\n options below.  This option is not yet implemented in the open source\n release -- sorry, we'll try to include it in a future version!\n" ), TrailingComments:nil, XXX_unrecognized:[]byte{}}
&google_protobuf.SourceCodeInfo_Location{Path:[]int32{4, 10, 2, 1}, Span:[]int32{318, 2, 27}, LeadingComments:func(v string) *string { return &v } ( " The packed option can be enabled for repeated primitive fields to enable\n a more efficient representation on the wire. Rather than repeatedly\n writing the tag and type for each element, the entire array is encoded as\n a single length-delimited blob.\n" ), TrailingComments:nil, XXX_unrecognized:[]byte{}}
&google_protobuf.SourceCodeInfo_Location{Path:[]int32{4, 10, 2, 2}, Span:[]int32{348, 2, 25}, LeadingComments:func(v string) *string { return &v } ( " Should this field be parsed lazily?  Lazy applies only to message-type\n fields.  It means that when the outer message is initially parsed, the\n inner message's contents will not be parsed but instead stored in encoded\n form.  The inner message will actually be parsed when it is first accessed.\n\n This is only a hint.  Implementations are free to choose whether to use\n eager or lazy parsing regardless of the value of this option.  However,\n setting this option true suggests that the protocol author believes that\n using lazy parsing on this field is worth the additional bookkeeping\n overhead typically needed to implement it.\n\n This option does not affect the public interface of any generated code;\n all method signatures remain the same.  Furthermore, thread-safety of the\n interface is not affected by this option; const methods remain safe to\n call from multiple threads concurrently, while non-const methods continue\n to require exclusive access.\n\n\n Note that implementations may choose not to check required fields within\n a lazy sub-message.  That is, calling IsInitialized() on the outher message\n may return true even if the inner message has missing required fields.\n This is necessary because otherwise the inner message would have to be\n parsed in order to perform the check, defeating the purpose of lazy\n parsing.  An implementation which chooses not to check required fields\n must be consistent about it.  That is, for any particular sub-message, the\n implementation must either *always* check its required fields, or *never*\n check its required fields, regardless of whether or not the message has\n been parsed.\n" ), TrailingComments:nil, XXX_unrecognized:[]byte{}}
&google_protobuf.SourceCodeInfo_Location{Path:[]int32{4, 10, 2, 3}, Span:[]int32{354, 2, 31}, LeadingComments:func(v string) *string { return &v } ( " Is this field deprecated?\n Depending on the target platform, this can emit Deprecated annotations\n for accessors, or it will be completely ignored; in the very least, this\n is a formalization for deprecating fields.\n" ), TrailingComments:nil, XXX_unrecognized:[]byte{}}
&google_protobuf.SourceCodeInfo_Location{Path:[]int32{4, 10, 2, 4}, Span:[]int32{368, 2, 43}, LeadingComments:func(v string) *string { return &v } ( " EXPERIMENTAL.  DO NOT USE.\n For \"map\" fields, the name of the field in the enclosed type that\n is the key for this map.  For example, suppose we have:\n   message Item {\n     required string name = 1;\n     required string value = 2;\n   }\n   message Config {\n     repeated Item items = 1 [experimental_map_key=\"name\"];\n   }\n In this situation, the map key for Item will be set to \"name\".\n TODO: Fully-implement this, then remove the \"experimental_\" prefix.\n" ), TrailingComments:nil, XXX_unrecognized:[]byte{}}
&google_protobuf.SourceCodeInfo_Location{Path:[]int32{4, 10, 2, 5}, Span:[]int32{371, 2, 26}, LeadingComments:func(v string) *string { return &v } ( " For Google-internal migration only. Do not use.\n" ), TrailingComments:nil, XXX_unrecognized:[]byte{}}
&google_protobuf.SourceCodeInfo_Location{Path:[]int32{4, 10, 2, 6}, Span:[]int32{374, 2, 58}, LeadingComments:func(v string) *string { return &v } ( " The parser stores options it doesn't recognize here. See above.\n" ), TrailingComments:nil, XXX_unrecognized:[]byte{}}
&google_protobuf.SourceCodeInfo_Location{Path:[]int32{4, 10, 4, 0, 2, 0}, Span:[]int32{379, 4, 15}, LeadingComments:func(v string) *string { return &v } ( " Default mode.\n" ), TrailingComments:nil, XXX_unrecognized:[]byte{}}
&google_protobuf.SourceCodeInfo_Location{Path:[]int32{4, 11, 5}, Span:[]int32{388, 2, 25}, LeadingComments:func(v string) *string { return &v } ( " Clients can define custom options in extensions of this message. See above.\n" ), TrailingComments:nil, XXX_unrecognized:[]byte{}}
&google_protobuf.SourceCodeInfo_Location{Path:[]int32{4, 11, 2, 0}, Span:[]int32{392, 2, 32}, LeadingComments:func(v string) *string { return &v } ( " Set this option to false to disallow mapping different tag names to a same\n value.\n" ), TrailingComments:nil, XXX_unrecognized:[]byte{}}
&google_protobuf.SourceCodeInfo_Location{Path:[]int32{4, 11, 2, 1}, Span:[]int32{395, 2, 58}, LeadingComments:func(v string) *string { return &v } ( " The parser stores options it doesn't recognize here. See above.\n" ), TrailingComments:nil, XXX_unrecognized:[]byte{}}
&google_protobuf.SourceCodeInfo_Location{Path:[]int32{4, 12, 5}, Span:[]int32{401, 2, 25}, LeadingComments:func(v string) *string { return &v } ( " Clients can define custom options in extensions of this message. See above.\n" ), TrailingComments:nil, XXX_unrecognized:[]byte{}}
&google_protobuf.SourceCodeInfo_Location{Path:[]int32{4, 12, 2, 0}, Span:[]int32{404, 2, 58}, LeadingComments:func(v string) *string { return &v } ( " The parser stores options it doesn't recognize here. See above.\n" ), TrailingComments:nil, XXX_unrecognized:[]byte{}}
&google_protobuf.SourceCodeInfo_Location{Path:[]int32{4, 13, 5}, Span:[]int32{410, 2, 25}, LeadingComments:func(v string) *string { return &v } ( " Clients can define custom options in extensions of this message. See above.\n" ), TrailingComments:nil, XXX_unrecognized:[]byte{}}
&google_protobuf.SourceCodeInfo_Location{Path:[]int32{4, 13, 2, 0}, Span:[]int32{413, 2, 58}, LeadingComments:func(v string) *string { return &v } ( " The parser stores options it doesn't recognize here. See above.\n" ), TrailingComments:nil, XXX_unrecognized:[]byte{}}
&google_protobuf.SourceCodeInfo_Location{Path:[]int32{4, 14, 5}, Span:[]int32{419, 2, 25}, LeadingComments:func(v string) *string { return &v } ( " Clients can define custom options in extensions of this message. See above.\n" ), TrailingComments:nil, XXX_unrecognized:[]byte{}}
&google_protobuf.SourceCodeInfo_Location{Path:[]int32{4, 14, 2, 0}, Span:[]int32{422, 2, 58}, LeadingComments:func(v string) *string { return &v } ( " The parser stores options it doesn't recognize here. See above.\n" ), TrailingComments:nil, XXX_unrecognized:[]byte{}}
&google_protobuf.SourceCodeInfo_Location{Path:[]int32{4, 15}, Span:[]int32{431, 0, 452, 1}, LeadingComments:func(v string) *string { return &v } ( " A message representing a option the parser does not recognize. This only\n appears in options protos created by the compiler::Parser class.\n DescriptorPool resolves these when building Descriptor objects. Therefore,\n options protos in descriptor objects (e.g. returned by Descriptor::options(),\n or produced by Descriptor::CopyTo()) will never have UninterpretedOptions\n in them.\n" ), TrailingComments:nil, XXX_unrecognized:[]byte{}}
&google_protobuf.SourceCodeInfo_Location{Path:[]int32{4, 15, 2, 1}, Span:[]int32{436, 2, 39}, LeadingComments:func(v string) *string { return &v } ( " The value of the uninterpreted option, in whatever type the tokenizer\n identified it as during parsing. Exactly one of these should be set.\n" ), TrailingComments:nil, XXX_unrecognized:[]byte{}}
&google_protobuf.SourceCodeInfo_Location{Path:[]int32{4, 15, 3, 0}, Span:[]int32{448, 2, 451, 3}, LeadingComments:func(v string) *string { return &v } ( " The name of the uninterpreted option.  Each string represents a segment in\n a dot-separated name.  is_extension is true iff a segment represents an\n extension (denoted with parentheses in options specs in .proto files).\n E.g.,{ [\"foo\", false], [\"bar.baz\", true], [\"qux\", false] } represents\n \"foo.(bar.baz).qux\".\n" ), TrailingComments:nil, XXX_unrecognized:[]byte{}}
&google_protobuf.SourceCodeInfo_Location{Path:[]int32{4, 16}, Span:[]int32{456, 0, 574, 1}, LeadingComments:func(v string) *string { return &v } ( " Encapsulates information about the original source file from which a\n FileDescriptorProto was generated.\n" ), TrailingComments:nil, XXX_unrecognized:[]byte{}}
&google_protobuf.SourceCodeInfo_Location{Path:[]int32{4, 16, 2, 0}, Span:[]int32{501, 2, 64}, LeadingComments:func(v string) *string { return &v } ( " A Location identifies a piece of source code in a .proto file which\n corresponds to a particular definition.  This information is intended\n to be useful to IDEs, code indexers, documentation generators, and similar\n tools.\n\n For example, say we have a file like:\n   message Foo {\n     optional string foo = 1;\n   }\n Let's look at just the field definition:\n   optional string foo = 1;\n   ^       ^^     ^^  ^  ^^^\n   a       bc     de  f  ghi\n We have the following locations:\n   span   path               represents\n   [a,i)  [ 4, 0, 2, 0 ]     The whole field definition.\n   [a,b)  [ 4, 0, 2, 0, 4 ]  The label (optional).\n   [c,d)  [ 4, 0, 2, 0, 5 ]  The type (string).\n   [e,f)  [ 4, 0, 2, 0, 1 ]  The name (foo).\n   [g,h)  [ 4, 0, 2, 0, 3 ]  The number (1).\n\n Notes:\n - A location may refer to a repeated field itself (i.e. not to any\n   particular index within it).  This is used whenever a set of elements are\n   logically enclosed in a single code segment.  For example, an entire\n   extend block (possibly containing multiple extension definitions) will\n   have an outer location whose path refers to the \"extensions\" repeated\n   field without an index.\n - Multiple locations may have the same path.  This happens when a single\n   logical declaration is spread out across multiple places.  The most\n   obvious example is the \"extend\" block again -- there may be multiple\n   extend blocks in the same scope, each of which will have the same path.\n - A location's span is not always a subset of its parent's span.  For\n   example, the \"extendee\" of an extension declaration appears at the\n   beginning of the \"extend\" block and is shared by all extensions within\n   the block.\n - Just because a location's span is a subset of some other location's span\n   does not mean that it is a descendent.  For example, a \"group\" defines\n   both a type and a field in a single declaration.  Thus, the locations\n   corresponding to the type and field and their components will overlap.\n - Code which tries to interpret locations should probably be designed to\n   ignore those that it doesn't understand, as more types of locations could\n   be recorded in the future.\n" ), TrailingComments:nil, XXX_unrecognized:[]byte{}}
&google_protobuf.SourceCodeInfo_Location{Path:[]int32{4, 16, 3, 0, 2, 0}, Span:[]int32{528, 4, 44}, LeadingComments:func(v string) *string { return &v } ( " Identifies which part of the FileDescriptorProto was defined at this\n location.\n\n Each element is a field number or an index.  They form a path from\n the root FileDescriptorProto to the place where the definition.  For\n example, this path:\n   [ 4, 3, 2, 7, 1 ]\n refers to:\n   file.message_type(3)  // 4, 3\n       .field(7)         // 2, 7\n       .name()           // 1\n This is because FileDescriptorProto.message_type has field number 4:\n   repeated DescriptorProto message_type = 4;\n and DescriptorProto.field has field number 2:\n   repeated FieldDescriptorProto field = 2;\n and FieldDescriptorProto.name has field number 1:\n   optional string name = 1;\n\n Thus, the above path gives the location of a field name.  If we removed\n the last element:\n   [ 4, 3, 2, 7 ]\n this path refers to the whole field declaration (from the beginning\n of the label to the terminating semicolon).\n" ), TrailingComments:nil, XXX_unrecognized:[]byte{}}
&google_protobuf.SourceCodeInfo_Location{Path:[]int32{4, 16, 3, 0, 2, 1}, Span:[]int32{535, 4, 44}, LeadingComments:func(v string) *string { return &v } ( " Always has exactly three or four elements: start line, start column,\n end line (optional, otherwise assumed same as start line), end column.\n These are packed into a single field for efficiency.  Note that line\n and column numbers are zero-based -- typically you will want to add\n 1 to each before displaying to a user.\n" ), TrailingComments:nil, XXX_unrecognized:[]byte{}}
&google_protobuf.SourceCodeInfo_Location{Path:[]int32{4, 16, 3, 0, 2, 2}, Span:[]int32{571, 4, 41}, LeadingComments:func(v string) *string { return &v } ( " If this SourceCodeInfo represents a complete declaration, these are any\n comments appearing before and after the declaration which appear to be\n attached to the declaration.\n \n A series of line comments appearing on consecutive lines, with no other\n tokens appearing on those lines, will be treated as a single comment.\n \n Only the comment content is provided; comment markers (e.g. //) are\n stripped out.  For block comments, leading whitespace and an asterisk\n will be stripped from the beginning of each line other than the first.\n Newlines are included in the output.\n \n Examples:\n \n optional int32 foo = 1;  // Comment attached to foo.\n // Comment attached to bar.\n optional int32 bar = 2;\n \n optional string baz = 3;\n // Comment attached to baz.\n // Another line attached to baz.\n \n // Comment attached to qux.\n //\n // Another line attached to qux.\n optional double qux = 4;\n \n optional string corge = 5;\n /* Block comment attached\n * to corge.  Leading asterisks\n * will be removed. */\n /* Block comment attached to\n * grault. */\n optional int32 grault = 6;\n" ), TrailingComments:nil, XXX_unrecognized:[]byte{}}
&google_protobuf.SourceCodeInfo_Location{Path:[]int32{8, 999, 2}, Span:[]int32{7, 0, 39}, LeadingComments:func(v string) *string { return &v } ( " Comment before option\n" ), TrailingComments:func(v string) *string { return &v } ( " Comment after option\n" ), XXX_unrecognized:[]byte{}}
optionCorrectlyFormattedTest.proto <TEST PASSED>
&google_protobuf.SourceCodeInfo_Location{Path:[]int32{4, 0}, Span:[]int32{45, 0, 47, 1}, LeadingComments:func(v string) *string { return &v } ( " The protocol compiler can output a FileDescriptorSet containing the .proto\n files it parses.\n" ), TrailingComments:nil, XXX_unrecognized:[]byte{}}
&google_protobuf.SourceCodeInfo_Location{Path:[]int32{4, 1}, Span:[]int32{50, 0, 78, 1}, LeadingComments:func(v string) *string { return &v } ( " Describes a complete .proto file.\n" ), TrailingComments:nil, XXX_unrecognized:[]byte{}}
&google_protobuf.SourceCodeInfo_Location{Path:[]int32{4, 1, 2, 1}, Span:[]int32{53, 2, 30}, LeadingComments:func(v string) *string { return &v } ( " file name, relative to root of source tree\n" ), TrailingComments:func(v string) *string { return &v } ( " e.g. \"foo\", \"foo.bar\", etc.\n" ), XXX_unrecognized:[]byte{}}
&google_protobuf.SourceCodeInfo_Location{Path:[]int32{4, 1, 2, 2}, Span:[]int32{57, 2, 33}, LeadingComments:func(v string) *string { return &v } ( " Names of files imported by this file.\n" ), TrailingComments:nil, XXX_unrecognized:[]byte{}}
&google_protobuf.SourceCodeInfo_Location{Path:[]int32{4, 1, 2, 3}, Span:[]int32{60, 2, 40}, LeadingComments:func(v string) *string { return &v } ( " Indexes of the public imported files in the dependency list above.\n" ), TrailingComments:nil, XXX_unrecognized:[]byte{}}
&google_protobuf.SourceCodeInfo_Location{Path:[]int32{4, 1, 2, 4}, Span:[]int32{64, 2, 38}, LeadingComments:func(v string) *string { return &v } ( " Indexes of the weak imported files in the dependency list.\n For Google-internal migration only. Do not use.\n" ), TrailingComments:nil, XXX_unrecognized:[]byte{}}
&google_protobuf.SourceCodeInfo_Location{Path:[]int32{4, 1, 2, 5}, Span:[]int32{67, 2, 44}, LeadingComments:func(v string) *string { return &v } ( " All top-level definitions in this file.\n" ), TrailingComments:nil, XXX_unrecognized:[]byte{}}
&google_protobuf.SourceCodeInfo_Location{Path:[]int32{4, 1, 2, 10}, Span:[]int32{77, 2, 47}, LeadingComments:func(v string) *string { return &v } ( " This field contains optional information about the original source code.\n You may safely remove this entire field whithout harming runtime\n functionality of the descriptors -- the information is needed only by\n development tools.\n" ), TrailingComments:nil, XXX_unrecognized:[]byte{}}
&google_protobuf.SourceCodeInfo_Location{Path:[]int32{4, 2}, Span:[]int32{81, 0, 94, 1}, LeadingComments:func(v string) *string { return &v } ( " Describes a message type.\n" ), TrailingComments:nil, XXX_unrecognized:[]byte{}}
&google_protobuf.SourceCodeInfo_Location{Path:[]int32{4, 3}, Span:[]int32{97, 0, 168, 1}, LeadingComments:func(v string) *string { return &v } ( " Describes a field within a message.\n" ), TrailingComments:nil, XXX_unrecognized:[]byte{}}
&google_protobuf.SourceCodeInfo_Location{Path:[]int32{4, 3, 2, 3}, Span:[]int32{104, 2, 62}, LeadingComments:func(v string) *string { return &v } ( " If type_name is set, this need not be set.  If both this and type_name\n are set, this must be either TYPE_ENUM or TYPE_MESSAGE.\n" ), TrailingComments:nil, XXX_unrecognized:[]byte{}}
&google_protobuf.SourceCodeInfo_Location{Path:[]int32{4, 3, 2, 4}, Span:[]int32{111, 2, 32}, LeadingComments:func(v string) *string { return &v } ( " For message and enum types, this is the name of the type.  If the name\n starts with a '.', it is fully-qualified.  Otherwise, C++-like scoping\n rules are used to find the type (i.e. first the nested types within this\n message are searched, then within the parent, on up to the root\n namespace).\n" ), TrailingComments:nil, XXX_unrecognized:[]byte{}}
&google_protobuf.SourceCodeInfo_Location{Path:[]int32{4, 3, 2, 5}, Span:[]int32{115, 2, 31}, LeadingComments:func(v string) *string { return &v } ( " For extensions, this is the name of the type being extended.  It is\n resolved in the same manner as type_name.\n" ), TrailingComments:nil, XXX_unrecognized:[]byte{}}
&google_protobuf.SourceCodeInfo_Location{Path:[]int32{4, 3, 2, 6}, Span:[]int32{122, 2, 36}, LeadingComments:func(v string) *string { return &v } ( " For numeric types, contains the original text representation of the value.\n For booleans, \"true\" or \"false\".\n For strings, contains the default text contents (not escaped in any way).\n For bytes, contains the C escaped value.  All bytes >= 128 are escaped.\n TODO(kenton):  Base-64 encode?\n" ), TrailingComments:nil, XXX_unrecognized:[]byte{}}
&google_protobuf.SourceCodeInfo_Location{Path:[]int32{4, 3, 4, 0, 2, 0}, Span:[]int32{129, 4, 20}, LeadingComments:func(v string) *string { return &v } ( " 0 is reserved for errors.\n Order is weird for historical reasons.\n" ), TrailingComments:nil, XXX_unrecognized:[]byte{}}
&google_protobuf.SourceCodeInfo_Location{Path:[]int32{4, 3, 4, 0, 2, 2}, Span:[]int32{134, 4, 19}, LeadingComments:func(v string) *string { return &v } ( " Not ZigZag encoded.  Negative numbers take 10 bytes.  Use TYPE_SINT64 if\n negative values are likely.\n" ), TrailingComments:nil, XXX_unrecognized:[]byte{}}
&google_protobuf.SourceCodeInfo_Location{Path:[]int32{4, 3, 4, 0, 2, 4}, Span:[]int32{139, 4, 19}, LeadingComments:func(v string) *string { return &v } ( " Not ZigZag encoded.  Negative numbers take 10 bytes.  Use TYPE_SINT32 if\n negative values are likely.\n" ), TrailingComments:nil, XXX_unrecognized:[]byte{}}
&google_protobuf.SourceCodeInfo_Location{Path:[]int32{4, 3, 4, 0, 2, 10}, Span:[]int32{146, 4, 22}, LeadingComments:func(v string) *string { return &v } ( " Tag-delimited aggregate.\n" ), TrailingComments:func(v string) *string { return &v } ( " Length-delimited aggregate.\n" ), XXX_unrecognized:[]byte{}}
&google_protobuf.SourceCodeInfo_Location{Path:[]int32{4, 3, 4, 0, 2, 11}, Span:[]int32{150, 4, 20}, LeadingComments:func(v string) *string { return &v } ( " New in version 2.\n" ), TrailingComments:nil, XXX_unrecognized:[]byte{}}
&google_protobuf.SourceCodeInfo_Location{Path:[]int32{4, 3, 4, 0, 2, 17}, Span:[]int32{157, 4, 21}, LeadingComments:func(v string) *string { return &v } ( " Uses ZigZag encoding.\n" ), TrailingComments:func(v string) *string { return &v } ( " Uses ZigZag encoding.\n" ), XXX_unrecognized:[]byte{}}
&google_protobuf.SourceCodeInfo_Location{Path:[]int32{4, 3, 4, 1, 2, 0}, Span:[]int32{163, 4, 23}, LeadingComments:func(v string) *string { return &v } ( " 0 is reserved for errors\n" ), TrailingComments:nil, XXX_unrecognized:[]byte{}}
&google_protobuf.SourceCodeInfo_Location{Path:[]int32{4, 3, 4, 1, 2, 2}, Span:[]int32{165, 4, 23}, LeadingComments:nil, TrailingComments:func(v string) *string { return &v } ( " TODO(sanjay): Should we add LABEL_MAP?\n" ), XXX_unrecognized:[]byte{}}
&google_protobuf.SourceCodeInfo_Location{Path:[]int32{4, 4}, Span:[]int32{171, 0, 175, 1}, LeadingComments:func(v string) *string { return &v } ( " Describes an enum type.\n" ), TrailingComments:nil, XXX_unrecognized:[]byte{}}
&google_protobuf.SourceCodeInfo_Location{Path:[]int32{4, 5}, Span:[]int32{178, 0, 182, 1}, LeadingComments:func(v string) *string { return &v } ( " Describes a value within an enum.\n" ), TrailingComments:nil, XXX_unrecognized:[]byte{}}
&google_protobuf.SourceCodeInfo_Location{Path:[]int32{4, 6}, Span:[]int32{185, 0, 189, 1}, LeadingComments:func(v string) *string { return &v } ( " Describes a service.\n" ), TrailingComments:nil, XXX_unrecognized:[]byte{}}
&google_protobuf.SourceCodeInfo_Location{Path:[]int32{4, 7}, Span:[]int32{192, 0, 200, 1}, LeadingComments:func(v string) *string { return &v } ( " Describes a method of a service.\n" ), TrailingComments:nil, XXX_unrecognized:[]byte{}}
&google_protobuf.SourceCodeInfo_Location{Path:[]int32{4, 7, 2, 1}, Span:[]int32{197, 2, 33}, LeadingComments:func(v string) *string { return &v } ( " Input and output type names.  These are resolved in the same way as\n FieldDescriptorProto.type_name, but must refer to a message type.\n" ), TrailingComments:nil, XXX_unrecognized:[]byte{}}
&google_protobuf.SourceCodeInfo_Location{Path:[]int32{4, 8, 5}, Span:[]int32{205, 2, 25}, LeadingComments:func(v string) *string { return &v } ( " Clients can define custom options in extensions of this message. See above.\n" ), TrailingComments:nil, XXX_unrecognized:[]byte{}}
&google_protobuf.SourceCodeInfo_Location{Path:[]int32{4, 8, 2, 0}, Span:[]int32{211, 2, 35}, LeadingComments:func(v string) *string { return &v } ( " Sets the Java package where classes generated from this .proto will be\n placed.  By default, the proto package is used, but this is often\n inappropriate because proto packages do not normally start with backwards\n domain names.\n" ), TrailingComments:nil, XXX_unrecognized:[]byte{}}
&google_protobuf.SourceCodeInfo_Location{Path:[]int32{4, 8, 2, 1}, Span:[]int32{218, 2, 43}, LeadingComments:func(v string) *string { return &v } ( " If set, all the classes from the .proto file are wrapped in a single\n outer class with the given name.  This applies to both Proto1\n (equivalent to the old \"--one_java_file\" option) and Proto2 (where\n a .proto always translates to a single class, but you may want to\n explicitly choose the class name).\n" ), TrailingComments:nil, XXX_unrecognized:[]byte{}}
&google_protobuf.SourceCodeInfo_Location{Path:[]int32{4, 8, 2, 2}, Span:[]int32{226, 2, 41}, LeadingComments:func(v string) *string { return &v } ( " If set true, then the Java code generator will generate a separate .java\n file for each top-level message, enum, and service defined in the .proto\n file.  Thus, these types will *not* be nested inside the outer class\n named by java_outer_classname.  However, the outer class will still be\n generated to contain the file's getDescriptor() method as well as any\n top-level extensions defined in the file.\n" ), TrailingComments:nil, XXX_unrecognized:[]byte{}}
&google_protobuf.SourceCodeInfo_Location{Path:[]int32{4, 8, 2, 3}, Span:[]int32{232, 2, 51}, LeadingComments:func(v string) *string { return &v } ( " If set true, then the Java code generator will generate equals() and\n hashCode() methods for all messages defined in the .proto file. This is\n purely a speed optimization, as the AbstractMessage base class includes\n reflection-based implementations of these methods.\n" ), TrailingComments:nil, XXX_unrecognized:[]byte{}}
&google_protobuf.SourceCodeInfo_Location{Path:[]int32{4, 8, 2, 5}, Span:[]int32{237, 2, 34}, LeadingComments:func(v string) *string { return &v } ( " Sets the Go package where structs generated from this .proto will be\n placed.  There is no default.\n" ), TrailingComments:nil, XXX_unrecognized:[]byte{}}
&google_protobuf.SourceCodeInfo_Location{Path:[]int32{4, 8, 2, 6}, Span:[]int32{249, 2, 41}, LeadingComments:func(v string) *string { return &v } ( " Should generic services be generated in each language?  \"Generic\" services\n are not specific to any particular RPC system.  They are generated by the\n main code generators in each language (without additional plugins).\n Generic services were the only kind of service generation supported by\n early versions of proto2.\n\n Generic services are now considered deprecated in favor of using plugins\n that generate code specific to your particular RPC system.  Therefore,\n these default to false.  Old code which depends on generic services should\n explicitly set them to true.\n" ), TrailingComments:nil, XXX_unrecognized:[]byte{}}
&google_protobuf.SourceCodeInfo_Location{Path:[]int32{4, 8, 2, 9}, Span:[]int32{254, 2, 58}, LeadingComments:func(v string) *string { return &v } ( " The parser stores options it doesn't recognize here. See above.\n" ), TrailingComments:nil, XXX_unrecognized:[]byte{}}
&google_protobuf.SourceCodeInfo_Location{Path:[]int32{4, 8, 4, 0}, Span:[]int32{257, 2, 266, 3}, LeadingComments:func(v string) *string { return &v } ( " Generated classes can be optimized for speed or code size.\n" ), TrailingComments:nil, XXX_unrecognized:[]byte{}}
&google_protobuf.SourceCodeInfo_Location{Path:[]int32{4, 8, 4, 0, 2, 0}, Span:[]int32{258, 4, 14}, LeadingComments:nil, TrailingComments:func(v string) *string { return &v } ( " Generate complete code for parsing, serialization,\n" ), XXX_unrecognized:[]byte{}}
&google_protobuf.SourceCodeInfo_Location{Path:[]int32{4, 8, 4, 0, 2, 1}, Span:[]int32{262, 4, 18}, LeadingComments:func(v string) *string { return &v } ( " etc.\n" ), TrailingComments:nil, XXX_unrecognized:[]byte{}}
&google_protobuf.SourceCodeInfo_Location{Path:[]int32{4, 8, 4, 0, 2, 2}, Span:[]int32{264, 4, 21}, LeadingComments:func(v string) *string { return &v } ( " Use ReflectionOps to implement these methods.\n" ), TrailingComments:func(v string) *string { return &v } ( " Generate code using MessageLite and the lite runtime.\n" ), XXX_unrecognized:[]byte{}}
&google_protobuf.SourceCodeInfo_Location{Path:[]int32{4, 9, 5}, Span:[]int32{272, 2, 25}, LeadingComments:func(v string) *string { return &v } ( " Clients can define custom options in extensions of this message. See above.\n" ), TrailingComments:nil, XXX_unrecognized:[]byte{}}
&google_protobuf.SourceCodeInfo_Location{Path:[]int32{4, 9, 2, 0}, Span:[]int32{292, 2, 44}, LeadingComments:func(v string) *string { return &v } ( " Set true to use the old proto1 MessageSet wire format for extensions.\n This is provided for backwards-compatibility with the MessageSet wire\n format.  You should not use this for any other reason:  It's less\n efficient, has fewer features, and is more complicated.\n\n The message must be defined exactly as follows:\n   message Foo {\n     option message_set_wire_format = true;\n     extensions 4 to max;\n   }\n Note that the message cannot have any defined fields; MessageSets only\n have extensions.\n\n All extensions of your type must be singular messages; e.g. they cannot\n be int32s, enums, or repeated messages.\n\n Because this is an option, the above two restrictions are not enforced by\n the protocol compiler.\n" ), TrailingComments:nil, XXX_unrecognized:[]byte{}}
&google_protobuf.SourceCodeInfo_Location{Path:[]int32{4, 9, 2, 1}, Span:[]int32{297, 2, 52}, LeadingComments:func(v string) *string { return &v } ( " Disables the generation of the standard \"descriptor()\" accessor, which can\n conflict with a field of the same name.  This is meant to make migration\n from proto1 easier; new code should avoid fields named \"descriptor\".\n" ), TrailingComments:nil, XXX_unrecognized:[]byte{}}
&google_protobuf.SourceCodeInfo_Location{Path:[]int32{4, 9, 2, 2}, Span:[]int32{300, 2, 58}, LeadingComments:func(v string) *string { return &v } ( " The parser stores options it doesn't recognize here. See above.\n" ), TrailingComments:nil, XXX_unrecognized:[]byte{}}
&google_protobuf.SourceCodeInfo_Location{Path:[]int32{4, 10, 5}, Span:[]int32{306, 2, 25}, LeadingComments:func(v string) *string { return &v } ( " Clients can define custom options in extensions of this message. See above.\n" ), TrailingComments:nil, XXX_unrecognized:[]byte{}}
&google_protobuf.SourceCodeInfo_Location{Path:[]int32{4, 10, 2, 0}, Span:[]int32{312, 2, 56}, LeadingComments:func(v string) *string { return &v } ( " The ctype option instructs the C++ code generator to use a different\n representation of the field than it normally would.  See the specific\n options below.  This option is not yet implemented in the open source\n release -- sorry, we'll try to include it in a future version!\n" ), TrailingComments:nil, XXX_unrecognized:[]byte{}}
&google_protobuf.SourceCodeInfo_Location{Path:[]int32{4, 10, 2, 1}, Span:[]int32{318, 2, 27}, LeadingComments:func(v string) *string { return &v } ( " The packed option can be enabled for repeated primitive fields to enable\n a more efficient representation on the wire. Rather than repeatedly\n writing the tag and type for each element, the entire array is encoded as\n a single length-delimited blob.\n" ), TrailingComments:nil, XXX_unrecognized:[]byte{}}
&google_protobuf.SourceCodeInfo_Location{Path:[]int32{4, 10, 2, 2}, Span:[]int32{348, 2, 25}, LeadingComments:func(v string) *string { return &v } ( " Should this field be parsed lazily?  Lazy applies only to message-type\n fields.  It means that when the outer message is initially parsed, the\n inner message's contents will not be parsed but instead stored in encoded\n form.  The inner message will actually be parsed when it is first accessed.\n\n This is only a hint.  Implementations are free to choose whether to use\n eager or lazy parsing regardless of the value of this option.  However,\n setting this option true suggests that the protocol author believes that\n using lazy parsing on this field is worth the additional bookkeeping\n overhead typically needed to implement it.\n\n This option does not affect the public interface of any generated code;\n all method signatures remain the same.  Furthermore, thread-safety of the\n interface is not affected by this option; const methods remain safe to\n call from multiple threads concurrently, while non-const methods continue\n to require exclusive access.\n\n\n Note that implementations may choose not to check required fields within\n a lazy sub-message.  That is, calling IsInitialized() on the outher message\n may return true even if the inner message has missing required fields.\n This is necessary because otherwise the inner message would have to be\n parsed in order to perform the check, defeating the purpose of lazy\n parsing.  An implementation which chooses not to check required fields\n must be consistent about it.  That is, for any particular sub-message, the\n implementation must either *always* check its required fields, or *never*\n check its required fields, regardless of whether or not the message has\n been parsed.\n" ), TrailingComments:nil, XXX_unrecognized:[]byte{}}
&google_protobuf.SourceCodeInfo_Location{Path:[]int32{4, 10, 2, 3}, Span:[]int32{354, 2, 31}, LeadingComments:func(v string) *string { return &v } ( " Is this field deprecated?\n Depending on the target platform, this can emit Deprecated annotations\n for accessors, or it will be completely ignored; in the very least, this\n is a formalization for deprecating fields.\n" ), TrailingComments:nil, XXX_unrecognized:[]byte{}}
&google_protobuf.SourceCodeInfo_Location{Path:[]int32{4, 10, 2, 4}, Span:[]int32{368, 2, 43}, LeadingComments:func(v string) *string { return &v } ( " EXPERIMENTAL.  DO NOT USE.\n For \"map\" fields, the name of the field in the enclosed type that\n is the key for this map.  For example, suppose we have:\n   message Item {\n     required string name = 1;\n     required string value = 2;\n   }\n   message Config {\n     repeated Item items = 1 [experimental_map_key=\"name\"];\n   }\n In this situation, the map key for Item will be set to \"name\".\n TODO: Fully-implement this, then remove the \"experimental_\" prefix.\n" ), TrailingComments:nil, XXX_unrecognized:[]byte{}}
&google_protobuf.SourceCodeInfo_Location{Path:[]int32{4, 10, 2, 5}, Span:[]int32{371, 2, 26}, LeadingComments:func(v string) *string { return &v } ( " For Google-internal migration only. Do not use.\n" ), TrailingComments:nil, XXX_unrecognized:[]byte{}}
&google_protobuf.SourceCodeInfo_Location{Path:[]int32{4, 10, 2, 6}, Span:[]int32{374, 2, 58}, LeadingComments:func(v string) *string { return &v } ( " The parser stores options it doesn't recognize here. See above.\n" ), TrailingComments:nil, XXX_unrecognized:[]byte{}}
&google_protobuf.SourceCodeInfo_Location{Path:[]int32{4, 10, 4, 0, 2, 0}, Span:[]int32{379, 4, 15}, LeadingComments:func(v string) *string { return &v } ( " Default mode.\n" ), TrailingComments:nil, XXX_unrecognized:[]byte{}}
&google_protobuf.SourceCodeInfo_Location{Path:[]int32{4, 11, 5}, Span:[]int32{388, 2, 25}, LeadingComments:func(v string) *string { return &v } ( " Clients can define custom options in extensions of this message. See above.\n" ), TrailingComments:nil, XXX_unrecognized:[]byte{}}
&google_protobuf.SourceCodeInfo_Location{Path:[]int32{4, 11, 2, 0}, Span:[]int32{392, 2, 32}, LeadingComments:func(v string) *string { return &v } ( " Set this option to false to disallow mapping different tag names to a same\n value.\n" ), TrailingComments:nil, XXX_unrecognized:[]byte{}}
&google_protobuf.SourceCodeInfo_Location{Path:[]int32{4, 11, 2, 1}, Span:[]int32{395, 2, 58}, LeadingComments:func(v string) *string { return &v } ( " The parser stores options it doesn't recognize here. See above.\n" ), TrailingComments:nil, XXX_unrecognized:[]byte{}}
&google_protobuf.SourceCodeInfo_Location{Path:[]int32{4, 12, 5}, Span:[]int32{401, 2, 25}, LeadingComments:func(v string) *string { return &v } ( " Clients can define custom options in extensions of this message. See above.\n" ), TrailingComments:nil, XXX_unrecognized:[]byte{}}
&google_protobuf.SourceCodeInfo_Location{Path:[]int32{4, 12, 2, 0}, Span:[]int32{404, 2, 58}, LeadingComments:func(v string) *string { return &v } ( " The parser stores options it doesn't recognize here. See above.\n" ), TrailingComments:nil, XXX_unrecognized:[]byte{}}
&google_protobuf.SourceCodeInfo_Location{Path:[]int32{4, 13, 5}, Span:[]int32{410, 2, 25}, LeadingComments:func(v string) *string { return &v } ( " Clients can define custom options in extensions of this message. See above.\n" ), TrailingComments:nil, XXX_unrecognized:[]byte{}}
&google_protobuf.SourceCodeInfo_Location{Path:[]int32{4, 13, 2, 0}, Span:[]int32{413, 2, 58}, LeadingComments:func(v string) *string { return &v } ( " The parser stores options it doesn't recognize here. See above.\n" ), TrailingComments:nil, XXX_unrecognized:[]byte{}}
&google_protobuf.SourceCodeInfo_Location{Path:[]int32{4, 14, 5}, Span:[]int32{419, 2, 25}, LeadingComments:func(v string) *string { return &v } ( " Clients can define custom options in extensions of this message. See above.\n" ), TrailingComments:nil, XXX_unrecognized:[]byte{}}
&google_protobuf.SourceCodeInfo_Location{Path:[]int32{4, 14, 2, 0}, Span:[]int32{422, 2, 58}, LeadingComments:func(v string) *string { return &v } ( " The parser stores options it doesn't recognize here. See above.\n" ), TrailingComments:nil, XXX_unrecognized:[]byte{}}
&google_protobuf.SourceCodeInfo_Location{Path:[]int32{4, 15}, Span:[]int32{431, 0, 452, 1}, LeadingComments:func(v string) *string { return &v } ( " A message representing a option the parser does not recognize. This only\n appears in options protos created by the compiler::Parser class.\n DescriptorPool resolves these when building Descriptor objects. Therefore,\n options protos in descriptor objects (e.g. returned by Descriptor::options(),\n or produced by Descriptor::CopyTo()) will never have UninterpretedOptions\n in them.\n" ), TrailingComments:nil, XXX_unrecognized:[]byte{}}
&google_protobuf.SourceCodeInfo_Location{Path:[]int32{4, 15, 2, 1}, Span:[]int32{436, 2, 39}, LeadingComments:func(v string) *string { return &v } ( " The value of the uninterpreted option, in whatever type the tokenizer\n identified it as during parsing. Exactly one of these should be set.\n" ), TrailingComments:nil, XXX_unrecognized:[]byte{}}
&google_protobuf.SourceCodeInfo_Location{Path:[]int32{4, 15, 3, 0}, Span:[]int32{448, 2, 451, 3}, LeadingComments:func(v string) *string { return &v } ( " The name of the uninterpreted option.  Each string represents a segment in\n a dot-separated name.  is_extension is true iff a segment represents an\n extension (denoted with parentheses in options specs in .proto files).\n E.g.,{ [\"foo\", false], [\"bar.baz\", true], [\"qux\", false] } represents\n \"foo.(bar.baz).qux\".\n" ), TrailingComments:nil, XXX_unrecognized:[]byte{}}
&google_protobuf.SourceCodeInfo_Location{Path:[]int32{4, 16}, Span:[]int32{456, 0, 574, 1}, LeadingComments:func(v string) *string { return &v } ( " Encapsulates information about the original source file from which a\n FileDescriptorProto was generated.\n" ), TrailingComments:nil, XXX_unrecognized:[]byte{}}
&google_protobuf.SourceCodeInfo_Location{Path:[]int32{4, 16, 2, 0}, Span:[]int32{501, 2, 64}, LeadingComments:func(v string) *string { return &v } ( " A Location identifies a piece of source code in a .proto file which\n corresponds to a particular definition.  This information is intended\n to be useful to IDEs, code indexers, documentation generators, and similar\n tools.\n\n For example, say we have a file like:\n   message Foo {\n     optional string foo = 1;\n   }\n Let's look at just the field definition:\n   optional string foo = 1;\n   ^       ^^     ^^  ^  ^^^\n   a       bc     de  f  ghi\n We have the following locations:\n   span   path               represents\n   [a,i)  [ 4, 0, 2, 0 ]     The whole field definition.\n   [a,b)  [ 4, 0, 2, 0, 4 ]  The label (optional).\n   [c,d)  [ 4, 0, 2, 0, 5 ]  The type (string).\n   [e,f)  [ 4, 0, 2, 0, 1 ]  The name (foo).\n   [g,h)  [ 4, 0, 2, 0, 3 ]  The number (1).\n\n Notes:\n - A location may refer to a repeated field itself (i.e. not to any\n   particular index within it).  This is used whenever a set of elements are\n   logically enclosed in a single code segment.  For example, an entire\n   extend block (possibly containing multiple extension definitions) will\n   have an outer location whose path refers to the \"extensions\" repeated\n   field without an index.\n - Multiple locations may have the same path.  This happens when a single\n   logical declaration is spread out across multiple places.  The most\n   obvious example is the \"extend\" block again -- there may be multiple\n   extend blocks in the same scope, each of which will have the same path.\n - A location's span is not always a subset of its parent's span.  For\n   example, the \"extendee\" of an extension declaration appears at the\n   beginning of the \"extend\" block and is shared by all extensions within\n   the block.\n - Just because a location's span is a subset of some other location's span\n   does not mean that it is a descendent.  For example, a \"group\" defines\n   both a type and a field in a single declaration.  Thus, the locations\n   corresponding to the type and field and their components will overlap.\n - Code which tries to interpret locations should probably be designed to\n   ignore those that it doesn't understand, as more types of locations could\n   be recorded in the future.\n" ), TrailingComments:nil, XXX_unrecognized:[]byte{}}
&google_protobuf.SourceCodeInfo_Location{Path:[]int32{4, 16, 3, 0, 2, 0}, Span:[]int32{528, 4, 44}, LeadingComments:func(v string) *string { return &v } ( " Identifies which part of the FileDescriptorProto was defined at this\n location.\n\n Each element is a field number or an index.  They form a path from\n the root FileDescriptorProto to the place where the definition.  For\n example, this path:\n   [ 4, 3, 2, 7, 1 ]\n refers to:\n   file.message_type(3)  // 4, 3\n       .field(7)         // 2, 7\n       .name()           // 1\n This is because FileDescriptorProto.message_type has field number 4:\n   repeated DescriptorProto message_type = 4;\n and DescriptorProto.field has field number 2:\n   repeated FieldDescriptorProto field = 2;\n and FieldDescriptorProto.name has field number 1:\n   optional string name = 1;\n\n Thus, the above path gives the location of a field name.  If we removed\n the last element:\n   [ 4, 3, 2, 7 ]\n this path refers to the whole field declaration (from the beginning\n of the label to the terminating semicolon).\n" ), TrailingComments:nil, XXX_unrecognized:[]byte{}}
&google_protobuf.SourceCodeInfo_Location{Path:[]int32{4, 16, 3, 0, 2, 1}, Span:[]int32{535, 4, 44}, LeadingComments:func(v string) *string { return &v } ( " Always has exactly three or four elements: start line, start column,\n end line (optional, otherwise assumed same as start line), end column.\n These are packed into a single field for efficiency.  Note that line\n and column numbers are zero-based -- typically you will want to add\n 1 to each before displaying to a user.\n" ), TrailingComments:nil, XXX_unrecognized:[]byte{}}
&google_protobuf.SourceCodeInfo_Location{Path:[]int32{4, 16, 3, 0, 2, 2}, Span:[]int32{571, 4, 41}, LeadingComments:func(v string) *string { return &v } ( " If this SourceCodeInfo represents a complete declaration, these are any\n comments appearing before and after the declaration which appear to be\n attached to the declaration.\n \n A series of line comments appearing on consecutive lines, with no other\n tokens appearing on those lines, will be treated as a single comment.\n \n Only the comment content is provided; comment markers (e.g. //) are\n stripped out.  For block comments, leading whitespace and an asterisk\n will be stripped from the beginning of each line other than the first.\n Newlines are included in the output.\n \n Examples:\n \n optional int32 foo = 1;  // Comment attached to foo.\n // Comment attached to bar.\n optional int32 bar = 2;\n \n optional string baz = 3;\n // Comment attached to baz.\n // Another line attached to baz.\n \n // Comment attached to qux.\n //\n // Another line attached to qux.\n optional double qux = 4;\n \n optional string corge = 5;\n /* Block comment attached\n * to corge.  Leading asterisks\n * will be removed. */\n /* Block comment attached to\n * grault. */\n optional int32 grault = 6;\n" ), TrailingComments:nil, XXX_unrecognized:[]byte{}}
&google_protobuf.SourceCodeInfo_Location{Path:[]int32{2}, Span:[]int32{1, 8, 14}, LeadingComments:func(v string) *string { return &v } ( " Leading package comment\n" ), TrailingComments:func(v string) *string { return &v } ( " This is the trailing package comment\n" ), XXX_unrecognized:[]byte{}}
&google_protobuf.SourceCodeInfo_Location{Path:[]int32{3, 0}, Span:[]int32{5, 7, 34}, LeadingComments:func(v string) *string { return &v } ( " Important import\n" ), TrailingComments:nil, XXX_unrecognized:[]byte{}}
&google_protobuf.SourceCodeInfo_Location{Path:[]int32{3, 1}, Span:[]int32{8, 7, 34}, LeadingComments:func(v string) *string { return &v } ( " But also kinda important\n" ), TrailingComments:nil, XXX_unrecognized:[]byte{}}
&google_protobuf.SourceCodeInfo_Location{Path:[]int32{7}, Span:[]int32{11, 0, 16, 1}, LeadingComments:func(v string) *string { return &v } ( " I'm extending this\n" ), TrailingComments:nil, XXX_unrecognized:[]byte{}}
&google_protobuf.SourceCodeInfo_Location{Path:[]int32{7, 0}, Span:[]int32{13, 2, 48}, LeadingComments:func(v string) *string { return &v } ( " This is an extended field\n" ), TrailingComments:nil, XXX_unrecognized:[]byte{}}
&google_protobuf.SourceCodeInfo_Location{Path:[]int32{7, 1}, Span:[]int32{15, 2, 46}, LeadingComments:func(v string) *string { return &v } ( " This is another extended field\n" ), TrailingComments:nil, XXX_unrecognized:[]byte{}}
&google_protobuf.SourceCodeInfo_Location{Path:[]int32{7}, Span:[]int32{19, 8, 24, 9}, LeadingComments:func(v string) *string { return &v } ( " Also this\n" ), TrailingComments:nil, XXX_unrecognized:[]byte{}}
&google_protobuf.SourceCodeInfo_Location{Path:[]int32{7, 2}, Span:[]int32{21, 10, 43}, LeadingComments:func(v string) *string { return &v } ( " This is yet another extended field\n" ), TrailingComments:nil, XXX_unrecognized:[]byte{}}
&google_protobuf.SourceCodeInfo_Location{Path:[]int32{7, 3}, Span:[]int32{23, 10, 41}, LeadingComments:func(v string) *string { return &v } ( " Yet another\n" ), TrailingComments:nil, XXX_unrecognized:[]byte{}}
&google_protobuf.SourceCodeInfo_Location{Path:[]int32{8, 999, 0}, Span:[]int32{29, 0, 37}, LeadingComments:func(v string) *string { return &v } ( " Some\n// nested\ncomments" ), TrailingComments:func(v string) *string { return &v } ( " Different\ncomments\nover here " ), XXX_unrecognized:[]byte{}}
&google_protobuf.SourceCodeInfo_Location{Path:[]int32{5, 0}, Span:[]int32{35, 0, 42, 1}, LeadingComments:func(v string) *string { return &v } ( " Comment before enum\n" ), TrailingComments:func(v string) *string { return &v } ( " Enum trailing comment\n" ), XXX_unrecognized:[]byte{}}
&google_protobuf.SourceCodeInfo_Location{Path:[]int32{5, 0, 2, 0}, Span:[]int32{39, 2, 10}, LeadingComments:func(v string) *string { return &v } ( " Enum value comment\n" ), TrailingComments:nil, XXX_unrecognized:[]byte{}}
&google_protobuf.SourceCodeInfo_Location{Path:[]int32{5, 0, 2, 1}, Span:[]int32{41, 2, 10}, LeadingComments:func(v string) *string { return &v } ( " second enumvalue comment\n" ), TrailingComments:nil, XXX_unrecognized:[]byte{}}
&google_protobuf.SourceCodeInfo_Location{Path:[]int32{4, 0}, Span:[]int32{48, 0, 53, 1}, LeadingComments:func(v string) *string { return &v } ( " hello\nmulti-line\ncomment\nworld" ), TrailingComments:nil, XXX_unrecognized:[]byte{}}
&google_protobuf.SourceCodeInfo_Location{Path:[]int32{4, 0, 2, 0}, Span:[]int32{51, 2, 27}, LeadingComments:func(v string) *string { return &v } ( " Already\nmultiline" ), TrailingComments:func(v string) *string { return &v } ( " trailing\n" ), XXX_unrecognized:[]byte{}}
sampleCommentsTest.proto <TEST PASSED>
&google_protobuf.SourceCodeInfo_Location{Path:[]int32{4, 0}, Span:[]int32{45, 0, 47, 1}, LeadingComments:func(v string) *string { return &v } ( " The protocol compiler can output a FileDescriptorSet containing the .proto\n files it parses.\n" ), TrailingComments:nil, XXX_unrecognized:[]byte{}}
&google_protobuf.SourceCodeInfo_Location{Path:[]int32{4, 1}, Span:[]int32{50, 0, 78, 1}, LeadingComments:func(v string) *string { return &v } ( " Describes a complete .proto file.\n" ), TrailingComments:nil, XXX_unrecognized:[]byte{}}
&google_protobuf.SourceCodeInfo_Location{Path:[]int32{4, 1, 2, 1}, Span:[]int32{53, 2, 30}, LeadingComments:func(v string) *string { return &v } ( " file name, relative to root of source tree\n" ), TrailingComments:func(v string) *string { return &v } ( " e.g. \"foo\", \"foo.bar\", etc.\n" ), XXX_unrecognized:[]byte{}}
&google_protobuf.SourceCodeInfo_Location{Path:[]int32{4, 1, 2, 2}, Span:[]int32{57, 2, 33}, LeadingComments:func(v string) *string { return &v } ( " Names of files imported by this file.\n" ), TrailingComments:nil, XXX_unrecognized:[]byte{}}
&google_protobuf.SourceCodeInfo_Location{Path:[]int32{4, 1, 2, 3}, Span:[]int32{60, 2, 40}, LeadingComments:func(v string) *string { return &v } ( " Indexes of the public imported files in the dependency list above.\n" ), TrailingComments:nil, XXX_unrecognized:[]byte{}}
&google_protobuf.SourceCodeInfo_Location{Path:[]int32{4, 1, 2, 4}, Span:[]int32{64, 2, 38}, LeadingComments:func(v string) *string { return &v } ( " Indexes of the weak imported files in the dependency list.\n For Google-internal migration only. Do not use.\n" ), TrailingComments:nil, XXX_unrecognized:[]byte{}}
&google_protobuf.SourceCodeInfo_Location{Path:[]int32{4, 1, 2, 5}, Span:[]int32{67, 2, 44}, LeadingComments:func(v string) *string { return &v } ( " All top-level definitions in this file.\n" ), TrailingComments:nil, XXX_unrecognized:[]byte{}}
&google_protobuf.SourceCodeInfo_Location{Path:[]int32{4, 1, 2, 10}, Span:[]int32{77, 2, 47}, LeadingComments:func(v string) *string { return &v } ( " This field contains optional information about the original source code.\n You may safely remove this entire field whithout harming runtime\n functionality of the descriptors -- the information is needed only by\n development tools.\n" ), TrailingComments:nil, XXX_unrecognized:[]byte{}}
&google_protobuf.SourceCodeInfo_Location{Path:[]int32{4, 2}, Span:[]int32{81, 0, 94, 1}, LeadingComments:func(v string) *string { return &v } ( " Describes a message type.\n" ), TrailingComments:nil, XXX_unrecognized:[]byte{}}
&google_protobuf.SourceCodeInfo_Location{Path:[]int32{4, 3}, Span:[]int32{97, 0, 168, 1}, LeadingComments:func(v string) *string { return &v } ( " Describes a field within a message.\n" ), TrailingComments:nil, XXX_unrecognized:[]byte{}}
&google_protobuf.SourceCodeInfo_Location{Path:[]int32{4, 3, 2, 3}, Span:[]int32{104, 2, 62}, LeadingComments:func(v string) *string { return &v } ( " If type_name is set, this need not be set.  If both this and type_name\n are set, this must be either TYPE_ENUM or TYPE_MESSAGE.\n" ), TrailingComments:nil, XXX_unrecognized:[]byte{}}
&google_protobuf.SourceCodeInfo_Location{Path:[]int32{4, 3, 2, 4}, Span:[]int32{111, 2, 32}, LeadingComments:func(v string) *string { return &v } ( " For message and enum types, this is the name of the type.  If the name\n starts with a '.', it is fully-qualified.  Otherwise, C++-like scoping\n rules are used to find the type (i.e. first the nested types within this\n message are searched, then within the parent, on up to the root\n namespace).\n" ), TrailingComments:nil, XXX_unrecognized:[]byte{}}
&google_protobuf.SourceCodeInfo_Location{Path:[]int32{4, 3, 2, 5}, Span:[]int32{115, 2, 31}, LeadingComments:func(v string) *string { return &v } ( " For extensions, this is the name of the type being extended.  It is\n resolved in the same manner as type_name.\n" ), TrailingComments:nil, XXX_unrecognized:[]byte{}}
&google_protobuf.SourceCodeInfo_Location{Path:[]int32{4, 3, 2, 6}, Span:[]int32{122, 2, 36}, LeadingComments:func(v string) *string { return &v } ( " For numeric types, contains the original text representation of the value.\n For booleans, \"true\" or \"false\".\n For strings, contains the default text contents (not escaped in any way).\n For bytes, contains the C escaped value.  All bytes >= 128 are escaped.\n TODO(kenton):  Base-64 encode?\n" ), TrailingComments:nil, XXX_unrecognized:[]byte{}}
&google_protobuf.SourceCodeInfo_Location{Path:[]int32{4, 3, 4, 0, 2, 0}, Span:[]int32{129, 4, 20}, LeadingComments:func(v string) *string { return &v } ( " 0 is reserved for errors.\n Order is weird for historical reasons.\n" ), TrailingComments:nil, XXX_unrecognized:[]byte{}}
&google_protobuf.SourceCodeInfo_Location{Path:[]int32{4, 3, 4, 0, 2, 2}, Span:[]int32{134, 4, 19}, LeadingComments:func(v string) *string { return &v } ( " Not ZigZag encoded.  Negative numbers take 10 bytes.  Use TYPE_SINT64 if\n negative values are likely.\n" ), TrailingComments:nil, XXX_unrecognized:[]byte{}}
&google_protobuf.SourceCodeInfo_Location{Path:[]int32{4, 3, 4, 0, 2, 4}, Span:[]int32{139, 4, 19}, LeadingComments:func(v string) *string { return &v } ( " Not ZigZag encoded.  Negative numbers take 10 bytes.  Use TYPE_SINT32 if\n negative values are likely.\n" ), TrailingComments:nil, XXX_unrecognized:[]byte{}}
&google_protobuf.SourceCodeInfo_Location{Path:[]int32{4, 3, 4, 0, 2, 10}, Span:[]int32{146, 4, 22}, LeadingComments:func(v string) *string { return &v } ( " Tag-delimited aggregate.\n" ), TrailingComments:func(v string) *string { return &v } ( " Length-delimited aggregate.\n" ), XXX_unrecognized:[]byte{}}
&google_protobuf.SourceCodeInfo_Location{Path:[]int32{4, 3, 4, 0, 2, 11}, Span:[]int32{150, 4, 20}, LeadingComments:func(v string) *string { return &v } ( " New in version 2.\n" ), TrailingComments:nil, XXX_unrecognized:[]byte{}}
&google_protobuf.SourceCodeInfo_Location{Path:[]int32{4, 3, 4, 0, 2, 17}, Span:[]int32{157, 4, 21}, LeadingComments:func(v string) *string { return &v } ( " Uses ZigZag encoding.\n" ), TrailingComments:func(v string) *string { return &v } ( " Uses ZigZag encoding.\n" ), XXX_unrecognized:[]byte{}}
&google_protobuf.SourceCodeInfo_Location{Path:[]int32{4, 3, 4, 1, 2, 0}, Span:[]int32{163, 4, 23}, LeadingComments:func(v string) *string { return &v } ( " 0 is reserved for errors\n" ), TrailingComments:nil, XXX_unrecognized:[]byte{}}
&google_protobuf.SourceCodeInfo_Location{Path:[]int32{4, 3, 4, 1, 2, 2}, Span:[]int32{165, 4, 23}, LeadingComments:nil, TrailingComments:func(v string) *string { return &v } ( " TODO(sanjay): Should we add LABEL_MAP?\n" ), XXX_unrecognized:[]byte{}}
&google_protobuf.SourceCodeInfo_Location{Path:[]int32{4, 4}, Span:[]int32{171, 0, 175, 1}, LeadingComments:func(v string) *string { return &v } ( " Describes an enum type.\n" ), TrailingComments:nil, XXX_unrecognized:[]byte{}}
&google_protobuf.SourceCodeInfo_Location{Path:[]int32{4, 5}, Span:[]int32{178, 0, 182, 1}, LeadingComments:func(v string) *string { return &v } ( " Describes a value within an enum.\n" ), TrailingComments:nil, XXX_unrecognized:[]byte{}}
&google_protobuf.SourceCodeInfo_Location{Path:[]int32{4, 6}, Span:[]int32{185, 0, 189, 1}, LeadingComments:func(v string) *string { return &v } ( " Describes a service.\n" ), TrailingComments:nil, XXX_unrecognized:[]byte{}}
&google_protobuf.SourceCodeInfo_Location{Path:[]int32{4, 7}, Span:[]int32{192, 0, 200, 1}, LeadingComments:func(v string) *string { return &v } ( " Describes a method of a service.\n" ), TrailingComments:nil, XXX_unrecognized:[]byte{}}
&google_protobuf.SourceCodeInfo_Location{Path:[]int32{4, 7, 2, 1}, Span:[]int32{197, 2, 33}, LeadingComments:func(v string) *string { return &v } ( " Input and output type names.  These are resolved in the same way as\n FieldDescriptorProto.type_name, but must refer to a message type.\n" ), TrailingComments:nil, XXX_unrecognized:[]byte{}}
&google_protobuf.SourceCodeInfo_Location{Path:[]int32{4, 8, 5}, Span:[]int32{205, 2, 25}, LeadingComments:func(v string) *string { return &v } ( " Clients can define custom options in extensions of this message. See above.\n" ), TrailingComments:nil, XXX_unrecognized:[]byte{}}
&google_protobuf.SourceCodeInfo_Location{Path:[]int32{4, 8, 2, 0}, Span:[]int32{211, 2, 35}, LeadingComments:func(v string) *string { return &v } ( " Sets the Java package where classes generated from this .proto will be\n placed.  By default, the proto package is used, but this is often\n inappropriate because proto packages do not normally start with backwards\n domain names.\n" ), TrailingComments:nil, XXX_unrecognized:[]byte{}}
&google_protobuf.SourceCodeInfo_Location{Path:[]int32{4, 8, 2, 1}, Span:[]int32{218, 2, 43}, LeadingComments:func(v string) *string { return &v } ( " If set, all the classes from the .proto file are wrapped in a single\n outer class with the given name.  This applies to both Proto1\n (equivalent to the old \"--one_java_file\" option) and Proto2 (where\n a .proto always translates to a single class, but you may want to\n explicitly choose the class name).\n" ), TrailingComments:nil, XXX_unrecognized:[]byte{}}
&google_protobuf.SourceCodeInfo_Location{Path:[]int32{4, 8, 2, 2}, Span:[]int32{226, 2, 41}, LeadingComments:func(v string) *string { return &v } ( " If set true, then the Java code generator will generate a separate .java\n file for each top-level message, enum, and service defined in the .proto\n file.  Thus, these types will *not* be nested inside the outer class\n named by java_outer_classname.  However, the outer class will still be\n generated to contain the file's getDescriptor() method as well as any\n top-level extensions defined in the file.\n" ), TrailingComments:nil, XXX_unrecognized:[]byte{}}
&google_protobuf.SourceCodeInfo_Location{Path:[]int32{4, 8, 2, 3}, Span:[]int32{232, 2, 51}, LeadingComments:func(v string) *string { return &v } ( " If set true, then the Java code generator will generate equals() and\n hashCode() methods for all messages defined in the .proto file. This is\n purely a speed optimization, as the AbstractMessage base class includes\n reflection-based implementations of these methods.\n" ), TrailingComments:nil, XXX_unrecognized:[]byte{}}
&google_protobuf.SourceCodeInfo_Location{Path:[]int32{4, 8, 2, 5}, Span:[]int32{237, 2, 34}, LeadingComments:func(v string) *string { return &v } ( " Sets the Go package where structs generated from this .proto will be\n placed.  There is no default.\n" ), TrailingComments:nil, XXX_unrecognized:[]byte{}}
&google_protobuf.SourceCodeInfo_Location{Path:[]int32{4, 8, 2, 6}, Span:[]int32{249, 2, 41}, LeadingComments:func(v string) *string { return &v } ( " Should generic services be generated in each language?  \"Generic\" services\n are not specific to any particular RPC system.  They are generated by the\n main code generators in each language (without additional plugins).\n Generic services were the only kind of service generation supported by\n early versions of proto2.\n\n Generic services are now considered deprecated in favor of using plugins\n that generate code specific to your particular RPC system.  Therefore,\n these default to false.  Old code which depends on generic services should\n explicitly set them to true.\n" ), TrailingComments:nil, XXX_unrecognized:[]byte{}}
&google_protobuf.SourceCodeInfo_Location{Path:[]int32{4, 8, 2, 9}, Span:[]int32{254, 2, 58}, LeadingComments:func(v string) *string { return &v } ( " The parser stores options it doesn't recognize here. See above.\n" ), TrailingComments:nil, XXX_unrecognized:[]byte{}}
&google_protobuf.SourceCodeInfo_Location{Path:[]int32{4, 8, 4, 0}, Span:[]int32{257, 2, 266, 3}, LeadingComments:func(v string) *string { return &v } ( " Generated classes can be optimized for speed or code size.\n" ), TrailingComments:nil, XXX_unrecognized:[]byte{}}
&google_protobuf.SourceCodeInfo_Location{Path:[]int32{4, 8, 4, 0, 2, 0}, Span:[]int32{258, 4, 14}, LeadingComments:nil, TrailingComments:func(v string) *string { return &v } ( " Generate complete code for parsing, serialization,\n" ), XXX_unrecognized:[]byte{}}
&google_protobuf.SourceCodeInfo_Location{Path:[]int32{4, 8, 4, 0, 2, 1}, Span:[]int32{262, 4, 18}, LeadingComments:func(v string) *string { return &v } ( " etc.\n" ), TrailingComments:nil, XXX_unrecognized:[]byte{}}
&google_protobuf.SourceCodeInfo_Location{Path:[]int32{4, 8, 4, 0, 2, 2}, Span:[]int32{264, 4, 21}, LeadingComments:func(v string) *string { return &v } ( " Use ReflectionOps to implement these methods.\n" ), TrailingComments:func(v string) *string { return &v } ( " Generate code using MessageLite and the lite runtime.\n" ), XXX_unrecognized:[]byte{}}
&google_protobuf.SourceCodeInfo_Location{Path:[]int32{4, 9, 5}, Span:[]int32{272, 2, 25}, LeadingComments:func(v string) *string { return &v } ( " Clients can define custom options in extensions of this message. See above.\n" ), TrailingComments:nil, XXX_unrecognized:[]byte{}}
&google_protobuf.SourceCodeInfo_Location{Path:[]int32{4, 9, 2, 0}, Span:[]int32{292, 2, 44}, LeadingComments:func(v string) *string { return &v } ( " Set true to use the old proto1 MessageSet wire format for extensions.\n This is provided for backwards-compatibility with the MessageSet wire\n format.  You should not use this for any other reason:  It's less\n efficient, has fewer features, and is more complicated.\n\n The message must be defined exactly as follows:\n   message Foo {\n     option message_set_wire_format = true;\n     extensions 4 to max;\n   }\n Note that the message cannot have any defined fields; MessageSets only\n have extensions.\n\n All extensions of your type must be singular messages; e.g. they cannot\n be int32s, enums, or repeated messages.\n\n Because this is an option, the above two restrictions are not enforced by\n the protocol compiler.\n" ), TrailingComments:nil, XXX_unrecognized:[]byte{}}
&google_protobuf.SourceCodeInfo_Location{Path:[]int32{4, 9, 2, 1}, Span:[]int32{297, 2, 52}, LeadingComments:func(v string) *string { return &v } ( " Disables the generation of the standard \"descriptor()\" accessor, which can\n conflict with a field of the same name.  This is meant to make migration\n from proto1 easier; new code should avoid fields named \"descriptor\".\n" ), TrailingComments:nil, XXX_unrecognized:[]byte{}}
&google_protobuf.SourceCodeInfo_Location{Path:[]int32{4, 9, 2, 2}, Span:[]int32{300, 2, 58}, LeadingComments:func(v string) *string { return &v } ( " The parser stores options it doesn't recognize here. See above.\n" ), TrailingComments:nil, XXX_unrecognized:[]byte{}}
&google_protobuf.SourceCodeInfo_Location{Path:[]int32{4, 10, 5}, Span:[]int32{306, 2, 25}, LeadingComments:func(v string) *string { return &v } ( " Clients can define custom options in extensions of this message. See above.\n" ), TrailingComments:nil, XXX_unrecognized:[]byte{}}
&google_protobuf.SourceCodeInfo_Location{Path:[]int32{4, 10, 2, 0}, Span:[]int32{312, 2, 56}, LeadingComments:func(v string) *string { return &v } ( " The ctype option instructs the C++ code generator to use a different\n representation of the field than it normally would.  See the specific\n options below.  This option is not yet implemented in the open source\n release -- sorry, we'll try to include it in a future version!\n" ), TrailingComments:nil, XXX_unrecognized:[]byte{}}
&google_protobuf.SourceCodeInfo_Location{Path:[]int32{4, 10, 2, 1}, Span:[]int32{318, 2, 27}, LeadingComments:func(v string) *string { return &v } ( " The packed option can be enabled for repeated primitive fields to enable\n a more efficient representation on the wire. Rather than repeatedly\n writing the tag and type for each element, the entire array is encoded as\n a single length-delimited blob.\n" ), TrailingComments:nil, XXX_unrecognized:[]byte{}}
&google_protobuf.SourceCodeInfo_Location{Path:[]int32{4, 10, 2, 2}, Span:[]int32{348, 2, 25}, LeadingComments:func(v string) *string { return &v } ( " Should this field be parsed lazily?  Lazy applies only to message-type\n fields.  It means that when the outer message is initially parsed, the\n inner message's contents will not be parsed but instead stored in encoded\n form.  The inner message will actually be parsed when it is first accessed.\n\n This is only a hint.  Implementations are free to choose whether to use\n eager or lazy parsing regardless of the value of this option.  However,\n setting this option true suggests that the protocol author believes that\n using lazy parsing on this field is worth the additional bookkeeping\n overhead typically needed to implement it.\n\n This option does not affect the public interface of any generated code;\n all method signatures remain the same.  Furthermore, thread-safety of the\n interface is not affected by this option; const methods remain safe to\n call from multiple threads concurrently, while non-const methods continue\n to require exclusive access.\n\n\n Note that implementations may choose not to check required fields within\n a lazy sub-message.  That is, calling IsInitialized() on the outher message\n may return true even if the inner message has missing required fields.\n This is necessary because otherwise the inner message would have to be\n parsed in order to perform the check, defeating the purpose of lazy\n parsing.  An implementation which chooses not to check required fields\n must be consistent about it.  That is, for any particular sub-message, the\n implementation must either *always* check its required fields, or *never*\n check its required fields, regardless of whether or not the message has\n been parsed.\n" ), TrailingComments:nil, XXX_unrecognized:[]byte{}}
&google_protobuf.SourceCodeInfo_Location{Path:[]int32{4, 10, 2, 3}, Span:[]int32{354, 2, 31}, LeadingComments:func(v string) *string { return &v } ( " Is this field deprecated?\n Depending on the target platform, this can emit Deprecated annotations\n for accessors, or it will be completely ignored; in the very least, this\n is a formalization for deprecating fields.\n" ), TrailingComments:nil, XXX_unrecognized:[]byte{}}
&google_protobuf.SourceCodeInfo_Location{Path:[]int32{4, 10, 2, 4}, Span:[]int32{368, 2, 43}, LeadingComments:func(v string) *string { return &v } ( " EXPERIMENTAL.  DO NOT USE.\n For \"map\" fields, the name of the field in the enclosed type that\n is the key for this map.  For example, suppose we have:\n   message Item {\n     required string name = 1;\n     required string value = 2;\n   }\n   message Config {\n     repeated Item items = 1 [experimental_map_key=\"name\"];\n   }\n In this situation, the map key for Item will be set to \"name\".\n TODO: Fully-implement this, then remove the \"experimental_\" prefix.\n" ), TrailingComments:nil, XXX_unrecognized:[]byte{}}
&google_protobuf.SourceCodeInfo_Location{Path:[]int32{4, 10, 2, 5}, Span:[]int32{371, 2, 26}, LeadingComments:func(v string) *string { return &v } ( " For Google-internal migration only. Do not use.\n" ), TrailingComments:nil, XXX_unrecognized:[]byte{}}
&google_protobuf.SourceCodeInfo_Location{Path:[]int32{4, 10, 2, 6}, Span:[]int32{374, 2, 58}, LeadingComments:func(v string) *string { return &v } ( " The parser stores options it doesn't recognize here. See above.\n" ), TrailingComments:nil, XXX_unrecognized:[]byte{}}
&google_protobuf.SourceCodeInfo_Location{Path:[]int32{4, 10, 4, 0, 2, 0}, Span:[]int32{379, 4, 15}, LeadingComments:func(v string) *string { return &v } ( " Default mode.\n" ), TrailingComments:nil, XXX_unrecognized:[]byte{}}
&google_protobuf.SourceCodeInfo_Location{Path:[]int32{4, 11, 5}, Span:[]int32{388, 2, 25}, LeadingComments:func(v string) *string { return &v } ( " Clients can define custom options in extensions of this message. See above.\n" ), TrailingComments:nil, XXX_unrecognized:[]byte{}}
&google_protobuf.SourceCodeInfo_Location{Path:[]int32{4, 11, 2, 0}, Span:[]int32{392, 2, 32}, LeadingComments:func(v string) *string { return &v } ( " Set this option to false to disallow mapping different tag names to a same\n value.\n" ), TrailingComments:nil, XXX_unrecognized:[]byte{}}
&google_protobuf.SourceCodeInfo_Location{Path:[]int32{4, 11, 2, 1}, Span:[]int32{395, 2, 58}, LeadingComments:func(v string) *string { return &v } ( " The parser stores options it doesn't recognize here. See above.\n" ), TrailingComments:nil, XXX_unrecognized:[]byte{}}
&google_protobuf.SourceCodeInfo_Location{Path:[]int32{4, 12, 5}, Span:[]int32{401, 2, 25}, LeadingComments:func(v string) *string { return &v } ( " Clients can define custom options in extensions of this message. See above.\n" ), TrailingComments:nil, XXX_unrecognized:[]byte{}}
&google_protobuf.SourceCodeInfo_Location{Path:[]int32{4, 12, 2, 0}, Span:[]int32{404, 2, 58}, LeadingComments:func(v string) *string { return &v } ( " The parser stores options it doesn't recognize here. See above.\n" ), TrailingComments:nil, XXX_unrecognized:[]byte{}}
&google_protobuf.SourceCodeInfo_Location{Path:[]int32{4, 13, 5}, Span:[]int32{410, 2, 25}, LeadingComments:func(v string) *string { return &v } ( " Clients can define custom options in extensions of this message. See above.\n" ), TrailingComments:nil, XXX_unrecognized:[]byte{}}
&google_protobuf.SourceCodeInfo_Location{Path:[]int32{4, 13, 2, 0}, Span:[]int32{413, 2, 58}, LeadingComments:func(v string) *string { return &v } ( " The parser stores options it doesn't recognize here. See above.\n" ), TrailingComments:nil, XXX_unrecognized:[]byte{}}
&google_protobuf.SourceCodeInfo_Location{Path:[]int32{4, 14, 5}, Span:[]int32{419, 2, 25}, LeadingComments:func(v string) *string { return &v } ( " Clients can define custom options in extensions of this message. See above.\n" ), TrailingComments:nil, XXX_unrecognized:[]byte{}}
&google_protobuf.SourceCodeInfo_Location{Path:[]int32{4, 14, 2, 0}, Span:[]int32{422, 2, 58}, LeadingComments:func(v string) *string { return &v } ( " The parser stores options it doesn't recognize here. See above.\n" ), TrailingComments:nil, XXX_unrecognized:[]byte{}}
&google_protobuf.SourceCodeInfo_Location{Path:[]int32{4, 15}, Span:[]int32{431, 0, 452, 1}, LeadingComments:func(v string) *string { return &v } ( " A message representing a option the parser does not recognize. This only\n appears in options protos created by the compiler::Parser class.\n DescriptorPool resolves these when building Descriptor objects. Therefore,\n options protos in descriptor objects (e.g. returned by Descriptor::options(),\n or produced by Descriptor::CopyTo()) will never have UninterpretedOptions\n in them.\n" ), TrailingComments:nil, XXX_unrecognized:[]byte{}}
&google_protobuf.SourceCodeInfo_Location{Path:[]int32{4, 15, 2, 1}, Span:[]int32{436, 2, 39}, LeadingComments:func(v string) *string { return &v } ( " The value of the uninterpreted option, in whatever type the tokenizer\n identified it as during parsing. Exactly one of these should be set.\n" ), TrailingComments:nil, XXX_unrecognized:[]byte{}}
&google_protobuf.SourceCodeInfo_Location{Path:[]int32{4, 15, 3, 0}, Span:[]int32{448, 2, 451, 3}, LeadingComments:func(v string) *string { return &v } ( " The name of the uninterpreted option.  Each string represents a segment in\n a dot-separated name.  is_extension is true iff a segment represents an\n extension (denoted with parentheses in options specs in .proto files).\n E.g.,{ [\"foo\", false], [\"bar.baz\", true], [\"qux\", false] } represents\n \"foo.(bar.baz).qux\".\n" ), TrailingComments:nil, XXX_unrecognized:[]byte{}}
&google_protobuf.SourceCodeInfo_Location{Path:[]int32{4, 16}, Span:[]int32{456, 0, 574, 1}, LeadingComments:func(v string) *string { return &v } ( " Encapsulates information about the original source file from which a\n FileDescriptorProto was generated.\n" ), TrailingComments:nil, XXX_unrecognized:[]byte{}}
&google_protobuf.SourceCodeInfo_Location{Path:[]int32{4, 16, 2, 0}, Span:[]int32{501, 2, 64}, LeadingComments:func(v string) *string { return &v } ( " A Location identifies a piece of source code in a .proto file which\n corresponds to a particular definition.  This information is intended\n to be useful to IDEs, code indexers, documentation generators, and similar\n tools.\n\n For example, say we have a file like:\n   message Foo {\n     optional string foo = 1;\n   }\n Let's look at just the field definition:\n   optional string foo = 1;\n   ^       ^^     ^^  ^  ^^^\n   a       bc     de  f  ghi\n We have the following locations:\n   span   path               represents\n   [a,i)  [ 4, 0, 2, 0 ]     The whole field definition.\n   [a,b)  [ 4, 0, 2, 0, 4 ]  The label (optional).\n   [c,d)  [ 4, 0, 2, 0, 5 ]  The type (string).\n   [e,f)  [ 4, 0, 2, 0, 1 ]  The name (foo).\n   [g,h)  [ 4, 0, 2, 0, 3 ]  The number (1).\n\n Notes:\n - A location may refer to a repeated field itself (i.e. not to any\n   particular index within it).  This is used whenever a set of elements are\n   logically enclosed in a single code segment.  For example, an entire\n   extend block (possibly containing multiple extension definitions) will\n   have an outer location whose path refers to the \"extensions\" repeated\n   field without an index.\n - Multiple locations may have the same path.  This happens when a single\n   logical declaration is spread out across multiple places.  The most\n   obvious example is the \"extend\" block again -- there may be multiple\n   extend blocks in the same scope, each of which will have the same path.\n - A location's span is not always a subset of its parent's span.  For\n   example, the \"extendee\" of an extension declaration appears at the\n   beginning of the \"extend\" block and is shared by all extensions within\n   the block.\n - Just because a location's span is a subset of some other location's span\n   does not mean that it is a descendent.  For example, a \"group\" defines\n   both a type and a field in a single declaration.  Thus, the locations\n   corresponding to the type and field and their components will overlap.\n - Code which tries to interpret locations should probably be designed to\n   ignore those that it doesn't understand, as more types of locations could\n   be recorded in the future.\n" ), TrailingComments:nil, XXX_unrecognized:[]byte{}}
&google_protobuf.SourceCodeInfo_Location{Path:[]int32{4, 16, 3, 0, 2, 0}, Span:[]int32{528, 4, 44}, LeadingComments:func(v string) *string { return &v } ( " Identifies which part of the FileDescriptorProto was defined at this\n location.\n\n Each element is a field number or an index.  They form a path from\n the root FileDescriptorProto to the place where the definition.  For\n example, this path:\n   [ 4, 3, 2, 7, 1 ]\n refers to:\n   file.message_type(3)  // 4, 3\n       .field(7)         // 2, 7\n       .name()           // 1\n This is because FileDescriptorProto.message_type has field number 4:\n   repeated DescriptorProto message_type = 4;\n and DescriptorProto.field has field number 2:\n   repeated FieldDescriptorProto field = 2;\n and FieldDescriptorProto.name has field number 1:\n   optional string name = 1;\n\n Thus, the above path gives the location of a field name.  If we removed\n the last element:\n   [ 4, 3, 2, 7 ]\n this path refers to the whole field declaration (from the beginning\n of the label to the terminating semicolon).\n" ), TrailingComments:nil, XXX_unrecognized:[]byte{}}
&google_protobuf.SourceCodeInfo_Location{Path:[]int32{4, 16, 3, 0, 2, 1}, Span:[]int32{535, 4, 44}, LeadingComments:func(v string) *string { return &v } ( " Always has exactly three or four elements: start line, start column,\n end line (optional, otherwise assumed same as start line), end column.\n These are packed into a single field for efficiency.  Note that line\n and column numbers are zero-based -- typically you will want to add\n 1 to each before displaying to a user.\n" ), TrailingComments:nil, XXX_unrecognized:[]byte{}}
&google_protobuf.SourceCodeInfo_Location{Path:[]int32{4, 16, 3, 0, 2, 2}, Span:[]int32{571, 4, 41}, LeadingComments:func(v string) *string { return &v } ( " If this SourceCodeInfo represents a complete declaration, these are any\n comments appearing before and after the declaration which appear to be\n attached to the declaration.\n \n A series of line comments appearing on consecutive lines, with no other\n tokens appearing on those lines, will be treated as a single comment.\n \n Only the comment content is provided; comment markers (e.g. //) are\n stripped out.  For block comments, leading whitespace and an asterisk\n will be stripped from the beginning of each line other than the first.\n Newlines are included in the output.\n \n Examples:\n \n optional int32 foo = 1;  // Comment attached to foo.\n // Comment attached to bar.\n optional int32 bar = 2;\n \n optional string baz = 3;\n // Comment attached to baz.\n // Another line attached to baz.\n \n // Comment attached to qux.\n //\n // Another line attached to qux.\n optional double qux = 4;\n \n optional string corge = 5;\n /* Block comment attached\n * to corge.  Leading asterisks\n * will be removed. */\n /* Block comment attached to\n * grault. */\n optional int32 grault = 6;\n" ), TrailingComments:nil, XXX_unrecognized:[]byte{}}
&google_protobuf.SourceCodeInfo_Location{Path:[]int32{6, 0}, Span:[]int32{8, 0, 28, 1}, LeadingComments:func(v string) *string { return &v } ( " My First Service Comment\n" ), TrailingComments:func(v string) *string { return &v } ( " trailing service comment\n" ), XXX_unrecognized:[]byte{}}
&google_protobuf.SourceCodeInfo_Location{Path:[]int32{6, 0, 3, 999, 0}, Span:[]int32{13, 8, 41}, LeadingComments:func(v string) *string { return &v } ( " Intra-Service comment before options\n" ), TrailingComments:func(v string) *string { return &v } ( " Intra-Service comment after options\n" ), XXX_unrecognized:[]byte{}}
&google_protobuf.SourceCodeInfo_Location{Path:[]int32{6, 0, 2, 0}, Span:[]int32{19, 2, 27, 3}, LeadingComments:func(v string) *string { return &v } ( " comments before method in service\n" ), TrailingComments:nil, XXX_unrecognized:[]byte{}}
&google_protobuf.SourceCodeInfo_Location{Path:[]int32{6, 0, 2, 0, 4, 999, 0}, Span:[]int32{21, 4, 40}, LeadingComments:func(v string) *string { return &v } ( " Intra-Method comment before options\n" ), TrailingComments:func(v string) *string { return &v } ( " Intra-Method trailing comment\n" ), XXX_unrecognized:[]byte{}}
&google_protobuf.SourceCodeInfo_Location{Path:[]int32{6, 0, 2, 0, 4, 999, 1}, Span:[]int32{25, 4, 50}, LeadingComments:func(v string) *string { return &v } ( " Intra second comment\n" ), TrailingComments:func(v string) *string { return &v } ( " Intra second trailing\n" ), XXX_unrecognized:[]byte{}}
&google_protobuf.SourceCodeInfo_Location{Path:[]int32{6, 1}, Span:[]int32{31, 0, 43, 1}, LeadingComments:func(v string) *string { return &v } ( " My Second Service Comment\n" ), TrailingComments:nil, XXX_unrecognized:[]byte{}}
&google_protobuf.SourceCodeInfo_Location{Path:[]int32{6, 1, 3, 999, 0}, Span:[]int32{33, 8, 41}, LeadingComments:nil, TrailingComments:func(v string) *string { return &v } ( " A trailing options comment\n" ), XXX_unrecognized:[]byte{}}
&google_protobuf.SourceCodeInfo_Location{Path:[]int32{6, 1, 2, 0}, Span:[]int32{37, 2, 42, 3}, LeadingComments:func(v string) *string { return &v } ( " A second method comment\n" ), TrailingComments:func(v string) *string { return &v } ( " trailing method comment\n" ), XXX_unrecognized:[]byte{}}
servicesCommentsTest.proto <TEST PASSED>
walterTest1.proto <TEST PASSED>
&google_protobuf.SourceCodeInfo_Location{Path:[]int32{4, 0}, Span:[]int32{45, 0, 47, 1}, LeadingComments:func(v string) *string { return &v } ( " The protocol compiler can output a FileDescriptorSet containing the .proto\n files it parses.\n" ), TrailingComments:nil, XXX_unrecognized:[]byte{}}
&google_protobuf.SourceCodeInfo_Location{Path:[]int32{4, 1}, Span:[]int32{50, 0, 78, 1}, LeadingComments:func(v string) *string { return &v } ( " Describes a complete .proto file.\n" ), TrailingComments:nil, XXX_unrecognized:[]byte{}}
&google_protobuf.SourceCodeInfo_Location{Path:[]int32{4, 1, 2, 1}, Span:[]int32{53, 2, 30}, LeadingComments:func(v string) *string { return &v } ( " file name, relative to root of source tree\n" ), TrailingComments:func(v string) *string { return &v } ( " e.g. \"foo\", \"foo.bar\", etc.\n" ), XXX_unrecognized:[]byte{}}
&google_protobuf.SourceCodeInfo_Location{Path:[]int32{4, 1, 2, 2}, Span:[]int32{57, 2, 33}, LeadingComments:func(v string) *string { return &v } ( " Names of files imported by this file.\n" ), TrailingComments:nil, XXX_unrecognized:[]byte{}}
&google_protobuf.SourceCodeInfo_Location{Path:[]int32{4, 1, 2, 3}, Span:[]int32{60, 2, 40}, LeadingComments:func(v string) *string { return &v } ( " Indexes of the public imported files in the dependency list above.\n" ), TrailingComments:nil, XXX_unrecognized:[]byte{}}
&google_protobuf.SourceCodeInfo_Location{Path:[]int32{4, 1, 2, 4}, Span:[]int32{64, 2, 38}, LeadingComments:func(v string) *string { return &v } ( " Indexes of the weak imported files in the dependency list.\n For Google-internal migration only. Do not use.\n" ), TrailingComments:nil, XXX_unrecognized:[]byte{}}
&google_protobuf.SourceCodeInfo_Location{Path:[]int32{4, 1, 2, 5}, Span:[]int32{67, 2, 44}, LeadingComments:func(v string) *string { return &v } ( " All top-level definitions in this file.\n" ), TrailingComments:nil, XXX_unrecognized:[]byte{}}
&google_protobuf.SourceCodeInfo_Location{Path:[]int32{4, 1, 2, 10}, Span:[]int32{77, 2, 47}, LeadingComments:func(v string) *string { return &v } ( " This field contains optional information about the original source code.\n You may safely remove this entire field whithout harming runtime\n functionality of the descriptors -- the information is needed only by\n development tools.\n" ), TrailingComments:nil, XXX_unrecognized:[]byte{}}
&google_protobuf.SourceCodeInfo_Location{Path:[]int32{4, 2}, Span:[]int32{81, 0, 94, 1}, LeadingComments:func(v string) *string { return &v } ( " Describes a message type.\n" ), TrailingComments:nil, XXX_unrecognized:[]byte{}}
&google_protobuf.SourceCodeInfo_Location{Path:[]int32{4, 3}, Span:[]int32{97, 0, 168, 1}, LeadingComments:func(v string) *string { return &v } ( " Describes a field within a message.\n" ), TrailingComments:nil, XXX_unrecognized:[]byte{}}
&google_protobuf.SourceCodeInfo_Location{Path:[]int32{4, 3, 2, 3}, Span:[]int32{104, 2, 62}, LeadingComments:func(v string) *string { return &v } ( " If type_name is set, this need not be set.  If both this and type_name\n are set, this must be either TYPE_ENUM or TYPE_MESSAGE.\n" ), TrailingComments:nil, XXX_unrecognized:[]byte{}}
&google_protobuf.SourceCodeInfo_Location{Path:[]int32{4, 3, 2, 4}, Span:[]int32{111, 2, 32}, LeadingComments:func(v string) *string { return &v } ( " For message and enum types, this is the name of the type.  If the name\n starts with a '.', it is fully-qualified.  Otherwise, C++-like scoping\n rules are used to find the type (i.e. first the nested types within this\n message are searched, then within the parent, on up to the root\n namespace).\n" ), TrailingComments:nil, XXX_unrecognized:[]byte{}}
&google_protobuf.SourceCodeInfo_Location{Path:[]int32{4, 3, 2, 5}, Span:[]int32{115, 2, 31}, LeadingComments:func(v string) *string { return &v } ( " For extensions, this is the name of the type being extended.  It is\n resolved in the same manner as type_name.\n" ), TrailingComments:nil, XXX_unrecognized:[]byte{}}
&google_protobuf.SourceCodeInfo_Location{Path:[]int32{4, 3, 2, 6}, Span:[]int32{122, 2, 36}, LeadingComments:func(v string) *string { return &v } ( " For numeric types, contains the original text representation of the value.\n For booleans, \"true\" or \"false\".\n For strings, contains the default text contents (not escaped in any way).\n For bytes, contains the C escaped value.  All bytes >= 128 are escaped.\n TODO(kenton):  Base-64 encode?\n" ), TrailingComments:nil, XXX_unrecognized:[]byte{}}
&google_protobuf.SourceCodeInfo_Location{Path:[]int32{4, 3, 4, 0, 2, 0}, Span:[]int32{129, 4, 20}, LeadingComments:func(v string) *string { return &v } ( " 0 is reserved for errors.\n Order is weird for historical reasons.\n" ), TrailingComments:nil, XXX_unrecognized:[]byte{}}
&google_protobuf.SourceCodeInfo_Location{Path:[]int32{4, 3, 4, 0, 2, 2}, Span:[]int32{134, 4, 19}, LeadingComments:func(v string) *string { return &v } ( " Not ZigZag encoded.  Negative numbers take 10 bytes.  Use TYPE_SINT64 if\n negative values are likely.\n" ), TrailingComments:nil, XXX_unrecognized:[]byte{}}
&google_protobuf.SourceCodeInfo_Location{Path:[]int32{4, 3, 4, 0, 2, 4}, Span:[]int32{139, 4, 19}, LeadingComments:func(v string) *string { return &v } ( " Not ZigZag encoded.  Negative numbers take 10 bytes.  Use TYPE_SINT32 if\n negative values are likely.\n" ), TrailingComments:nil, XXX_unrecognized:[]byte{}}
&google_protobuf.SourceCodeInfo_Location{Path:[]int32{4, 3, 4, 0, 2, 10}, Span:[]int32{146, 4, 22}, LeadingComments:func(v string) *string { return &v } ( " Tag-delimited aggregate.\n" ), TrailingComments:func(v string) *string { return &v } ( " Length-delimited aggregate.\n" ), XXX_unrecognized:[]byte{}}
&google_protobuf.SourceCodeInfo_Location{Path:[]int32{4, 3, 4, 0, 2, 11}, Span:[]int32{150, 4, 20}, LeadingComments:func(v string) *string { return &v } ( " New in version 2.\n" ), TrailingComments:nil, XXX_unrecognized:[]byte{}}
&google_protobuf.SourceCodeInfo_Location{Path:[]int32{4, 3, 4, 0, 2, 17}, Span:[]int32{157, 4, 21}, LeadingComments:func(v string) *string { return &v } ( " Uses ZigZag encoding.\n" ), TrailingComments:func(v string) *string { return &v } ( " Uses ZigZag encoding.\n" ), XXX_unrecognized:[]byte{}}
&google_protobuf.SourceCodeInfo_Location{Path:[]int32{4, 3, 4, 1, 2, 0}, Span:[]int32{163, 4, 23}, LeadingComments:func(v string) *string { return &v } ( " 0 is reserved for errors\n" ), TrailingComments:nil, XXX_unrecognized:[]byte{}}
&google_protobuf.SourceCodeInfo_Location{Path:[]int32{4, 3, 4, 1, 2, 2}, Span:[]int32{165, 4, 23}, LeadingComments:nil, TrailingComments:func(v string) *string { return &v } ( " TODO(sanjay): Should we add LABEL_MAP?\n" ), XXX_unrecognized:[]byte{}}
&google_protobuf.SourceCodeInfo_Location{Path:[]int32{4, 4}, Span:[]int32{171, 0, 175, 1}, LeadingComments:func(v string) *string { return &v } ( " Describes an enum type.\n" ), TrailingComments:nil, XXX_unrecognized:[]byte{}}
&google_protobuf.SourceCodeInfo_Location{Path:[]int32{4, 5}, Span:[]int32{178, 0, 182, 1}, LeadingComments:func(v string) *string { return &v } ( " Describes a value within an enum.\n" ), TrailingComments:nil, XXX_unrecognized:[]byte{}}
&google_protobuf.SourceCodeInfo_Location{Path:[]int32{4, 6}, Span:[]int32{185, 0, 189, 1}, LeadingComments:func(v string) *string { return &v } ( " Describes a service.\n" ), TrailingComments:nil, XXX_unrecognized:[]byte{}}
&google_protobuf.SourceCodeInfo_Location{Path:[]int32{4, 7}, Span:[]int32{192, 0, 200, 1}, LeadingComments:func(v string) *string { return &v } ( " Describes a method of a service.\n" ), TrailingComments:nil, XXX_unrecognized:[]byte{}}
&google_protobuf.SourceCodeInfo_Location{Path:[]int32{4, 7, 2, 1}, Span:[]int32{197, 2, 33}, LeadingComments:func(v string) *string { return &v } ( " Input and output type names.  These are resolved in the same way as\n FieldDescriptorProto.type_name, but must refer to a message type.\n" ), TrailingComments:nil, XXX_unrecognized:[]byte{}}
&google_protobuf.SourceCodeInfo_Location{Path:[]int32{4, 8, 5}, Span:[]int32{205, 2, 25}, LeadingComments:func(v string) *string { return &v } ( " Clients can define custom options in extensions of this message. See above.\n" ), TrailingComments:nil, XXX_unrecognized:[]byte{}}
&google_protobuf.SourceCodeInfo_Location{Path:[]int32{4, 8, 2, 0}, Span:[]int32{211, 2, 35}, LeadingComments:func(v string) *string { return &v } ( " Sets the Java package where classes generated from this .proto will be\n placed.  By default, the proto package is used, but this is often\n inappropriate because proto packages do not normally start with backwards\n domain names.\n" ), TrailingComments:nil, XXX_unrecognized:[]byte{}}
&google_protobuf.SourceCodeInfo_Location{Path:[]int32{4, 8, 2, 1}, Span:[]int32{218, 2, 43}, LeadingComments:func(v string) *string { return &v } ( " If set, all the classes from the .proto file are wrapped in a single\n outer class with the given name.  This applies to both Proto1\n (equivalent to the old \"--one_java_file\" option) and Proto2 (where\n a .proto always translates to a single class, but you may want to\n explicitly choose the class name).\n" ), TrailingComments:nil, XXX_unrecognized:[]byte{}}
&google_protobuf.SourceCodeInfo_Location{Path:[]int32{4, 8, 2, 2}, Span:[]int32{226, 2, 41}, LeadingComments:func(v string) *string { return &v } ( " If set true, then the Java code generator will generate a separate .java\n file for each top-level message, enum, and service defined in the .proto\n file.  Thus, these types will *not* be nested inside the outer class\n named by java_outer_classname.  However, the outer class will still be\n generated to contain the file's getDescriptor() method as well as any\n top-level extensions defined in the file.\n" ), TrailingComments:nil, XXX_unrecognized:[]byte{}}
&google_protobuf.SourceCodeInfo_Location{Path:[]int32{4, 8, 2, 3}, Span:[]int32{232, 2, 51}, LeadingComments:func(v string) *string { return &v } ( " If set true, then the Java code generator will generate equals() and\n hashCode() methods for all messages defined in the .proto file. This is\n purely a speed optimization, as the AbstractMessage base class includes\n reflection-based implementations of these methods.\n" ), TrailingComments:nil, XXX_unrecognized:[]byte{}}
&google_protobuf.SourceCodeInfo_Location{Path:[]int32{4, 8, 2, 5}, Span:[]int32{237, 2, 34}, LeadingComments:func(v string) *string { return &v } ( " Sets the Go package where structs generated from this .proto will be\n placed.  There is no default.\n" ), TrailingComments:nil, XXX_unrecognized:[]byte{}}
&google_protobuf.SourceCodeInfo_Location{Path:[]int32{4, 8, 2, 6}, Span:[]int32{249, 2, 41}, LeadingComments:func(v string) *string { return &v } ( " Should generic services be generated in each language?  \"Generic\" services\n are not specific to any particular RPC system.  They are generated by the\n main code generators in each language (without additional plugins).\n Generic services were the only kind of service generation supported by\n early versions of proto2.\n\n Generic services are now considered deprecated in favor of using plugins\n that generate code specific to your particular RPC system.  Therefore,\n these default to false.  Old code which depends on generic services should\n explicitly set them to true.\n" ), TrailingComments:nil, XXX_unrecognized:[]byte{}}
&google_protobuf.SourceCodeInfo_Location{Path:[]int32{4, 8, 2, 9}, Span:[]int32{254, 2, 58}, LeadingComments:func(v string) *string { return &v } ( " The parser stores options it doesn't recognize here. See above.\n" ), TrailingComments:nil, XXX_unrecognized:[]byte{}}
&google_protobuf.SourceCodeInfo_Location{Path:[]int32{4, 8, 4, 0}, Span:[]int32{257, 2, 266, 3}, LeadingComments:func(v string) *string { return &v } ( " Generated classes can be optimized for speed or code size.\n" ), TrailingComments:nil, XXX_unrecognized:[]byte{}}
&google_protobuf.SourceCodeInfo_Location{Path:[]int32{4, 8, 4, 0, 2, 0}, Span:[]int32{258, 4, 14}, LeadingComments:nil, TrailingComments:func(v string) *string { return &v } ( " Generate complete code for parsing, serialization,\n" ), XXX_unrecognized:[]byte{}}
&google_protobuf.SourceCodeInfo_Location{Path:[]int32{4, 8, 4, 0, 2, 1}, Span:[]int32{262, 4, 18}, LeadingComments:func(v string) *string { return &v } ( " etc.\n" ), TrailingComments:nil, XXX_unrecognized:[]byte{}}
&google_protobuf.SourceCodeInfo_Location{Path:[]int32{4, 8, 4, 0, 2, 2}, Span:[]int32{264, 4, 21}, LeadingComments:func(v string) *string { return &v } ( " Use ReflectionOps to implement these methods.\n" ), TrailingComments:func(v string) *string { return &v } ( " Generate code using MessageLite and the lite runtime.\n" ), XXX_unrecognized:[]byte{}}
&google_protobuf.SourceCodeInfo_Location{Path:[]int32{4, 9, 5}, Span:[]int32{272, 2, 25}, LeadingComments:func(v string) *string { return &v } ( " Clients can define custom options in extensions of this message. See above.\n" ), TrailingComments:nil, XXX_unrecognized:[]byte{}}
&google_protobuf.SourceCodeInfo_Location{Path:[]int32{4, 9, 2, 0}, Span:[]int32{292, 2, 44}, LeadingComments:func(v string) *string { return &v } ( " Set true to use the old proto1 MessageSet wire format for extensions.\n This is provided for backwards-compatibility with the MessageSet wire\n format.  You should not use this for any other reason:  It's less\n efficient, has fewer features, and is more complicated.\n\n The message must be defined exactly as follows:\n   message Foo {\n     option message_set_wire_format = true;\n     extensions 4 to max;\n   }\n Note that the message cannot have any defined fields; MessageSets only\n have extensions.\n\n All extensions of your type must be singular messages; e.g. they cannot\n be int32s, enums, or repeated messages.\n\n Because this is an option, the above two restrictions are not enforced by\n the protocol compiler.\n" ), TrailingComments:nil, XXX_unrecognized:[]byte{}}
&google_protobuf.SourceCodeInfo_Location{Path:[]int32{4, 9, 2, 1}, Span:[]int32{297, 2, 52}, LeadingComments:func(v string) *string { return &v } ( " Disables the generation of the standard \"descriptor()\" accessor, which can\n conflict with a field of the same name.  This is meant to make migration\n from proto1 easier; new code should avoid fields named \"descriptor\".\n" ), TrailingComments:nil, XXX_unrecognized:[]byte{}}
&google_protobuf.SourceCodeInfo_Location{Path:[]int32{4, 9, 2, 2}, Span:[]int32{300, 2, 58}, LeadingComments:func(v string) *string { return &v } ( " The parser stores options it doesn't recognize here. See above.\n" ), TrailingComments:nil, XXX_unrecognized:[]byte{}}
&google_protobuf.SourceCodeInfo_Location{Path:[]int32{4, 10, 5}, Span:[]int32{306, 2, 25}, LeadingComments:func(v string) *string { return &v } ( " Clients can define custom options in extensions of this message. See above.\n" ), TrailingComments:nil, XXX_unrecognized:[]byte{}}
&google_protobuf.SourceCodeInfo_Location{Path:[]int32{4, 10, 2, 0}, Span:[]int32{312, 2, 56}, LeadingComments:func(v string) *string { return &v } ( " The ctype option instructs the C++ code generator to use a different\n representation of the field than it normally would.  See the specific\n options below.  This option is not yet implemented in the open source\n release -- sorry, we'll try to include it in a future version!\n" ), TrailingComments:nil, XXX_unrecognized:[]byte{}}
&google_protobuf.SourceCodeInfo_Location{Path:[]int32{4, 10, 2, 1}, Span:[]int32{318, 2, 27}, LeadingComments:func(v string) *string { return &v } ( " The packed option can be enabled for repeated primitive fields to enable\n a more efficient representation on the wire. Rather than repeatedly\n writing the tag and type for each element, the entire array is encoded as\n a single length-delimited blob.\n" ), TrailingComments:nil, XXX_unrecognized:[]byte{}}
&google_protobuf.SourceCodeInfo_Location{Path:[]int32{4, 10, 2, 2}, Span:[]int32{348, 2, 25}, LeadingComments:func(v string) *string { return &v } ( " Should this field be parsed lazily?  Lazy applies only to message-type\n fields.  It means that when the outer message is initially parsed, the\n inner message's contents will not be parsed but instead stored in encoded\n form.  The inner message will actually be parsed when it is first accessed.\n\n This is only a hint.  Implementations are free to choose whether to use\n eager or lazy parsing regardless of the value of this option.  However,\n setting this option true suggests that the protocol author believes that\n using lazy parsing on this field is worth the additional bookkeeping\n overhead typically needed to implement it.\n\n This option does not affect the public interface of any generated code;\n all method signatures remain the same.  Furthermore, thread-safety of the\n interface is not affected by this option; const methods remain safe to\n call from multiple threads concurrently, while non-const methods continue\n to require exclusive access.\n\n\n Note that implementations may choose not to check required fields within\n a lazy sub-message.  That is, calling IsInitialized() on the outher message\n may return true even if the inner message has missing required fields.\n This is necessary because otherwise the inner message would have to be\n parsed in order to perform the check, defeating the purpose of lazy\n parsing.  An implementation which chooses not to check required fields\n must be consistent about it.  That is, for any particular sub-message, the\n implementation must either *always* check its required fields, or *never*\n check its required fields, regardless of whether or not the message has\n been parsed.\n" ), TrailingComments:nil, XXX_unrecognized:[]byte{}}
&google_protobuf.SourceCodeInfo_Location{Path:[]int32{4, 10, 2, 3}, Span:[]int32{354, 2, 31}, LeadingComments:func(v string) *string { return &v } ( " Is this field deprecated?\n Depending on the target platform, this can emit Deprecated annotations\n for accessors, or it will be completely ignored; in the very least, this\n is a formalization for deprecating fields.\n" ), TrailingComments:nil, XXX_unrecognized:[]byte{}}
&google_protobuf.SourceCodeInfo_Location{Path:[]int32{4, 10, 2, 4}, Span:[]int32{368, 2, 43}, LeadingComments:func(v string) *string { return &v } ( " EXPERIMENTAL.  DO NOT USE.\n For \"map\" fields, the name of the field in the enclosed type that\n is the key for this map.  For example, suppose we have:\n   message Item {\n     required string name = 1;\n     required string value = 2;\n   }\n   message Config {\n     repeated Item items = 1 [experimental_map_key=\"name\"];\n   }\n In this situation, the map key for Item will be set to \"name\".\n TODO: Fully-implement this, then remove the \"experimental_\" prefix.\n" ), TrailingComments:nil, XXX_unrecognized:[]byte{}}
&google_protobuf.SourceCodeInfo_Location{Path:[]int32{4, 10, 2, 5}, Span:[]int32{371, 2, 26}, LeadingComments:func(v string) *string { return &v } ( " For Google-internal migration only. Do not use.\n" ), TrailingComments:nil, XXX_unrecognized:[]byte{}}
&google_protobuf.SourceCodeInfo_Location{Path:[]int32{4, 10, 2, 6}, Span:[]int32{374, 2, 58}, LeadingComments:func(v string) *string { return &v } ( " The parser stores options it doesn't recognize here. See above.\n" ), TrailingComments:nil, XXX_unrecognized:[]byte{}}
&google_protobuf.SourceCodeInfo_Location{Path:[]int32{4, 10, 4, 0, 2, 0}, Span:[]int32{379, 4, 15}, LeadingComments:func(v string) *string { return &v } ( " Default mode.\n" ), TrailingComments:nil, XXX_unrecognized:[]byte{}}
&google_protobuf.SourceCodeInfo_Location{Path:[]int32{4, 11, 5}, Span:[]int32{388, 2, 25}, LeadingComments:func(v string) *string { return &v } ( " Clients can define custom options in extensions of this message. See above.\n" ), TrailingComments:nil, XXX_unrecognized:[]byte{}}
&google_protobuf.SourceCodeInfo_Location{Path:[]int32{4, 11, 2, 0}, Span:[]int32{392, 2, 32}, LeadingComments:func(v string) *string { return &v } ( " Set this option to false to disallow mapping different tag names to a same\n value.\n" ), TrailingComments:nil, XXX_unrecognized:[]byte{}}
&google_protobuf.SourceCodeInfo_Location{Path:[]int32{4, 11, 2, 1}, Span:[]int32{395, 2, 58}, LeadingComments:func(v string) *string { return &v } ( " The parser stores options it doesn't recognize here. See above.\n" ), TrailingComments:nil, XXX_unrecognized:[]byte{}}
&google_protobuf.SourceCodeInfo_Location{Path:[]int32{4, 12, 5}, Span:[]int32{401, 2, 25}, LeadingComments:func(v string) *string { return &v } ( " Clients can define custom options in extensions of this message. See above.\n" ), TrailingComments:nil, XXX_unrecognized:[]byte{}}
&google_protobuf.SourceCodeInfo_Location{Path:[]int32{4, 12, 2, 0}, Span:[]int32{404, 2, 58}, LeadingComments:func(v string) *string { return &v } ( " The parser stores options it doesn't recognize here. See above.\n" ), TrailingComments:nil, XXX_unrecognized:[]byte{}}
&google_protobuf.SourceCodeInfo_Location{Path:[]int32{4, 13, 5}, Span:[]int32{410, 2, 25}, LeadingComments:func(v string) *string { return &v } ( " Clients can define custom options in extensions of this message. See above.\n" ), TrailingComments:nil, XXX_unrecognized:[]byte{}}
&google_protobuf.SourceCodeInfo_Location{Path:[]int32{4, 13, 2, 0}, Span:[]int32{413, 2, 58}, LeadingComments:func(v string) *string { return &v } ( " The parser stores options it doesn't recognize here. See above.\n" ), TrailingComments:nil, XXX_unrecognized:[]byte{}}
&google_protobuf.SourceCodeInfo_Location{Path:[]int32{4, 14, 5}, Span:[]int32{419, 2, 25}, LeadingComments:func(v string) *string { return &v } ( " Clients can define custom options in extensions of this message. See above.\n" ), TrailingComments:nil, XXX_unrecognized:[]byte{}}
&google_protobuf.SourceCodeInfo_Location{Path:[]int32{4, 14, 2, 0}, Span:[]int32{422, 2, 58}, LeadingComments:func(v string) *string { return &v } ( " The parser stores options it doesn't recognize here. See above.\n" ), TrailingComments:nil, XXX_unrecognized:[]byte{}}
&google_protobuf.SourceCodeInfo_Location{Path:[]int32{4, 15}, Span:[]int32{431, 0, 452, 1}, LeadingComments:func(v string) *string { return &v } ( " A message representing a option the parser does not recognize. This only\n appears in options protos created by the compiler::Parser class.\n DescriptorPool resolves these when building Descriptor objects. Therefore,\n options protos in descriptor objects (e.g. returned by Descriptor::options(),\n or produced by Descriptor::CopyTo()) will never have UninterpretedOptions\n in them.\n" ), TrailingComments:nil, XXX_unrecognized:[]byte{}}
&google_protobuf.SourceCodeInfo_Location{Path:[]int32{4, 15, 2, 1}, Span:[]int32{436, 2, 39}, LeadingComments:func(v string) *string { return &v } ( " The value of the uninterpreted option, in whatever type the tokenizer\n identified it as during parsing. Exactly one of these should be set.\n" ), TrailingComments:nil, XXX_unrecognized:[]byte{}}
&google_protobuf.SourceCodeInfo_Location{Path:[]int32{4, 15, 3, 0}, Span:[]int32{448, 2, 451, 3}, LeadingComments:func(v string) *string { return &v } ( " The name of the uninterpreted option.  Each string represents a segment in\n a dot-separated name.  is_extension is true iff a segment represents an\n extension (denoted with parentheses in options specs in .proto files).\n E.g.,{ [\"foo\", false], [\"bar.baz\", true], [\"qux\", false] } represents\n \"foo.(bar.baz).qux\".\n" ), TrailingComments:nil, XXX_unrecognized:[]byte{}}
&google_protobuf.SourceCodeInfo_Location{Path:[]int32{4, 16}, Span:[]int32{456, 0, 574, 1}, LeadingComments:func(v string) *string { return &v } ( " Encapsulates information about the original source file from which a\n FileDescriptorProto was generated.\n" ), TrailingComments:nil, XXX_unrecognized:[]byte{}}
&google_protobuf.SourceCodeInfo_Location{Path:[]int32{4, 16, 2, 0}, Span:[]int32{501, 2, 64}, LeadingComments:func(v string) *string { return &v } ( " A Location identifies a piece of source code in a .proto file which\n corresponds to a particular definition.  This information is intended\n to be useful to IDEs, code indexers, documentation generators, and similar\n tools.\n\n For example, say we have a file like:\n   message Foo {\n     optional string foo = 1;\n   }\n Let's look at just the field definition:\n   optional string foo = 1;\n   ^       ^^     ^^  ^  ^^^\n   a       bc     de  f  ghi\n We have the following locations:\n   span   path               represents\n   [a,i)  [ 4, 0, 2, 0 ]     The whole field definition.\n   [a,b)  [ 4, 0, 2, 0, 4 ]  The label (optional).\n   [c,d)  [ 4, 0, 2, 0, 5 ]  The type (string).\n   [e,f)  [ 4, 0, 2, 0, 1 ]  The name (foo).\n   [g,h)  [ 4, 0, 2, 0, 3 ]  The number (1).\n\n Notes:\n - A location may refer to a repeated field itself (i.e. not to any\n   particular index within it).  This is used whenever a set of elements are\n   logically enclosed in a single code segment.  For example, an entire\n   extend block (possibly containing multiple extension definitions) will\n   have an outer location whose path refers to the \"extensions\" repeated\n   field without an index.\n - Multiple locations may have the same path.  This happens when a single\n   logical declaration is spread out across multiple places.  The most\n   obvious example is the \"extend\" block again -- there may be multiple\n   extend blocks in the same scope, each of which will have the same path.\n - A location's span is not always a subset of its parent's span.  For\n   example, the \"extendee\" of an extension declaration appears at the\n   beginning of the \"extend\" block and is shared by all extensions within\n   the block.\n - Just because a location's span is a subset of some other location's span\n   does not mean that it is a descendent.  For example, a \"group\" defines\n   both a type and a field in a single declaration.  Thus, the locations\n   corresponding to the type and field and their components will overlap.\n - Code which tries to interpret locations should probably be designed to\n   ignore those that it doesn't understand, as more types of locations could\n   be recorded in the future.\n" ), TrailingComments:nil, XXX_unrecognized:[]byte{}}
&google_protobuf.SourceCodeInfo_Location{Path:[]int32{4, 16, 3, 0, 2, 0}, Span:[]int32{528, 4, 44}, LeadingComments:func(v string) *string { return &v } ( " Identifies which part of the FileDescriptorProto was defined at this\n location.\n\n Each element is a field number or an index.  They form a path from\n the root FileDescriptorProto to the place where the definition.  For\n example, this path:\n   [ 4, 3, 2, 7, 1 ]\n refers to:\n   file.message_type(3)  // 4, 3\n       .field(7)         // 2, 7\n       .name()           // 1\n This is because FileDescriptorProto.message_type has field number 4:\n   repeated DescriptorProto message_type = 4;\n and DescriptorProto.field has field number 2:\n   repeated FieldDescriptorProto field = 2;\n and FieldDescriptorProto.name has field number 1:\n   optional string name = 1;\n\n Thus, the above path gives the location of a field name.  If we removed\n the last element:\n   [ 4, 3, 2, 7 ]\n this path refers to the whole field declaration (from the beginning\n of the label to the terminating semicolon).\n" ), TrailingComments:nil, XXX_unrecognized:[]byte{}}
&google_protobuf.SourceCodeInfo_Location{Path:[]int32{4, 16, 3, 0, 2, 1}, Span:[]int32{535, 4, 44}, LeadingComments:func(v string) *string { return &v } ( " Always has exactly three or four elements: start line, start column,\n end line (optional, otherwise assumed same as start line), end column.\n These are packed into a single field for efficiency.  Note that line\n and column numbers are zero-based -- typically you will want to add\n 1 to each before displaying to a user.\n" ), TrailingComments:nil, XXX_unrecognized:[]byte{}}
&google_protobuf.SourceCodeInfo_Location{Path:[]int32{4, 16, 3, 0, 2, 2}, Span:[]int32{571, 4, 41}, LeadingComments:func(v string) *string { return &v } ( " If this SourceCodeInfo represents a complete declaration, these are any\n comments appearing before and after the declaration which appear to be\n attached to the declaration.\n \n A series of line comments appearing on consecutive lines, with no other\n tokens appearing on those lines, will be treated as a single comment.\n \n Only the comment content is provided; comment markers (e.g. //) are\n stripped out.  For block comments, leading whitespace and an asterisk\n will be stripped from the beginning of each line other than the first.\n Newlines are included in the output.\n \n Examples:\n \n optional int32 foo = 1;  // Comment attached to foo.\n // Comment attached to bar.\n optional int32 bar = 2;\n \n optional string baz = 3;\n // Comment attached to baz.\n // Another line attached to baz.\n \n // Comment attached to qux.\n //\n // Another line attached to qux.\n optional double qux = 4;\n \n optional string corge = 5;\n /* Block comment attached\n * to corge.  Leading asterisks\n * will be removed. */\n /* Block comment attached to\n * grault. */\n optional int32 grault = 6;\n" ), TrailingComments:nil, XXX_unrecognized:[]byte{}}
FAILED: testdata/descriptor.proto
exit status 255
FAIL	github.com/DirkBrand/protobuf-code-formatter/protoc-gen-pretty	0.231s
